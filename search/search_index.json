{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#pyclasher","title":"PyClasher","text":"<p>PyClasher is the name of the asynchronous ClashOfClans API. It is an object-oriented wrapper client that provides easy access to the  requested data.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Asynchronous and parallel requesting</li> <li>Possibility to use multiple tokens and to login via email address and   password of the ClashOfClans developer portal</li> <li>Control over the number of requests per second and the number of used tokens</li> <li>Open source</li> <li>Type hinted</li> <li>Supports Python 3.8 -&gt; 3.11</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>It is possible to install the package from GitHib releases. You can use the  following command to add PyClasher to your library:</p> <pre><code>pip install git+https://github.com/201st-Luka/PyClasher.git@v1.0.0-alpha1\n</code></pre>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>This material is unofficial and is not endorsed by Supercell. For more  information see Supercell's Fan Content Policy: www.supercell.com/fan-content-policy.</p>"},{"location":"CONTRIBUTING/","title":"Contributing","text":"<p>Contributing to this open-source project is appreciated. To contribute please  visit the Discord server as well.</p>"},{"location":"CONTRIBUTING/#where-to-start","title":"Where to start","text":"<p>The contribution starts with an issue. The created issue should explain what to do. Based on this issue you can start contributing. If so, refer to the issue in the pull request. </p>"},{"location":"CONTRIBUTING/#issues","title":"Issues","text":"<p>The issues must follow these guidelines: - An issue must not be a duplicate of an existing issue. - A bug issue must provide clear information about the bug. - A feature request should contain information about what the feature should do and what it serves.</p> <p>Irrelevant issues, duplicates or issues failing to comply to these guidelines  will be closed. </p>"},{"location":"CONTRIBUTING/#pull-requests","title":"Pull requests","text":"<p>After solving the issue it is possible to create a pull request. This pull  request must target the <code>unstable</code> branch. From there it will be part of the bot  in the next release.</p> <p>Requirements for a pull request are: - Commits must be clear - The pull request must be up-to-date with the <code>stable</code> branch - All checks (if applicable) must pass - A review must be requested from at least one developer (201st-Luka)</p>"},{"location":"CONTRIBUTING/#recognising-the-contribution","title":"Recognising the contribution","text":"<p>When the PR is merged in the <code>stable</code> branch. GitHub will automatically add the  user to the repository's contributor list. It is also possible to earn a role  on the Discord server for contribution.</p>"},{"location":"CONTRIBUTING/#installation","title":"Installation","text":"<ol> <li>Fork the repository and copy it to your local machine.</li> <li>Install the requirements:</li> <li> <p>for developing:</p> <ul> <li>aiohttp (<code>pip install aiohttp</code>)</li> </ul> <p>You can simply do   <code>bash  pip install -r requirements.txt</code>   - for testing: - aiohttp (<code>pip install aiohttp</code>) - pytest (<code>pip install pytest</code>) - pytest-asyncio  (<code>pip install pytest-asyncio</code>) You can simply do <code>bash pip install -r requirements-tests.txt</code>   - for creating the documentation: - mkdocs (<code>pip install mkdocs</code>) - mkdocs-material  (<code>pip install mkdocs-material</code>) - mkdocstrings[python]  (<code>pip install mkdocstrings[python]</code>) - mkdocs-awesome-pages-plugin  (<code>pip install mkdocs-awesome-pages-plugin</code>) You can simply do <code>bash pip install -r requirements-docs.txt</code>   In total, you should have installed 7 packages.</p> </li> </ol> <p>You're done! Happy coding.</p>"},{"location":"contributors/","title":"Contributors","text":""},{"location":"contributors/#project-owner","title":"Project owner","text":"<ul> <li>201st-Luka</li> </ul>"},{"location":"contributors/#contributors_1","title":"Contributors","text":"<p>No contributors yet. In the future, contributors are going to be added here.</p>"},{"location":"API%20Reference/exceptions/","title":"Exceptions","text":"<p>This file contains the exception classes for the <code>PyClasher</code> package.</p> Authors <p>201st-Luka</p>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.MISSING","title":"<code>MISSING = Missing()</code>  <code>module-attribute</code>","text":"<p><code>MISSING</code> object</p> <p>This Missing-instance is used as a reference in many parts of the package.</p> <p>instance of the <code>Missing</code> class</p>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.AccessDenied","title":"<code>AccessDenied</code>","text":"<p>             Bases: <code>ApiException</code></p> <p>Access denied, either because of missing/incorrect credentials or used API token does not grant access to the requested resource.</p> Source code in <code>pyclasher/exceptions.py</code> <pre><code>class AccessDenied(ApiException):\n\"\"\"\n    Access denied, either because of missing/incorrect credentials or used API\n    token does not grant access to the requested resource.\n    \"\"\"\n\n    def __init__(self, client_error=None):\n\"\"\"\n        Args:\n            client_error (ClientError): optional ``ClientError`` information\n                                        that is provided by the request\n        \"\"\"\n        super().__init__(403, client_error)\n        return\n\n    def __str__(self):\n        return (\"Access denied, either because of missing/incorrect \"\n                \"credentials or used API token does not grant access to the \"\n                \"requested resource.\")\n</code></pre>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.AccessDenied.__init__","title":"<code>__init__(client_error=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client_error</code> <code>ClientError</code> <p>optional <code>ClientError</code> information                         that is provided by the request</p> <code>None</code> Source code in <code>pyclasher/exceptions.py</code> <pre><code>def __init__(self, client_error=None):\n\"\"\"\n    Args:\n        client_error (ClientError): optional ``ClientError`` information\n                                    that is provided by the request\n    \"\"\"\n    super().__init__(403, client_error)\n    return\n</code></pre>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.ApiException","title":"<code>ApiException</code>","text":"<p>             Bases: <code>PyClasherException</code></p> <p>Exception class that is subclassed by every API exception</p> <p>Attributes:</p> Name Type Description <code>api_code</code> <code>int</code> <p>API status code of the request</p> <code>client_error</code> <code>ClientError</code> <p>optional <code>ClientError</code> information that is                         provided by the request</p> Source code in <code>pyclasher/exceptions.py</code> <pre><code>class ApiException(PyClasherException):\n\"\"\"\n    Exception class that is subclassed by every API exception\n\n    Attributes:\n        api_code (int):             API status code of the request\n        client_error (ClientError): optional ``ClientError`` information that is\n                                    provided by the request\n    \"\"\"\n\n    def __init__(self, api_code, client_error=None):\n\"\"\"\n        Args:\n            api_code (int):             API status code of the request\n            client_error (ClientError): optional ``ClientError`` information\n                                        that is provided by the request\n        \"\"\"\n        self.api_code = api_code\n        self.client_error = client_error\n        super().__init__()\n        return\n\n    def __repr__(self):\n        return f\"{self.__class__.__name__}({self.api_code})\"\n\n    def __str__(self):\n        return f\"an API error occurred\"\n</code></pre>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.ApiException.__init__","title":"<code>__init__(api_code, client_error=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>api_code</code> <code>int</code> <p>API status code of the request</p> required <code>client_error</code> <code>ClientError</code> <p>optional <code>ClientError</code> information                         that is provided by the request</p> <code>None</code> Source code in <code>pyclasher/exceptions.py</code> <pre><code>def __init__(self, api_code, client_error=None):\n\"\"\"\n    Args:\n        api_code (int):             API status code of the request\n        client_error (ClientError): optional ``ClientError`` information\n                                    that is provided by the request\n    \"\"\"\n    self.api_code = api_code\n    self.client_error = client_error\n    super().__init__()\n    return\n</code></pre>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.ApiExceptions","title":"<code>ApiExceptions</code>","text":"<p>Collection of the ApiExceptions</p> <p>Attributes:</p> Name Type Description <code>BadRequest</code> <code>BadRequest</code> <p><code>BadRequest</code> instance</p> <code>AccessDenied</code> <code>AccessDenied</code> <p><code>AccessDenied</code> instance</p> <code>NotFound</code> <code>NotFound</code> <p><code>NotFound</code> instance</p> <code>Throttled</code> <code>Throttled</code> <p><code>Throttled</code> instance</p> <code>UnknownApiException</code> <code>UnknownApiException</code> <p><code>UnknownApiException</code>                                         instance</p> <code>Maintenance</code> <code>Maintenance</code> <p><code>Maintenance</code> instance</p> Source code in <code>pyclasher/exceptions.py</code> <pre><code>class ApiExceptions:\n\"\"\"\n    Collection of the ApiExceptions\n\n    Attributes:\n        BadRequest (BadRequest):                    ``BadRequest`` instance\n        AccessDenied (AccessDenied):                ``AccessDenied`` instance\n        NotFound (NotFound):                        ``NotFound`` instance\n        Throttled (Throttled):                      ``Throttled`` instance\n        UnknownApiException (UnknownApiException):  ``UnknownApiException``\n                                                    instance\n        Maintenance (Maintenance):                  ``Maintenance`` instance\n    \"\"\"\n\n    BadRequest = BadRequest()\n    AccessDenied = AccessDenied()\n    NotFound = NotFound()\n    Throttled = Throttled()\n    UnknownApiException = UnknownApiException()\n    Maintenance = Maintenance()\n\n    @classmethod\n    def from_api_code(cls, api_code, client_error=None):\n\"\"\"\n        Class method to create a subclass of ``ApiException`` using the API\n        code and the optional client error information that is provided by the\n        request itself.\n\n        Args:\n            api_code (int):             API status code of the request\n            client_error (ClientError): optional ``ClientError`` information\n                                        that is provided by the request\n\n        Returns:\n            returns a subclass of ``ApiException``\n\n        Raises:\n            PyClasherException: ``api_code`` is not 400, 403, 404, 429,\n                                500, 503\n        \"\"\"\n\n        # cannot use a `match ...: case ...:` here because it is not\n        # supported for Python version 3.9 and below\n        if api_code == 400:\n            return BadRequest(client_error)\n        elif api_code == 403:\n            return AccessDenied(client_error)\n        elif api_code == 404:\n            return NotFound(client_error)\n        elif api_code == 429:\n            return Throttled(client_error)\n        elif api_code == 500:\n            return UnknownApiException(client_error)\n        elif api_code == 503:\n            return Maintenance(client_error)\n        else:\n            PyClasherException(f\"could not find {api_code} in the API \"\n                               f\"exceptions\")\n</code></pre>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.ApiExceptions.from_api_code","title":"<code>from_api_code(api_code, client_error=None)</code>  <code>classmethod</code>","text":"<p>Class method to create a subclass of <code>ApiException</code> using the API code and the optional client error information that is provided by the request itself.</p> <p>Parameters:</p> Name Type Description Default <code>api_code</code> <code>int</code> <p>API status code of the request</p> required <code>client_error</code> <code>ClientError</code> <p>optional <code>ClientError</code> information                         that is provided by the request</p> <code>None</code> <p>Returns:</p> Type Description <code>ApiException</code> <p>returns a subclass of <code>ApiException</code></p> <p>Raises:</p> Type Description <code>PyClasherException</code> <p><code>api_code</code> is not 400, 403, 404, 429,                 500, 503</p> Source code in <code>pyclasher/exceptions.py</code> <pre><code>@classmethod\ndef from_api_code(cls, api_code, client_error=None):\n\"\"\"\n    Class method to create a subclass of ``ApiException`` using the API\n    code and the optional client error information that is provided by the\n    request itself.\n\n    Args:\n        api_code (int):             API status code of the request\n        client_error (ClientError): optional ``ClientError`` information\n                                    that is provided by the request\n\n    Returns:\n        returns a subclass of ``ApiException``\n\n    Raises:\n        PyClasherException: ``api_code`` is not 400, 403, 404, 429,\n                            500, 503\n    \"\"\"\n\n    # cannot use a `match ...: case ...:` here because it is not\n    # supported for Python version 3.9 and below\n    if api_code == 400:\n        return BadRequest(client_error)\n    elif api_code == 403:\n        return AccessDenied(client_error)\n    elif api_code == 404:\n        return NotFound(client_error)\n    elif api_code == 429:\n        return Throttled(client_error)\n    elif api_code == 500:\n        return UnknownApiException(client_error)\n    elif api_code == 503:\n        return Maintenance(client_error)\n    else:\n        PyClasherException(f\"could not find {api_code} in the API \"\n                           f\"exceptions\")\n</code></pre>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.BadRequest","title":"<code>BadRequest</code>","text":"<p>             Bases: <code>ApiException</code></p> <p>Client provided incorrect parameters for the request.</p> Source code in <code>pyclasher/exceptions.py</code> <pre><code>class BadRequest(ApiException):\n\"\"\"\n    Client provided incorrect parameters for the request.\n    \"\"\"\n\n    def __init__(self, client_error=None):\n\"\"\"\n        Args:\n            client_error (ClientError): optional ``ClientError`` information\n                                        that is provided by the request\n        \"\"\"\n        super().__init__(400, client_error)\n        return\n\n    def __str__(self):\n        return \"Client provided incorrect parameters for the request.\"\n</code></pre>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.BadRequest.__init__","title":"<code>__init__(client_error=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client_error</code> <code>ClientError</code> <p>optional <code>ClientError</code> information                         that is provided by the request</p> <code>None</code> Source code in <code>pyclasher/exceptions.py</code> <pre><code>def __init__(self, client_error=None):\n\"\"\"\n    Args:\n        client_error (ClientError): optional ``ClientError`` information\n                                    that is provided by the request\n    \"\"\"\n    super().__init__(400, client_error)\n    return\n</code></pre>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.ClientAlreadyInitialised","title":"<code>ClientAlreadyInitialised</code>","text":"<p>             Bases: <code>PyClasherException</code></p> <p>Exception that is raised if a new client was created but there is another client that has at least one equal token.</p> Source code in <code>pyclasher/exceptions.py</code> <pre><code>class ClientAlreadyInitialised(PyClasherException):\n\"\"\"\n    Exception that is raised if a new client was created but there is another\n    client that has at least one equal token.\n    \"\"\"\n\n    def __str__(self):\n        return (\"It is not possible to create multiple clients with the same \"\n                \"tokens.\")\n</code></pre>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.ClientIsNotRunning","title":"<code>ClientIsNotRunning</code>","text":"<p>             Bases: <code>PyClasherException</code></p> <p>Exception that is raised if the client is not running but an action that requires the client to run was done.</p> Source code in <code>pyclasher/exceptions.py</code> <pre><code>class ClientIsNotRunning(PyClasherException):\n\"\"\"\n    Exception that is raised if the client is not running but an action that\n    requires the client to run was done.\n    \"\"\"\n\n    def __str__(self):\n        return \"The client is not running.\"\n</code></pre>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.ClientIsRunning","title":"<code>ClientIsRunning</code>","text":"<p>             Bases: <code>PyClasherException</code></p> <p>Exception that is raised if the client is started multiple times without stopping the client between those calls.</p> Source code in <code>pyclasher/exceptions.py</code> <pre><code>class ClientIsRunning(PyClasherException):\n\"\"\"\n    Exception that is raised if the client is started multiple times without\n    stopping the client between those calls.\n    \"\"\"\n\n    def __str__(self):\n        return (\"The client is already running. Stop it first before starting \"\n                \"again.\")\n</code></pre>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.ClientRunningOverwrite","title":"<code>ClientRunningOverwrite</code>","text":"<p>             Bases: <code>PyClasherException</code></p> <p>Exception that is raised if the client is running but a client parameter was tried to edit but requires a client that is not running.</p> Source code in <code>pyclasher/exceptions.py</code> <pre><code>class ClientRunningOverwrite(PyClasherException):\n\"\"\"\n    Exception that is raised if the client is running but a client parameter\n    was tried to edit but requires a client that is not running.\n    \"\"\"\n\n    def __str__(self):\n        return \"You cannot overwrite the parameter of a running client.\"\n</code></pre>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.InvalidClientId","title":"<code>InvalidClientId</code>","text":"<p>             Bases: <code>PyClasherException</code></p> <p>Exception that is raised if a client ID is not valid. It can already been taken, or it can be equal to an ID that is in the range of 0 to <code>global_client_id</code>.</p> Source code in <code>pyclasher/exceptions.py</code> <pre><code>class InvalidClientId(PyClasherException):\n\"\"\"\n    Exception that is raised if a client ID is not valid. It can already been\n    taken, or it can be equal to an ID that is in the range of 0 to\n    ``global_client_id``.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.InvalidLoginData","title":"<code>InvalidLoginData</code>","text":"<p>             Bases: <code>PyClasherException</code></p> <p>Exception that is raised if the provided login data using <code>Client.from_login(..., ...)</code> is not valid.</p> Source code in <code>pyclasher/exceptions.py</code> <pre><code>class InvalidLoginData(PyClasherException):\n\"\"\"\n    Exception that is raised if the provided login data using\n    `Client.from_login(..., ...)` is not valid.\n    \"\"\"\n\n    def __str__(self):\n        return \"The login data is invalid.\"\n</code></pre>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.InvalidSeasonFormat","title":"<code>InvalidSeasonFormat</code>","text":"<p>             Bases: <code>PyClasherException</code></p> <p>Exception that is raised if the season format is not valid.</p> Source code in <code>pyclasher/exceptions.py</code> <pre><code>class InvalidSeasonFormat(PyClasherException):\n\"\"\"\n    Exception that is raised if the season format is not valid.\n    \"\"\"\n\n    def __str__(self):\n        return (\"The season string is not valid. It must be follow the \"\n                \"following format: &lt;yyyy-mm&gt; where &lt;yyyy&gt; is the year\"\n                \" and &lt;mm&gt; is the month.\")\n</code></pre>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.InvalidTimeFormat","title":"<code>InvalidTimeFormat</code>","text":"<p>             Bases: <code>PyClasherException</code></p> <p>Exception that is raised if the provided time format is not recognized by the API.</p> <p>Attributes:</p> Name Type Description <code>value</code> <code>str</code> <p>value string of the invalid time</p> <code>time_format</code> <code>str</code> <p>format of a valid time string</p> Source code in <code>pyclasher/exceptions.py</code> <pre><code>class InvalidTimeFormat(PyClasherException):\n\"\"\"\n    Exception that is raised if the provided time format is not recognized by\n    the API.\n\n    Attributes:\n        value (str):        value string of the invalid time\n        time_format (str):  format of a valid time string\n    \"\"\"\n\n    def __init__(self, value, time_format):\n\"\"\"\n        Args:\n            value (str):        value string of the invalid time\n            time_format (str):  format of a valid time string\n        \"\"\"\n        self.value = value\n        self.time_format = time_format\n        super().__init__()\n        return\n\n    def __str__(self):\n        return (f\"The time {self.value} does not match the format \"\n                f\"'{self.time_format}'.\")\n</code></pre>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.InvalidTimeFormat.__init__","title":"<code>__init__(value, time_format)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>value string of the invalid time</p> required <code>time_format</code> <code>str</code> <p>format of a valid time string</p> required Source code in <code>pyclasher/exceptions.py</code> <pre><code>def __init__(self, value, time_format):\n\"\"\"\n    Args:\n        value (str):        value string of the invalid time\n        time_format (str):  format of a valid time string\n    \"\"\"\n    self.value = value\n    self.time_format = time_format\n    super().__init__()\n    return\n</code></pre>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.InvalidType","title":"<code>InvalidType</code>","text":"<p>             Bases: <code>PyClasherException</code></p> <p>Exception that is raised if a type is incorrect (similar to <code>TypeError</code>)</p> <p>Attributes:</p> Name Type Description <code>element</code> <code>Any</code> <p>the element whose type is not correct</p> <code>types</code> <code>type, tuple[type, ...</code> <p>correct type or types</p> Source code in <code>pyclasher/exceptions.py</code> <pre><code>class InvalidType(PyClasherException):\n\"\"\"\n    Exception that is raised if a type is incorrect (similar to `TypeError`)\n\n    Attributes:\n        element (Any):                  the element whose type is not correct\n        types (type, tuple[type, ...):  correct type or types\n    \"\"\"\n\n    def __init__(self, element, allowed_types):\n\"\"\"\n        Args:\n            element (Any):                          the element whose type is\n                                                    not correct\n            allowed_types (type, tuple[type, ...):  correct type or types\n        \"\"\"\n        super().__init__()\n        self.element = element\n        self.types = allowed_types\n        return\n\n    def __str__(self):\n        return (f\"{self.element} is of invalid type, allowed types are \"\n                f\"{self.types}.\")\n</code></pre>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.InvalidType.__init__","title":"<code>__init__(element, allowed_types)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>element</code> <code>Any</code> <p>the element whose type is                                     not correct</p> required <code>allowed_types</code> <code>type, tuple[type, ...</code> <p>correct type or types</p> required Source code in <code>pyclasher/exceptions.py</code> <pre><code>def __init__(self, element, allowed_types):\n\"\"\"\n    Args:\n        element (Any):                          the element whose type is\n                                                not correct\n        allowed_types (type, tuple[type, ...):  correct type or types\n    \"\"\"\n    super().__init__()\n    self.element = element\n    self.types = allowed_types\n    return\n</code></pre>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.LoginNotDone","title":"<code>LoginNotDone</code>","text":"<p>             Bases: <code>PyClasherException</code></p> <p>Exception that is raised of raised if the login is not done but tokens were tried to retrieve. (similar to <code>RequestNotDone</code>)</p> Source code in <code>pyclasher/exceptions.py</code> <pre><code>class LoginNotDone(PyClasherException):\n\"\"\"\n    Exception that is raised of raised if the login is not done but tokens\n    were tried to retrieve. (similar to ``RequestNotDone``)\n    \"\"\"\n\n    def __str__(self):\n        return \"The login was not done. You need to login first.\"\n</code></pre>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.Maintenance","title":"<code>Maintenance</code>","text":"<p>             Bases: <code>ApiException</code></p> <p>Service is temporarily unavailable because of maintenance.</p> Source code in <code>pyclasher/exceptions.py</code> <pre><code>class Maintenance(ApiException):\n\"\"\"\n    Service is temporarily unavailable because of maintenance.\n    \"\"\"\n\n    def __init__(self, client_error=None):\n\"\"\"\n        Args:\n            client_error (ClientError): optional ``ClientError`` information\n                                        that is provided by the request\n        \"\"\"\n        super().__init__(503, client_error)\n        return\n\n    def __str__(self):\n        return \"Service is temporarily unavailable because of maintenance.\"\n</code></pre>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.Maintenance.__init__","title":"<code>__init__(client_error=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client_error</code> <code>ClientError</code> <p>optional <code>ClientError</code> information                         that is provided by the request</p> <code>None</code> Source code in <code>pyclasher/exceptions.py</code> <pre><code>def __init__(self, client_error=None):\n\"\"\"\n    Args:\n        client_error (ClientError): optional ``ClientError`` information\n                                    that is provided by the request\n    \"\"\"\n    super().__init__(503, client_error)\n    return\n</code></pre>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.Missing","title":"<code>Missing</code>","text":"<p>Class of the <code>MISSING</code> object</p> Notes <p>This class always returns itself. One time received in a response there is no way back to an object different from <code>MISSING</code>.</p> <p>Attributes:</p> Name Type Description <code>return_string</code> <code>str</code> <p>the string that is returned using                     <code>str(MISSING)</code></p> Source code in <code>pyclasher/exceptions.py</code> <pre><code>class Missing:\n\"\"\"\n    Class of the ``MISSING`` object\n\n    Notes:\n        This class always returns itself. One time received in a response there\n        is no way back to an object different from ``MISSING``.\n\n    Attributes:\n        return_string (str):    the string that is returned using\n                                ``str(MISSING)``\n    \"\"\"\n\n    return_string = \"MISSING\"\n\n    def __call__(self, *args, **kwargs):\n        return self\n\n    def __getitem__(self, item):\n        return self\n\n    def __getattr__(self, item):\n        return self\n\n    def __add__(self, other):\n        if isinstance(other, Missing):\n            return 0\n        return other\n\n    def __str__(self):\n        return self.return_string\n\n    def __repr__(self):\n        return \"Missing()\"\n</code></pre>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.NoClient","title":"<code>NoClient</code>","text":"<p>             Bases: <code>PyClasherException</code></p> <p>Exception that is raised if a request was started but there is no client that can execute the request.</p> Source code in <code>pyclasher/exceptions.py</code> <pre><code>class NoClient(PyClasherException):\n\"\"\"\n    Exception that is raised if a request was started but there is no client\n    that can execute the request.\n    \"\"\"\n\n    def __str__(self):\n        return \"No client has been initialised.\"\n</code></pre>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.NoneToken","title":"<code>NoneToken</code>","text":"<p>             Bases: <code>PyClasherException</code></p> <p>Exception that is raised if a client is started without any tokens.</p> Source code in <code>pyclasher/exceptions.py</code> <pre><code>class NoneToken(PyClasherException):\n\"\"\"\n    Exception that is raised if a client is started without any tokens.\n    \"\"\"\n\n    def __str__(self):\n        return (\"The token must be passed to the client. \"\n                \"You can do this in the initialisation process\"\n                \" or pass the tokens to the start function.\")\n</code></pre>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.NotFound","title":"<code>NotFound</code>","text":"<p>             Bases: <code>ApiException</code></p> <p>Resource was not found.</p> Source code in <code>pyclasher/exceptions.py</code> <pre><code>class NotFound(ApiException):\n\"\"\"\n    Resource was not found.\n    \"\"\"\n\n    def __init__(self, client_error=None):\n\"\"\"\n        Args:\n            client_error (ClientError): optional ``ClientError`` information\n                                        that is provided by the request\n        \"\"\"\n        super().__init__(404, client_error)\n        return\n\n    def __str__(self):\n        return \"Resource was not found.\"\n</code></pre>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.NotFound.__init__","title":"<code>__init__(client_error=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client_error</code> <code>ClientError</code> <p>optional <code>ClientError</code> information                         that is provided by the request</p> <code>None</code> Source code in <code>pyclasher/exceptions.py</code> <pre><code>def __init__(self, client_error=None):\n\"\"\"\n    Args:\n        client_error (ClientError): optional ``ClientError`` information\n                                    that is provided by the request\n    \"\"\"\n    super().__init__(404, client_error)\n    return\n</code></pre>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.PyClasherException","title":"<code>PyClasherException</code>","text":"<p>             Bases: <code>Exception</code></p> <p>Exception class that is subclassed by every exception to the <code>pyclasher</code> package</p> Source code in <code>pyclasher/exceptions.py</code> <pre><code>class PyClasherException(Exception):\n\"\"\"\n    Exception class that is subclassed by every exception to the ``pyclasher``\n    package\n    \"\"\"\n    pass\n</code></pre>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.RequestNotDone","title":"<code>RequestNotDone</code>","text":"<p>             Bases: <code>PyClasherException</code></p> <p>Exception that is raised if a request attribute, property, ... was accessed but could not be loaded because the request was not done.</p> Source code in <code>pyclasher/exceptions.py</code> <pre><code>class RequestNotDone(PyClasherException):\n\"\"\"\n    Exception that is raised if a request attribute, property, ... was\n    accessed but could not be loaded because the request was not done.\n    \"\"\"\n\n    def __str__(self):\n        return \"The request was not done.\"\n</code></pre>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.RequestTimeout","title":"<code>RequestTimeout</code>","text":"<p>             Bases: <code>PyClasherException</code></p> <p>Exception that is raised if a request takes longer than allowed.</p> <p>Attributes:</p> Name Type Description <code>allowed_time</code> <code>float</code> <p>maximal time a request is allowed to take</p> Source code in <code>pyclasher/exceptions.py</code> <pre><code>class RequestTimeout(PyClasherException):\n\"\"\"\n    Exception that is raised if a request takes longer than allowed.\n\n    Attributes:\n        allowed_time (float):   maximal time a request is allowed to take\n    \"\"\"\n\n    def __init__(self, allowed_time):\n\"\"\"\n        Args:\n            allowed_time (float):   maximal time a request is allowed to take\n        \"\"\"\n        self.allowed_time = allowed_time\n        super().__init__()\n        return\n\n    def __str__(self):\n        return (f\"The request took longer than {self.allowed_time}s and was \"\n                f\"cancelled.\")\n</code></pre>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.RequestTimeout.__init__","title":"<code>__init__(allowed_time)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>allowed_time</code> <code>float</code> <p>maximal time a request is allowed to take</p> required Source code in <code>pyclasher/exceptions.py</code> <pre><code>def __init__(self, allowed_time):\n\"\"\"\n    Args:\n        allowed_time (float):   maximal time a request is allowed to take\n    \"\"\"\n    self.allowed_time = allowed_time\n    super().__init__()\n    return\n</code></pre>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.Throttled","title":"<code>Throttled</code>","text":"<p>             Bases: <code>ApiException</code></p> <p>Request was throttled, because amount of requests was above the threshold defined for the used API token.</p> Source code in <code>pyclasher/exceptions.py</code> <pre><code>class Throttled(ApiException):\n\"\"\"\n    Request was throttled, because amount of requests was above the threshold\n    defined for the used API token.\n    \"\"\"\n\n    def __init__(self, client_error=None):\n\"\"\"\n        Args:\n            client_error (ClientError): optional ``ClientError`` information\n                                        that is provided by the request\n        \"\"\"\n        super().__init__(429, client_error)\n        return\n\n    def __str__(self):\n        return (\"Request was throttled, because amount of requests was above \"\n                \"the threshold defined for the used API token.\")\n</code></pre>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.Throttled.__init__","title":"<code>__init__(client_error=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client_error</code> <code>ClientError</code> <p>optional <code>ClientError</code> information                         that is provided by the request</p> <code>None</code> Source code in <code>pyclasher/exceptions.py</code> <pre><code>def __init__(self, client_error=None):\n\"\"\"\n    Args:\n        client_error (ClientError): optional ``ClientError`` information\n                                    that is provided by the request\n    \"\"\"\n    super().__init__(429, client_error)\n    return\n</code></pre>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.UnknownApiException","title":"<code>UnknownApiException</code>","text":"<p>             Bases: <code>ApiException</code></p> <p>Unknown error happened when handling the request.</p> Source code in <code>pyclasher/exceptions.py</code> <pre><code>class UnknownApiException(ApiException):\n\"\"\"\n    Unknown error happened when handling the request.\n    \"\"\"\n\n    def __init__(self, client_error=None):\n\"\"\"\n        Args:\n            client_error (ClientError): optional ``ClientError`` information\n                                        that is provided by the request\n        \"\"\"\n        super().__init__(500, client_error)\n        return\n\n    def __str__(self):\n        return \"Unknown error happened when handling the request.\"\n</code></pre>"},{"location":"API%20Reference/exceptions/#pyclasher.exceptions.UnknownApiException.__init__","title":"<code>__init__(client_error=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client_error</code> <code>ClientError</code> <p>optional <code>ClientError</code> information                         that is provided by the request</p> <code>None</code> Source code in <code>pyclasher/exceptions.py</code> <pre><code>def __init__(self, client_error=None):\n\"\"\"\n    Args:\n        client_error (ClientError): optional ``ClientError`` information\n                                    that is provided by the request\n    \"\"\"\n    super().__init__(500, client_error)\n    return\n</code></pre>"},{"location":"API%20Reference/api/bulk_requests/abc/","title":"Abc","text":""},{"location":"API%20Reference/api/bulk_requests/abc/#pyclasher.api.bulk_requests.abc.BulkRequestModel","title":"<code>BulkRequestModel</code>","text":"<p>bulk request base model</p> <p>can be inherited from</p> <p>:cvar   _request_model:     the request model that is used to make the bulk request :type   _request_model:     Any :cvar   _requests:          list of requests :type   _requests:          list</p> Source code in <code>pyclasher/api/bulk_requests/abc.py</code> <pre><code>class BulkRequestModel:\n    _request_model = ...\n    _requests = None\n\n    @property\n    def request_model(self):\n        return self._request_model\n\n    @property\n    def requests(self):\n        return self._requests\n\n    def __get_properties(self):\n        return {\n            name: prop.__get__(self)\n            for name, prop in vars(self.__class__).items()\n            if isinstance(prop, property)\n        }\n\n    async def request(self, client_id=None):\n        self._tasks = [request.request(client_id) for request in self._requests]\n        await gather(*self._tasks)\n        return self\n\n    def __len__(self):\n        return len(self._requests)\n\n    def __getitem__(self, item):\n        self._requests[0].to_dict()         # test if the `to_dict()` method raises `RequestNotDone`\n        if isinstance(item, int):\n            return self._requests[item]\n        if isinstance(item, slice):\n            return (self._requests[i]\n                    for i in range(*item.indices(len(self._requests))))\n        raise NotImplementedError\n\n    def __iter__(self):\n        self._iter = iter(self._requests)\n        return self\n\n    def __next__(self):\n        return next(self._iter)\n\n    def __str__(self):\n        return f\"{self.__class__.__name__}()\"\n\n    def __repr__(self):\n        props = ', '.join(\n            ('='.join((key, str(value)))\n             for key, value in self.__get_properties().items())\n        )\n        return f\"{self.__class__.__name__}({props})\"\n</code></pre>"},{"location":"API%20Reference/api/bulk_requests/abc/#pyclasher.api.bulk_requests.abc.BulkRequestModel.request_model","title":"<code>request_model: Any</code>  <code>property</code>","text":"<p>property of the request model</p> <p>:return:    the specified request model :rtype:     Any</p>"},{"location":"API%20Reference/api/bulk_requests/abc/#pyclasher.api.bulk_requests.abc.BulkRequestModel.requests","title":"<code>requests: list</code>  <code>property</code>","text":"<p>property of the requests</p> <p>:return:    the list of the requests or None if the requests are not done yet :rtype:     list</p>"},{"location":"API%20Reference/api/bulk_requests/abc/#pyclasher.api.bulk_requests.abc.BulkRequestModel.__get_properties","title":"<code>__get_properties()</code>","text":"<p>private method that creates a dictionary of the properties</p> <p>key:    name of the property</p> <p>value:  value of the property</p> <p>:return:    a dictionary of the properties :rtype:     dict</p> Source code in <code>pyclasher/api/bulk_requests/abc.py</code> <pre><code>def __get_properties(self):\n    return {\n        name: prop.__get__(self)\n        for name, prop in vars(self.__class__).items()\n        if isinstance(prop, property)\n    }\n</code></pre>"},{"location":"API%20Reference/api/bulk_requests/abc/#pyclasher.api.bulk_requests.abc.BulkRequestModel.request","title":"<code>request(client_id=None)</code>  <code>async</code>","text":"<p>asynchronous method that executes the requests</p> <p>:return:    the instance of the bulk request model :rtype:     BulkRequestModel</p> Source code in <code>pyclasher/api/bulk_requests/abc.py</code> <pre><code>async def request(self, client_id=None):\n    self._tasks = [request.request(client_id) for request in self._requests]\n    await gather(*self._tasks)\n    return self\n</code></pre>"},{"location":"API%20Reference/api/bulk_requests/b_player/","title":"B player","text":""},{"location":"API%20Reference/api/bulk_requests/b_player/#pyclasher.api.bulk_requests.b_player.PlayerBulkRequest","title":"<code>PlayerBulkRequest</code>","text":"<p>             Bases: <code>BulkRequestModel</code></p> <p>class for requesting multiple players at once in parallel</p> Source code in <code>pyclasher/api/bulk_requests/b_player.py</code> <pre><code>class PlayerBulkRequest(BulkRequestModel):\n    _request_model = PlayerRequest\n\n    def __init__(self, tags):\n        self._tags = tags\n        self._requests = list(self._request_model(tag) for tag in self.tags)\n        return\n\n    @property\n    def tags(self):\n        return self._tags\n\n    @classmethod\n    async def from_clan(cls, clan, client_id=None):\n        if isinstance(clan, Clan) and clan.member_list is not MISSING:\n            members = clan.member_list\n        elif isinstance(clan, BaseClan):\n            members = await ClanMembersRequest(clan.tag).request(client_id)\n        else:\n            members = await ClanMembersRequest(clan).request(client_id)\n        return cls.from_member_list(members)\n\n    @classmethod\n    def from_member_list(cls, member_list):\n        return cls((member.tag for member in member_list))\n\n    @property\n    def average_attack_wins(self):\n        return sum((p.attack_wins for p in self)) / len(self)\n\n    @property\n    def average_defense_wins(self):\n        return sum((p.defense_wins for p in self)) / len(self)\n\n    @property\n    def average_town_hall_level(self):\n        return sum((p.town_hall_level for p in self)) / len(self)\n\n    @property\n    def average_versus_battle_wins(self):\n        return sum((p.versus_battle_wins for p in self)) / len(self)\n\n    @property\n    def average_exp_level(self):\n        return sum((p.exp_level for p in self)) / len(self)\n\n    @property\n    def average_trophies(self):\n        return sum((p.trophies for p in self)) / len(self)\n\n    @property\n    def average_donations(self):\n        return sum((p.donations for p in self)) / len(self)\n\n    @property\n    def average_donations_received(self):\n        return sum((p.donations_received for p in self)) / len(self)\n\n    @property\n    def average_builder_hall_level(self):\n        return sum((p.builder_hall_level for p in self)) / len(self)\n\n    @property\n    def average_builder_base_trophies(self):\n        return sum((p.builder_base_trophies for p in self)) / len(self)\n\n    @property\n    def average_best_builder_base_trophies(self):\n        return sum((p.best_builder_base_trophies for p in self)) / len(self)\n\n    @property\n    def average_war_stars(self):\n        return sum((p.war_stars for p in self)) / len(self)\n\n    @property\n    def average_clan_capital_contributions(self):\n        return sum((p.clan_capital_contributions for p in self)) / len(self)\n</code></pre>"},{"location":"API%20Reference/api/bulk_requests/b_player/#pyclasher.api.bulk_requests.b_player.PlayerBulkRequest.tags","title":"<code>tags: Iterable</code>  <code>property</code>","text":"<p>tags used for the requests</p> <p>:rtype: Iterable</p>"},{"location":"API%20Reference/api/bulk_requests/b_player/#pyclasher.api.bulk_requests.b_player.PlayerBulkRequest.__getitem__","title":"<code>__getitem__(item)</code>","text":"<p>getter for a player of the bulk request</p> <p>:param item:    (int) the index of the player :type item:     int</p>"},{"location":"API%20Reference/api/bulk_requests/b_player/#pyclasher.api.bulk_requests.b_player.PlayerBulkRequest.__init__","title":"<code>__init__(tags)</code>","text":"<p>initialisation of the player bulk request</p> <p>:param tags:    Iterable of tags :type tags:     Iterable</p> Source code in <code>pyclasher/api/bulk_requests/b_player.py</code> <pre><code>def __init__(self, tags):\n    self._tags = tags\n    self._requests = list(self._request_model(tag) for tag in self.tags)\n    return\n</code></pre>"},{"location":"API%20Reference/api/bulk_requests/b_player/#pyclasher.api.bulk_requests.b_player.PlayerBulkRequest.__next__","title":"<code>__next__()</code>","text":"<p>returns the next player of the bulk request if an iterator is used</p>"},{"location":"API%20Reference/api/bulk_requests/b_player/#pyclasher.api.bulk_requests.b_player.PlayerBulkRequest.from_clan","title":"<code>from_clan(clan, client_id=None)</code>  <code>async</code> <code>classmethod</code>","text":"<p>class method to create an instance using a clan or a clan tag</p> <p>:param cls:     PlayerBulkRequest :param clan:    clan or clan tag :rtype:         PlayerBulkRequest</p> Source code in <code>pyclasher/api/bulk_requests/b_player.py</code> <pre><code>@classmethod\nasync def from_clan(cls, clan, client_id=None):\n    if isinstance(clan, Clan) and clan.member_list is not MISSING:\n        members = clan.member_list\n    elif isinstance(clan, BaseClan):\n        members = await ClanMembersRequest(clan.tag).request(client_id)\n    else:\n        members = await ClanMembersRequest(clan).request(client_id)\n    return cls.from_member_list(members)\n</code></pre>"},{"location":"API%20Reference/api/bulk_requests/b_player/#pyclasher.api.bulk_requests.b_player.PlayerBulkRequest.from_member_list","title":"<code>from_member_list(member_list)</code>  <code>classmethod</code>","text":"<p>class method to create an instance using a clan member list</p> <p>:param cls:         PlayerBulkRequest :param member_list: a member list :type member_list:  ClanMemberList, ClanWarMemberList, ClanWarLeagueClanMemberList, ClanCapitalRaidSeasonMemberList, ClanMembersRequest :rtype:             PlayerBulkRequest</p> Source code in <code>pyclasher/api/bulk_requests/b_player.py</code> <pre><code>@classmethod\ndef from_member_list(cls, member_list):\n    return cls((member.tag for member in member_list))\n</code></pre>"},{"location":"API%20Reference/api/models/abc/","title":"Abc","text":"<p>abstract base classes for the API models</p>"},{"location":"API%20Reference/api/models/abc/#pyclasher.api.models.abc.BaseModel","title":"<code>BaseModel</code>","text":"<p>             Bases: <code>ABC</code></p> <p>base model this model is a base for all other ClashOfClans API response models can be inherited from</p> Source code in <code>pyclasher/api/models/abc.py</code> <pre><code>class BaseModel(ABC):\n    def __new__(cls, data=None):\n        if data is MISSING:\n            return MISSING\n        return super().__new__(cls)\n\n    def __init__(self, data=None):\n        if data is not None:\n            self._data = data\n        return\n\n    def to_dict(self):\n        return self._data\n\n    def _get_properties(self):\n        if isinstance(self._data, dict):\n            return {\n                name: prop.__get__(self)\n                for name, prop in vars(type(self)).items()\n                if isinstance(prop, property)\n            }\n        return self._data\n\n    def _get_data(self, item):\n        if self._data is None:\n            return None\n        if self._data is MISSING:\n            raise RequestNotDone\n        if item in self._data:\n            return self._data[item]\n        else:\n            return MISSING\n\n    def __str__(self):\n        if self._data is MISSING:\n            return f\"{self.__class__.__name__}(RequestNotDone)\"\n        return f\"{self.__class__.__name__}()\"\n\n    def __repr__(self):\n        props = ', '.join(\n            ('='.join((key, str(value)))\n             for key, value in self._get_properties().items())\n        )\n        return f\"{self.__class__.__name__}({props})\"\n</code></pre>"},{"location":"API%20Reference/api/models/abc/#pyclasher.api.models.abc.BaseModel.__init__","title":"<code>__init__(data=None)</code>","text":"<p>initialisation of the base model</p> <p>:param  data:   the data dictionary, None or MISSING :return:        None :rtype:         None</p> Source code in <code>pyclasher/api/models/abc.py</code> <pre><code>def __init__(self, data=None):\n    if data is not None:\n        self._data = data\n    return\n</code></pre>"},{"location":"API%20Reference/api/models/abc/#pyclasher.api.models.abc.BaseModel.to_dict","title":"<code>to_dict()</code>","text":"<p>method that returns the response as a dict</p> <p>:return:    response as a dict :rtype:     dict | None | Missing</p> Source code in <code>pyclasher/api/models/abc.py</code> <pre><code>def to_dict(self):\n    return self._data\n</code></pre>"},{"location":"API%20Reference/api/models/abc/#pyclasher.api.models.abc.IterBaseModel","title":"<code>IterBaseModel</code>","text":"<p>             Bases: <code>ABC</code></p> <p>iterative base model this model is an iterative base model for the ClashOfClans API response models can be inherited from</p> <p>:ivar   _len:              length of the iterative data :type   _len:              int :ivar   _data:             a list of dicts containing the data :type   _data:             list[dict] | None</p> Source code in <code>pyclasher/api/models/abc.py</code> <pre><code>class IterBaseModel(ABC):\n    _iter_rtype: Any\n\n    def __new__(cls, data):\n        if data is MISSING:\n            return MISSING\n        return super().__new__(cls)\n\n    def __init__(self, data):\n        self._data = data\n        self._len = len(self._data) if self._data is not None else None\n        return\n\n    def to_dict_list(self):\n        return self._data\n\n    def __len__(self):\n        if self._len is None and self._data is not None:\n            self._len = len(self._data)\n        return self._len\n\n    def __getitem__(self, item):\n        if self._data is MISSING:\n            raise RequestNotDone\n        if self._data is None:\n            return None\n        if isinstance(item, int):\n            return self._iter_rtype(self._data[item])\n        if isinstance(item, slice):\n            return (self._iter_rtype(self._data[i])\n                    for i in range(*item.indices(len(self._data))))\n        raise NotImplementedError(f\"there is no implementation for type \"\n                                  f\"{item.__class__.__name__} in \"\n                                  f\"{self.__class__.__name__}.__getitem__()\")\n\n    def __iter__(self):\n        self._iter = iter(self._data)\n        return self\n\n    def __next__(self):\n        return self._iter_rtype(next(self._iter))\n\n    def __contains__(self, item):\n        if isinstance(item, (self._iter_rtype, str)):\n            for item_ in self:\n                if item_ == item:\n                    return True\n            return False\n        return NotImplemented\n\n    def __str__(self):\n        return f\"{self.__class__.__name__}()\"\n\n    def __repr__(self):\n        return (f\"{self.__class__.__name__}(len={self._len}, type=\"\n                f\"{self._iter_rtype.__name__}, {list(self)})\")\n</code></pre>"},{"location":"API%20Reference/api/models/abc/#pyclasher.api.models.abc.IterBaseModel.__init__","title":"<code>__init__(data)</code>","text":"<p>initialisation of the iterative base model</p> <p>:param data:    a list of dicts containing the data :type data:     list[dict] | None :return:        None :rtype:         None</p> Source code in <code>pyclasher/api/models/abc.py</code> <pre><code>def __init__(self, data):\n    self._data = data\n    self._len = len(self._data) if self._data is not None else None\n    return\n</code></pre>"},{"location":"API%20Reference/api/models/abc/#pyclasher.api.models.abc.IterBaseModel.to_dict_list","title":"<code>to_dict_list()</code>","text":"<p>method that returns the response as a list of dicts</p> <p>:return:    response as a list of dicts :rtype:     list[dict] | None | Missing</p> Source code in <code>pyclasher/api/models/abc.py</code> <pre><code>def to_dict_list(self):\n    return self._data\n</code></pre>"},{"location":"API%20Reference/api/models/base_models/","title":"Base models","text":"<p>base models for this API wrapper client</p>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.After","title":"<code>After</code>","text":"<p>Holds the after string</p> Source code in <code>pyclasher/api/models/base_models.py</code> <pre><code>class After:\n\"\"\"\n    Holds the after string\n    \"\"\"\n\n    def __init__(self, after):\n        self._data = after\n        return\n\n    @property\n    def value(self):\n        return self._data\n\n    def __repr__(self):\n        return f\"After(value={self.value})\"\n\n    def __str__(self):\n        return f\"After({self.value})\"\n</code></pre>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.After.value","title":"<code>value: str</code>  <code>property</code>","text":"<p>value of the after model</p> <p>:return:    the value of the after model :rtype:     str</p>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.After.__init__","title":"<code>__init__(after)</code>","text":"<p>initialisation of the after model</p> <p>:return:    None :rtype:     None</p> Source code in <code>pyclasher/api/models/base_models.py</code> <pre><code>def __init__(self, after):\n    self._data = after\n    return\n</code></pre>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.BadgeUrl","title":"<code>BadgeUrl</code>","text":"<p>             Bases: <code>ImageUrl</code></p> <p>class to hold an url for one badge</p> Source code in <code>pyclasher/api/models/base_models.py</code> <pre><code>class BadgeUrl(ImageUrl):\n    pass\n</code></pre>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.BadgeUrls","title":"<code>BadgeUrls</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>class to hold data of a clan badge</p> Source code in <code>pyclasher/api/models/base_models.py</code> <pre><code>class BadgeUrls(BaseModel):\n    @property\n    def small(self):\n        return BadgeUrl(self._get_data('small'))\n\n    @property\n    def medium(self):\n        return BadgeUrl(self._get_data('medium'))\n\n    @property\n    def large(self):\n        return BadgeUrl(self._get_data('large'))\n\n    def __str__(self):\n        return f\"{self.__class__.__name__}({self.medium})\"\n</code></pre>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.BadgeUrls.large","title":"<code>large: BadgeUrl</code>  <code>property</code>","text":"<p>large badge URL</p> <p>:return:    the large badge URL :rtype:     BadgeUrl</p>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.BadgeUrls.medium","title":"<code>medium: BadgeUrl</code>  <code>property</code>","text":"<p>medium badge URL</p> <p>:return:    the medium badge URL :rtype:     BadgeUrl</p>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.BadgeUrls.small","title":"<code>small: BadgeUrl</code>  <code>property</code>","text":"<p>small badge URL</p> <p>:return:    the small badge URL :rtype:     BadgeUrl</p>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.BaseClan","title":"<code>BaseClan</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>base clan model</p> Source code in <code>pyclasher/api/models/base_models.py</code> <pre><code>class BaseClan(BaseModel):\n    @property\n    def tag(self):\n        return self._get_data('tag')\n\n    @property\n    def name(self):\n        return self._get_data('name')\n\n    @property\n    def badge_urls(self):\n        return BadgeUrls(self._get_data('badgeUrls'))\n\n    def __str__(self):\n        return f\"{self.__class__. __name__}({self.tag})\"\n</code></pre>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.BaseClan.badge_urls","title":"<code>badge_urls: BadgeUrls</code>  <code>property</code>","text":"<p>clan badge URLs</p> <p>:return:    the clan's badge URLs :rtype:     BadgeUrls</p>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.BaseClan.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>clan name</p> <p>:return:    the clan's name :rtype:     str</p>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.BaseClan.tag","title":"<code>tag: str</code>  <code>property</code>","text":"<p>clan tag</p> <p>:return:    the clan's tag :rtype:     str</p>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.BaseClanMember","title":"<code>BaseClanMember</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>base clan member model</p> Source code in <code>pyclasher/api/models/base_models.py</code> <pre><code>class BaseClanMember(BaseModel):\n    @property\n    def tag(self):\n        return self._get_data('tag')\n\n    @property\n    def name(self):\n        return self._get_data('name')\n\n    def __str__(self):\n        return f\"{self.__class__.__name__}({self.tag})\"\n</code></pre>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.BaseClanMember.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>clan member's name</p> <p>:return:    the clan member's name :rtype:     str</p>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.BaseClanMember.tag","title":"<code>tag: str</code>  <code>property</code>","text":"<p>clan member's tag</p> <p>:return:    the clan member's tag :rtype:     str</p>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.BaseLeague","title":"<code>BaseLeague</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>base league model</p> Source code in <code>pyclasher/api/models/base_models.py</code> <pre><code>class BaseLeague(BaseModel):\n    @property\n    def id(self):\n        return self._get_data('id')\n\n    @property\n    def name(self):\n        return self._get_data('name')\n\n    def __str__(self):\n        return f\"{self.__class__.__name__}({self.id})\"\n</code></pre>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.BaseLeague.id","title":"<code>id: int</code>  <code>property</code>","text":"<p>league id</p> <p>:return:    the league id :rtype:     int</p>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.BaseLeague.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>league name</p> <p>:return:    the league name :rtype:     str</p>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.Before","title":"<code>Before</code>","text":"<p>before model</p> Source code in <code>pyclasher/api/models/base_models.py</code> <pre><code>class Before:\n    def __init__(self, before):\n        self._data = before\n        return\n\n    @property\n    def value(self):\n        return self._data\n\n    def __repr__(self):\n        return \"Before()\"\n\n    def __str__(self):\n        return f\"Before(value={self.value})\"\n</code></pre>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.Before.value","title":"<code>value: str</code>  <code>property</code>","text":"<p>value of the before model</p> <p>:return:    the value of the before model :rtype:     str</p>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.Before.__init__","title":"<code>__init__(before)</code>","text":"<p>initialisation of the before model</p> <p>:return:    None :rtype:     None</p> Source code in <code>pyclasher/api/models/base_models.py</code> <pre><code>def __init__(self, before):\n    self._data = before\n    return\n</code></pre>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.Cursor","title":"<code>Cursor</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>cursor model</p> Source code in <code>pyclasher/api/models/base_models.py</code> <pre><code>class Cursor(BaseModel):\n    @property\n    def after(self):\n        return After(self._get_data('after'))\n\n    @property\n    def before(self):\n        return Before(self._get_data('before'))\n</code></pre>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.IconUrl","title":"<code>IconUrl</code>","text":"<p>             Bases: <code>ImageUrl</code></p> <p>Holds an icon url</p> Source code in <code>pyclasher/api/models/base_models.py</code> <pre><code>class IconUrl(ImageUrl):\n    pass\n</code></pre>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.IconUrls","title":"<code>IconUrls</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>icon URLs model that contains 3 icon URLs</p> Source code in <code>pyclasher/api/models/base_models.py</code> <pre><code>class IconUrls(BaseModel):\n    def __init__(self, data: dict):\n        super().__init__(data)\n        return\n\n    @property\n    def tiny(self):\n        return IconUrl(self._get_data('tiny'))\n\n    @property\n    def small(self):\n        return IconUrl(self._get_data('small'))\n\n    @property\n    def medium(self):\n        return IconUrl(self._get_data('medium'))\n</code></pre>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.IconUrls.medium","title":"<code>medium: IconUrl | MISSING</code>  <code>property</code>","text":"<p>medium icon URL</p> <p>:return:    the medium icon URL or MISSING if the medium icon URL is not supported for a model :rtype:     str | Missing</p>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.IconUrls.small","title":"<code>small: IconUrl</code>  <code>property</code>","text":"<p>small icon URL</p> <p>:return:    the small icon URL :rtype:     str</p>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.IconUrls.tiny","title":"<code>tiny: Missing | IconUrl</code>  <code>property</code>","text":"<p>tiny icon URL</p> <p>:return:    the tiny icon URL or MISSING if the tiny icon URL is not supported for a model :rtype:     Missing | IconUrl</p>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.ImageUrl","title":"<code>ImageUrl</code>","text":"<p>image URL model</p> <p>:ivar   __url:  URL of the image :type   __url:  str</p> Source code in <code>pyclasher/api/models/base_models.py</code> <pre><code>class ImageUrl:\n    def __init__(self, url):\n        self.__url = url\n        return\n\n    async def get_image(self, logger=MISSING) -&gt; bytes:\n        async with ClientSession() as session:\n            async with session.get(self.url) as request:\n                if request.status == 200:\n                    logger.info(f\"Successfully downloaded {self.url}\")\n                    return await request.read()\n\n    async def save_image(self, filename, logger=MISSING):\n        image = await self.get_image(logger)\n        with open(filename, \"wb\") as file:\n            file.write(image)\n\n    @property\n    def url(self):\n        return self.__url\n\n    def __repr__(self):\n        return f\"{self.__class__.__name__}(url={self.__url})\"\n\n    def __str__(self):\n        return f\"{self.__class__.__name__}({self.__url})\"\n</code></pre>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.ImageUrl.url","title":"<code>url: str</code>  <code>property</code>","text":"<p>URL of the image</p> <p>:return:    the URL of the image :rtype:     str</p>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.ImageUrl.__init__","title":"<code>__init__(url)</code>","text":"<p>initialisation of the image url model</p> Source code in <code>pyclasher/api/models/base_models.py</code> <pre><code>def __init__(self, url):\n    self.__url = url\n    return\n</code></pre>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.ImageUrl.save_image","title":"<code>save_image(filename, logger=MISSING)</code>  <code>async</code>","text":"<p>NOT IMPLEMENTED YET</p> <p>coroutine that retrieves the image of the URL</p> Source code in <code>pyclasher/api/models/base_models.py</code> <pre><code>async def save_image(self, filename, logger=MISSING):\n    image = await self.get_image(logger)\n    with open(filename, \"wb\") as file:\n        file.write(image)\n</code></pre>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.Paging","title":"<code>Paging</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Holds information about the paging of the clan war log</p> Source code in <code>pyclasher/api/models/base_models.py</code> <pre><code>class Paging(BaseModel):\n    @property\n    def cursor(self) -&gt; Cursor:\n        return Cursor(self._get_data('cursors'))\n</code></pre>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.Time","title":"<code>Time</code>","text":"<p>time model</p> <p>:cvar   time_format:    time format of the string class method :type   time_format:    str :ivar   _year:          year of the date and time :type   _year:          int :ivar   _month:         month of the date and time :type   _month:         int :ivar   _day:           day of the date and time :type   _day:           int :ivar   _hour:          hour of the date and time :type   _hour:          int :ivar   _minute:        minute of the date and time :type   _minute:        int :ivar   _second:        second of the date and time :type   _second:        int :ivar   _microsecond:   microsecond of the date and time :type   _microsecond:   int</p> Source code in <code>pyclasher/api/models/base_models.py</code> <pre><code>class Time:\n    time_format = \"%Y%m%dT%H%M%S.%fZ\"\n\n    def __init__(self, year, month, day, hour, minute, second, microsecond):\n        self._year = year\n        self._month = month\n        self._day = day\n        self._hour = hour\n        self._minute = minute\n        self._second = second\n        self._microsecond = microsecond\n        return\n\n    @property\n    def year(self):\n        return self._year\n\n    @property\n    def month(self):\n        return self._month\n\n    @property\n    def day(self):\n        return self._day\n\n    @property\n    def hour(self):\n        return self._hour\n\n    @property\n    def minute(self):\n        return self._minute\n\n    @property\n    def second(self):\n        return self._second\n\n    @property\n    def microsecond(self):\n        return self._microsecond\n\n    @classmethod\n    def from_str(cls, time):\n        try:\n            dt = datetime.strptime(time, cls.time_format)\n        except ValueError:\n            raise InvalidTimeFormat(time, cls.time_format)\n\n        return cls(\n            dt.year, dt.month, dt.day,\n            dt.hour, dt.minute, dt.second, dt.microsecond\n        )\n\n    def __eq__(self, other):\n        if isinstance(other, Time):\n            return (self._year == other._year and self._month == other._month\n                    and self._day == other._day and\n                    self._hour == other._hour and self._minute == other._minute\n                    and self._second == other._second)\n        if isinstance(other, (Time, datetime)):\n            return (self._year == other.year and self._month == other.month\n                    and self._day == other.day and\n                    self._hour == other.hour and self._minute == other.minute\n                    and self._second == other.second)\n        return NotImplemented\n\n    def __ne__(self, other):\n        return not self == other\n\n    def __lt__(self, other):\n        if isinstance(other, (Time, datetime)):\n            if self._year &lt; other.year:\n                return True\n            if self._year == other.year and self._month &lt; other.month:\n                return True\n            if (self._year == other.year and self._month == other.month\n                    and self._day &lt; other.day):\n                return True\n            if (self._year == other.year and self._month == other.month\n                    and self._day == other.day\n                    and self._hour &lt; other.hour):\n                return True\n            if (self._year == other.year and self._month == other.month\n                    and self._day == other.day and self._hour == other.hour\n                    and self._minute &lt; other.minute):\n                return True\n            if (self._year == other.year and self._month == other.month\n                    and self._day == other.day and self._hour == other.hour\n                    and self._minute == other.minute\n                    and self._second &lt; other.second):\n                return True\n            if (self._year == other.year and self._month == other.month\n                    and self._day == other.day and self._hour == other.hour\n                    and self._minute == other.minute\n                    and self._second == other.second\n                    and self._microsecond &lt; other.microsecond):\n                return True\n            return False\n        return NotImplemented\n\n    def __le__(self, other):\n        return self == other or self &lt; other\n\n    def __gt__(self, other):\n        return not self &lt;= other\n\n    def __ge__(self, other):\n        return not self &lt; other\n\n    def __str__(self):\n        return (f\"Time({self._year}.{self._month}.{self._day}:\"\n                f\"{self._hour}.{self._minute}.{self._second}\"\n                f\".{self._microsecond})\")\n\n    def __repr__(self):\n        return (f\"Time(year={self._year}, month={self._month}, day={self._day},\"\n                f\" hour={self._hour}, minute={self._minute}, \"\n                f\"second={self._second}, microsecond={self._microsecond})\")\n\n    def __add__(self, other):\n        if isinstance(other, (Time, datetime)):\n            return Time(self._year + other.year, self._month + other.month,\n                        self._day + other.day, self._hour + other.hour,\n                        self._minute + other.minute,\n                        self._second + other.second,\n                        self._microsecond + other.microsecond)\n        return NotImplemented\n\n    def __sub__(self, other):\n        if isinstance(other, (Time, datetime)):\n            return Time(self._year - other.year, self._month - other.month,\n                        self._day - other.day, self._hour - other.hour,\n                        self._minute - other.minute,\n                        self._second - other.second,\n                        self._microsecond - other.microsecond)\n        return NotImplemented\n</code></pre>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.Time.day","title":"<code>day: int</code>  <code>property</code>","text":"<p>day of the date and time</p> <p>:return:    the day of the date and time :rtype:     int</p>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.Time.hour","title":"<code>hour: int</code>  <code>property</code>","text":"<p>hour of the date and time</p> <p>:return:    the hour of the date and time :rtype:     int</p>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.Time.microsecond","title":"<code>microsecond: int</code>  <code>property</code>","text":"<p>microsecond of the date and time</p> <p>:return:    the microsecond of the date and time :rtype:     int</p>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.Time.minute","title":"<code>minute: int</code>  <code>property</code>","text":"<p>minute of the date and time</p> <p>:return:    the minute of the date and time :rtype:     int</p>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.Time.month","title":"<code>month: int</code>  <code>property</code>","text":"<p>month of the date and time</p> <p>:return:    the month of the date and time :rtype:     int</p>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.Time.second","title":"<code>second: int</code>  <code>property</code>","text":"<p>second of the date and time</p> <p>:return:    the second of the date and time :rtype:     int</p>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.Time.year","title":"<code>year: int</code>  <code>property</code>","text":"<p>year of the date and time</p> <p>:return:    the year of the date and time :rtype:     int</p>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.Time.__init__","title":"<code>__init__(year, month, day, hour, minute, second, microsecond)</code>","text":"<p>initialisation of the time model</p> <p>:param  year:           year of the date and time :type   year:           int :param  month:          month of the date and time :type   month:          int :param  day:            day of the date and time :type   day:            int :param  hour:           hour of the date and time :type   hour:           int :param  minute:         minute of the date and time :type   minute:         int :param  second:         second of the date and time :type   second:         int :param  microsecond:    microsecond of the date and time :type   microsecond:    int</p> Source code in <code>pyclasher/api/models/base_models.py</code> <pre><code>def __init__(self, year, month, day, hour, minute, second, microsecond):\n    self._year = year\n    self._month = month\n    self._day = day\n    self._hour = hour\n    self._minute = minute\n    self._second = second\n    self._microsecond = microsecond\n    return\n</code></pre>"},{"location":"API%20Reference/api/models/base_models/#pyclasher.api.models.base_models.Time.from_str","title":"<code>from_str(time)</code>  <code>classmethod</code>","text":"<p>class method that converts a string with the format yyyymmddThhmmss.000Z</p> <p>:param time:                the time string following the format '%Y%m%dT%H%M%S.%fZ' :type time:                 str :return:                    a Time instance :rtype:                     Time :raise InvalidTimeFormat:   raises InvalidTimeFormat if the time does not match the format '%Y%m%dT%H%M%S.%fZ'</p> Source code in <code>pyclasher/api/models/base_models.py</code> <pre><code>@classmethod\ndef from_str(cls, time):\n    try:\n        dt = datetime.strptime(time, cls.time_format)\n    except ValueError:\n        raise InvalidTimeFormat(time, cls.time_format)\n\n    return cls(\n        dt.year, dt.month, dt.day,\n        dt.hour, dt.minute, dt.second, dt.microsecond\n    )\n</code></pre>"},{"location":"API%20Reference/api/models/clan/","title":"Clan","text":"<p>clan models and sub models</p>"},{"location":"API%20Reference/api/models/clan/#pyclasher.api.models.clan.Clan","title":"<code>Clan</code>","text":"<p>             Bases: <code>BaseClan</code></p> <p>clan model</p> Source code in <code>pyclasher/api/models/clan.py</code> <pre><code>class Clan(BaseClan):\n    @property\n    def war_league(self):\n        return WarLeague(self._get_data('warLeague'))\n\n    @property\n    def capital_league(self):\n        return CapitalLeague(self._get_data('capitalLeague'))\n\n    @property\n    def member_list(self):\n        return ClanMemberList(self._get_data('memberList'))\n\n    @property\n    def required_trophies(self):\n        return self._get_data('requiredTrophies')\n\n    @property\n    def required_builder_base_trophies(self):\n        return self._get_data('requiredBuilderBaseTrophies')\n\n    @property\n    def is_family_friendly(self):\n        return self._get_data('isFamilyFriendly')\n\n    @property\n    def is_war_log_public(self):\n        return self._get_data('isWarLogPublic')\n\n    @property\n    def required_townhall_level(self):\n        return self._get_data('requiredTownhallLevel')\n\n    @property\n    def war_frequency(self):\n        return WarFrequency(self._get_data('warFrequency'))\n\n    @property\n    def clan_level(self):\n        return self._get_data('clanLevel')\n\n    @property\n    def war_win_streak(self):\n        return self._get_data('warWinStreak')\n\n    @property\n    def war_wins(self):\n        return self._get_data('warWins')\n\n    @property\n    def war_ties(self):\n        return self._get_data('warTies')\n\n    @property\n    def war_losses(self):\n        return self._get_data('warLosses')\n\n    @property\n    def total_wars(self):\n        return self.war_wins + self.war_losses + self.war_ties\n\n    @property\n    def clan_points(self):\n        return self._get_data('clanPoints')\n\n    @property\n    def chat_language(self):\n        return Language(self._get_data('chatLanguage'))\n\n    @property\n    def clan_builder_base_points(self):\n        return self._get_data('clanBuilderBasePoints')\n\n    @property\n    def clan_capital_points(self):\n        return self._get_data('clanCapitalPoints')\n\n    @property\n    def labels(self):\n        return LabelList(self._get_data('labels'))\n\n    @property\n    def location(self):\n        return Location(self._get_data('location'))\n\n    @property\n    def type(self):\n        return ClanType(self._get_data('type'))\n\n    @property\n    def members(self):\n        return self._get_data('members')\n\n    @property\n    def description(self):\n        return self._get_data('description')\n\n    @property\n    def clan_capital(self):\n        return ClanCapital(self._get_data('clanCapital'))\n\n    @property\n    def average_exp_level_per_member(self):\n        return self.member_list.average_exp_level\n\n    @property\n    def average_trophies_per_member(self):\n        return self.member_list.average_trophies\n\n    @property\n    def average_builder_base_trophies_per_member(self):\n        return self.member_list.average_builder_base_trophies\n\n    @property\n    def average_donations_per_member(self):\n        return self.member_list.average_donations\n\n    @property\n    def average_donations_received_per_member(self):\n        return self.member_list.average_donations_received\n</code></pre>"},{"location":"API%20Reference/api/models/clan/#pyclasher.api.models.clan.Clan.capital_league","title":"<code>capital_league: CapitalLeague</code>  <code>property</code>","text":"<p>clan's capital league</p> <p>:return:    the capital league of the clan :rtype:     CapitalLeague</p>"},{"location":"API%20Reference/api/models/clan/#pyclasher.api.models.clan.Clan.chat_language","title":"<code>chat_language: Missing | Language</code>  <code>property</code>","text":"<p>clan's chat language</p> <p>:return:    the chat language of the clan :rtype:     Language</p>"},{"location":"API%20Reference/api/models/clan/#pyclasher.api.models.clan.Clan.clan_builder_base_points","title":"<code>clan_builder_base_points: int</code>  <code>property</code>","text":"<p>clan builder base points</p> <p>:return:    the builder base points of the clan :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan/#pyclasher.api.models.clan.Clan.clan_capital","title":"<code>clan_capital: Missing | ClanCapital</code>  <code>property</code>","text":"<p>clan's capital</p> <p>:return:    the capital of the clan :rtype:     ClanCapital</p>"},{"location":"API%20Reference/api/models/clan/#pyclasher.api.models.clan.Clan.clan_capital_points","title":"<code>clan_capital_points: int</code>  <code>property</code>","text":"<p>clan capital points</p> <p>:return:    the capital points of the clan :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan/#pyclasher.api.models.clan.Clan.clan_level","title":"<code>clan_level: int</code>  <code>property</code>","text":"<p>clan's level</p> <p>:return:    the clan level :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan/#pyclasher.api.models.clan.Clan.clan_points","title":"<code>clan_points: int</code>  <code>property</code>","text":"<p>clan points</p> <p>:return:    the points of the clan :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan/#pyclasher.api.models.clan.Clan.description","title":"<code>description: Missing | str</code>  <code>property</code>","text":"<p>clan's description</p> <p>:return:    the description of the clan :rtype:     str</p>"},{"location":"API%20Reference/api/models/clan/#pyclasher.api.models.clan.Clan.is_family_friendly","title":"<code>is_family_friendly: bool</code>  <code>property</code>","text":"<p>clan's family friendly status</p> <p>:return:    the family friendly status of the clan :rtype:     bool</p>"},{"location":"API%20Reference/api/models/clan/#pyclasher.api.models.clan.Clan.is_war_log_public","title":"<code>is_war_log_public: bool</code>  <code>property</code>","text":"<p>clan's public war log status</p> <p>:return:    the public war log status of the clan :rtype:     bool</p>"},{"location":"API%20Reference/api/models/clan/#pyclasher.api.models.clan.Clan.labels","title":"<code>labels: LabelList</code>  <code>property</code>","text":"<p>clan's labels</p> <p>:return:    the label list of the clan :rtype:     LabelList</p>"},{"location":"API%20Reference/api/models/clan/#pyclasher.api.models.clan.Clan.location","title":"<code>location: Missing | Location</code>  <code>property</code>","text":"<p>clan's location</p> <p>:return:    the location of the clan :rtype:     Location</p>"},{"location":"API%20Reference/api/models/clan/#pyclasher.api.models.clan.Clan.member_list","title":"<code>member_list: Missing | ClanMemberList</code>  <code>property</code>","text":"<p>clan's member list</p> <p>:return:    the member list of the clan :rtype:     ClanMemberList</p>"},{"location":"API%20Reference/api/models/clan/#pyclasher.api.models.clan.Clan.members","title":"<code>members: int</code>  <code>property</code>","text":"<p>clan members</p> <p>:return:    the number of members of the clan :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan/#pyclasher.api.models.clan.Clan.required_builder_base_trophies","title":"<code>required_builder_base_trophies: int</code>  <code>property</code>","text":"<p>clan's required builder base trophies</p> <p>:return:    the required builder base trophies of the clan :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan/#pyclasher.api.models.clan.Clan.required_townhall_level","title":"<code>required_townhall_level: int</code>  <code>property</code>","text":"<p>clan's required town hall level</p> <p>:return:    the required town hall level of the clan :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan/#pyclasher.api.models.clan.Clan.required_trophies","title":"<code>required_trophies: int</code>  <code>property</code>","text":"<p>clan's required trophies</p> <p>:return:    the required trophies of the clan :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan/#pyclasher.api.models.clan.Clan.type","title":"<code>type: ClanType</code>  <code>property</code>","text":"<p>clan type</p> <p>:return:    the type of the clan :rtype:     ClanType</p>"},{"location":"API%20Reference/api/models/clan/#pyclasher.api.models.clan.Clan.war_frequency","title":"<code>war_frequency: WarFrequency</code>  <code>property</code>","text":"<p>clan's war frequency</p> <p>:return:    the war frequency of the clan :rtype:     WarFrequency</p>"},{"location":"API%20Reference/api/models/clan/#pyclasher.api.models.clan.Clan.war_league","title":"<code>war_league: WarLeague</code>  <code>property</code>","text":"<p>clan's war league</p> <p>:return:    the war league of the clan :rtype:     WarLeague</p>"},{"location":"API%20Reference/api/models/clan/#pyclasher.api.models.clan.Clan.war_losses","title":"<code>war_losses: Missing | int</code>  <code>property</code>","text":"<p>clan's war losses</p> <p>:return:    the war losses of the clan :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan/#pyclasher.api.models.clan.Clan.war_ties","title":"<code>war_ties: Missing | int</code>  <code>property</code>","text":"<p>clan's war ties</p> <p>:return:    the war ties of the clan :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan/#pyclasher.api.models.clan.Clan.war_win_streak","title":"<code>war_win_streak: int</code>  <code>property</code>","text":"<p>clan's war win streak</p> <p>:return:    the war win streak of the clan :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan/#pyclasher.api.models.clan.Clan.war_wins","title":"<code>war_wins: Missing | int</code>  <code>property</code>","text":"<p>clan's war wins</p> <p>:return:    the war wins of the clan :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan/#pyclasher.api.models.clan.ClanCapital","title":"<code>ClanCapital</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>clan capital model</p> Source code in <code>pyclasher/api/models/clan.py</code> <pre><code>class ClanCapital(BaseModel):\n    def __init__(self, data):\n        super().__init__(data)\n        return\n\n    @property\n    def capital_hall_level(self):\n        return self._get_data('capitalHallLevel')\n\n    @property\n    def districts(self):\n        return ClanDistrictDataList(self._get_data('districts'))\n</code></pre>"},{"location":"API%20Reference/api/models/clan/#pyclasher.api.models.clan.ClanCapital.capital_hall_level","title":"<code>capital_hall_level: int</code>  <code>property</code>","text":"<p>capital hall level of the clan capital</p> <p>:return:    the capital hall level of the clan capital :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan/#pyclasher.api.models.clan.ClanCapital.districts","title":"<code>districts: ClanDistrictDataList</code>  <code>property</code>","text":"<p>districts of the clan capital</p> <p>:return:    the districts of the clan capital :rtype:     ClanDistrictDataList</p>"},{"location":"API%20Reference/api/models/clan/#pyclasher.api.models.clan.ClanDistrictData","title":"<code>ClanDistrictData</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>clan district data model</p> Source code in <code>pyclasher/api/models/clan.py</code> <pre><code>class ClanDistrictData(BaseModel):\n    def __init__(self, data):\n        super().__init__(data)\n        return\n\n    @property\n    def name(self):\n        return self._get_data('name')\n\n    @property\n    def id(self):\n        return self._get_data('id')\n\n    @property\n    def district_hall_level(self):\n        return self._get_data('districtHallLevel')\n</code></pre>"},{"location":"API%20Reference/api/models/clan/#pyclasher.api.models.clan.ClanDistrictData.district_hall_level","title":"<code>district_hall_level: int</code>  <code>property</code>","text":"<p>district hall level of the clan district</p> <p>:return:    the district hall level of the clan district :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan/#pyclasher.api.models.clan.ClanDistrictData.id","title":"<code>id: int</code>  <code>property</code>","text":"<p>id of the clan district</p> <p>:return:    the id of the clan district :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan/#pyclasher.api.models.clan.ClanDistrictData.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>name of the clan district</p> <p>:return:    the name of the clan district :rtype:     str</p>"},{"location":"API%20Reference/api/models/clan/#pyclasher.api.models.clan.ClanDistrictDataList","title":"<code>ClanDistrictDataList</code>","text":"<p>             Bases: <code>IterBaseModel</code></p> <p>clan district data list model</p> <p>can be iterated over</p> Source code in <code>pyclasher/api/models/clan.py</code> <pre><code>class ClanDistrictDataList(IterBaseModel):\n    _iter_rtype = ClanDistrictData\n</code></pre>"},{"location":"API%20Reference/api/models/clan_builder_base_ranking_list/","title":"Clan builder base ranking list","text":""},{"location":"API%20Reference/api/models/clan_builder_base_ranking_list/#pyclasher.api.models.clan_builder_base_ranking_list.ClanBuilderBaseRanking","title":"<code>ClanBuilderBaseRanking</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>clan builder base ranking model</p> Source code in <code>pyclasher/api/models/clan_builder_base_ranking_list.py</code> <pre><code>class ClanBuilderBaseRanking(BaseModel):\n    @property\n    def clan_points(self):\n        return self._get_data('clanPoints')\n\n    @property\n    def clan_builder_base_points(self):\n        return self._get_data('clanBuilderBasePoints')\n</code></pre>"},{"location":"API%20Reference/api/models/clan_builder_base_ranking_list/#pyclasher.api.models.clan_builder_base_ranking_list.ClanBuilderBaseRanking.clan_builder_base_points","title":"<code>clan_builder_base_points: int</code>  <code>property</code>","text":"<p>clan's builder base points</p> <p>:return:    the builder base points of the clan :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_builder_base_ranking_list/#pyclasher.api.models.clan_builder_base_ranking_list.ClanBuilderBaseRanking.clan_points","title":"<code>clan_points: int</code>  <code>property</code>","text":"<p>clan points</p> <p>:return:    the clan points :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_builder_base_ranking_list/#pyclasher.api.models.clan_builder_base_ranking_list.ClanBuilderBaseRankingList","title":"<code>ClanBuilderBaseRankingList</code>","text":"<p>             Bases: <code>IterBaseModel</code></p> <p>clan builder base ranking list model</p> Source code in <code>pyclasher/api/models/clan_builder_base_ranking_list.py</code> <pre><code>class ClanBuilderBaseRankingList(IterBaseModel):\n    _iter_rtype = ClanBuilderBaseRanking\n</code></pre>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/","title":"Clan capital raid seasons","text":""},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeason","title":"<code>ClanCapitalRaidSeason</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>clan capital raid season model</p> <p>can be iterated over</p> Source code in <code>pyclasher/api/models/clan_capital_raid_seasons.py</code> <pre><code>class ClanCapitalRaidSeason(BaseModel):\n    def __init__(self, data):\n        super().__init__(data)\n        return\n\n    @property\n    def attack_log(self):\n        return ClanCapitalRaidSeasonAttackLogList(self._get_data('attackLog'))\n\n    @property\n    def defense_log(self):\n        return ClanCapitalRaidSeasonDefenseLogList(self._get_data('defenseLog'))\n\n    @property\n    def state(self):\n        return self._get_data('state')\n\n    @property\n    def start_time(self):\n        return Time.from_str(self._get_data('startTime'))\n\n    @property\n    def end_time(self):\n        return Time.from_str(self._get_data('endTime'))\n\n    @property\n    def capital_total_loot(self):\n        return self._get_data('capitalTotalLoot')\n\n    @property\n    def raids_completed(self):\n        return self._get_data('raidsCompleted')\n\n    @property\n    def total_attacks(self):\n        return self._get_data('totalAttacks')\n\n    @property\n    def enemy_districts_destroyed(self):\n        return self._get_data('enemyDistrictsDestroyed')\n\n    @property\n    def defensive_reward(self):\n        return self._get_data('defensiveReward')\n\n    @property\n    def offensive_reward(self):\n        return self._get_data('offensiveReward')\n\n    @property\n    def members(self):\n        return ClanCapitalRaidSeasonMemberList(self._get_data('members'))\n\n    @property\n    def average_attacks_per_member(self):\n        return (sum((member.attacks for member in self.members)) /\n                len(self.members))\n\n    @property\n    def average_resources_looted_per_member(self):\n        return (\n            sum((member.capital_resources_looted for member in self.members)) /\n            len(self.members)\n        )\n</code></pre>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeason.attack_log","title":"<code>attack_log: ClanCapitalRaidSeasonAttackLogList</code>  <code>property</code>","text":"<p>attack log</p> <p>:return:    the attack log :rtype:     ClanCapitalRaidSeasonAttackLogList</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeason.capital_total_loot","title":"<code>capital_total_loot: int</code>  <code>property</code>","text":"<p>total looted capital gold</p> <p>:return:    the total amount of looted capital gold :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeason.defense_log","title":"<code>defense_log: ClanCapitalRaidSeasonDefenseLogList</code>  <code>property</code>","text":"<p>defense log</p> <p>:return:    the defense log :rtype:     ClanCapitalRaidSeasonAttackLogList</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeason.defensive_reward","title":"<code>defensive_reward: int</code>  <code>property</code>","text":"<p>raid medal defense reward</p> <p>:return:    the raid medal defense reward :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeason.end_time","title":"<code>end_time: Time</code>  <code>property</code>","text":"<p>end time of the capital raid season</p> <p>:return:    the end time of the capital raid season :rtype:     Time</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeason.enemy_districts_destroyed","title":"<code>enemy_districts_destroyed: int</code>  <code>property</code>","text":"<p>number of destroyed districts (attacking)</p> <p>:return:    the number of destroyed districts (attacking) :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeason.members","title":"<code>members: Missing | ClanCapitalRaidSeasonMemberList</code>  <code>property</code>","text":"<p>member list</p> <p>:return:    the member list :rtype:     ClanCapitalRaidSeasonMemberList</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeason.raids_completed","title":"<code>raids_completed: int</code>  <code>property</code>","text":"<p>number of completed raids</p> <p>:return:    the number of completed raids :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeason.start_time","title":"<code>start_time: Time</code>  <code>property</code>","text":"<p>start time of the capital raid season</p> <p>:return:    the start time of the capital raid season :rtype:     Time</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeason.state","title":"<code>state: str</code>  <code>property</code>","text":"<p>capital raid season state</p> <p>:return:    the capital season state :rtype:     str</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeason.total_attacks","title":"<code>total_attacks: int</code>  <code>property</code>","text":"<p>total attack count</p> <p>:return:    the total number of attacks</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonAttack","title":"<code>ClanCapitalRaidSeasonAttack</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>clan capital raid season attack model</p> Source code in <code>pyclasher/api/models/clan_capital_raid_seasons.py</code> <pre><code>class ClanCapitalRaidSeasonAttack(BaseModel):\n    def __init__(self, data):\n        super().__init__(data)\n        return\n\n    @property\n    def attacker(self):\n        return ClanCapitalRaidSeasonAttacker(self._get_data('attacker'))\n\n    @property\n    def destruction_percent(self):\n        return self._get_data('destructionPercent')\n\n    @property\n    def stars(self):\n        return self._get_data('stars')\n</code></pre>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonAttack.attacker","title":"<code>attacker: ClanCapitalRaidSeasonAttacker</code>  <code>property</code>","text":"<p>attacker</p> <p>:return:    the attacker of the raid season attack :rtype:     ClanCapitalRaidSeasonAttacker</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonAttack.destruction_percent","title":"<code>destruction_percent: int</code>  <code>property</code>","text":"<p>destruction percentage of the raid season attack</p> <p>:return:    the destruction percentage of the raid season attack :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonAttack.stars","title":"<code>stars: int</code>  <code>property</code>","text":"<p>stars of the raid season attack</p> <p>:return:    the stars of the raid season attack :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonAttackList","title":"<code>ClanCapitalRaidSeasonAttackList</code>","text":"<p>             Bases: <code>IterBaseModel</code></p> <p>clan capital raid season attack list model</p> <p>Holds information about the clan capital raid season attacks</p> Source code in <code>pyclasher/api/models/clan_capital_raid_seasons.py</code> <pre><code>class ClanCapitalRaidSeasonAttackList(IterBaseModel):\n    _iter_rtype = ClanCapitalRaidSeasonAttack\n</code></pre>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonAttackLogEntry","title":"<code>ClanCapitalRaidSeasonAttackLogEntry</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>clan capital raid season attack log entry model</p> Source code in <code>pyclasher/api/models/clan_capital_raid_seasons.py</code> <pre><code>class ClanCapitalRaidSeasonAttackLogEntry(BaseModel):\n    @property\n    def defender(self):\n        return ClanCapitalRaidSeasonClanInfo(self._get_data('defender'))\n\n    @property\n    def attack_count(self):\n        return self._get_data('attackCount')\n\n    @property\n    def district_count(self):\n        return self._get_data('districtCount')\n\n    @property\n    def districts_destroyed(self):\n        return self._get_data('districtsDestroyed')\n\n    @property\n    def districts(self):\n        return ClanCapitalRaidSeasonDistrictList(self._get_data('districts'))\n</code></pre>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonAttackLogEntry.attack_count","title":"<code>attack_count: int</code>  <code>property</code>","text":"<p>number of attacks</p> <p>:return:    the number of attacks :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonAttackLogEntry.defender","title":"<code>defender: ClanCapitalRaidSeasonClanInfo</code>  <code>property</code>","text":"<p>defender clan</p> <p>:return:    the defender clan :rtype:     ClanCapitalRaidSeasonClanInfo</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonAttackLogEntry.district_count","title":"<code>district_count: int</code>  <code>property</code>","text":"<p>number of districts</p> <p>:return:    the number of districts :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonAttackLogEntry.districts","title":"<code>districts: ClanCapitalRaidSeasonDistrictList</code>  <code>property</code>","text":"<p>district list</p> <p>:return:    the list of districts :rtype:     ClanCapitalRaidSeasonDistrictList</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonAttackLogEntry.districts_destroyed","title":"<code>districts_destroyed: int</code>  <code>property</code>","text":"<p>number of destroyed districts</p> <p>:return:    the number of destroyed districts :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonAttackLogList","title":"<code>ClanCapitalRaidSeasonAttackLogList</code>","text":"<p>             Bases: <code>IterBaseModel</code></p> <p>clan capital raid season attack log list model</p> <p>can be iterated over</p> Source code in <code>pyclasher/api/models/clan_capital_raid_seasons.py</code> <pre><code>class ClanCapitalRaidSeasonAttackLogList(IterBaseModel):\n    _iter_rtype = ClanCapitalRaidSeasonAttackLogEntry\n</code></pre>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonAttacker","title":"<code>ClanCapitalRaidSeasonAttacker</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>clan capital raid season attacker model</p> Source code in <code>pyclasher/api/models/clan_capital_raid_seasons.py</code> <pre><code>class ClanCapitalRaidSeasonAttacker(BaseModel):\n    def __init__(self, data):\n        super().__init__(data)\n        return\n\n    @property\n    def tag(self):\n        return self._get_data('tag')\n\n    @property\n    def name(self):\n        return self._get_data('name')\n</code></pre>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonAttacker.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>attacker name</p> <p>:return:    the player name of the attacker :rtype:     str</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonAttacker.tag","title":"<code>tag: str</code>  <code>property</code>","text":"<p>attacker tag</p> <p>:return:    the player tag of the attacker :rtype:     str</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonClanInfo","title":"<code>ClanCapitalRaidSeasonClanInfo</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>clan capital raid season clan info model</p> Source code in <code>pyclasher/api/models/clan_capital_raid_seasons.py</code> <pre><code>class ClanCapitalRaidSeasonClanInfo(BaseModel):\n    def __init__(self, data):\n        super().__init__(data)\n        return\n\n    @property\n    def tag(self):\n        return self._get_data('tag')\n\n    @property\n    def name(self):\n        return self._get_data('name')\n\n    @property\n    def level(self):\n        return self._get_data('level')\n\n    @property\n    def badge_urls(self):\n        return BadgeUrls(self._get_data('badgeUrls'))\n</code></pre>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonClanInfo.level","title":"<code>level: int</code>  <code>property</code>","text":"<p>clan level</p> <p>:return:    the level of the clan</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonDefenseLogEntry","title":"<code>ClanCapitalRaidSeasonDefenseLogEntry</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>clan capital raid season defense log entry model</p> Source code in <code>pyclasher/api/models/clan_capital_raid_seasons.py</code> <pre><code>class ClanCapitalRaidSeasonDefenseLogEntry(BaseModel):\n    @property\n    def attacker(self):\n        return ClanCapitalRaidSeasonClanInfo(self._get_data('attacker'))\n\n    @property\n    def attack_count(self):\n        return self._get_data('attackCount')\n\n    @property\n    def district_count(self):\n        return self._get_data('districtCount')\n\n    @property\n    def districts_destroyed(self):\n        return self._get_data('districtsDestroyed')\n\n    @property\n    def districts(self):\n        return ClanCapitalRaidSeasonDistrictList(self._get_data('districts'))\n</code></pre>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonDefenseLogEntry.attack_count","title":"<code>attack_count: int</code>  <code>property</code>","text":"<p>number of used attacks</p> <p>:return:    the number of used attacks :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonDefenseLogEntry.attacker","title":"<code>attacker: ClanCapitalRaidSeasonClanInfo</code>  <code>property</code>","text":"<p>attacker clan</p> <p>:return:    the attacker clan :rtype:     ClanCapitalRaidSeasonClanInfo</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonDefenseLogEntry.district_count","title":"<code>district_count: int</code>  <code>property</code>","text":"<p>number of districts</p> <p>:return:    the number of districts :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonDefenseLogEntry.districts","title":"<code>districts: ClanCapitalRaidSeasonDistrictList</code>  <code>property</code>","text":"<p>district list</p> <p>:return:    the list of districts :rtype:     ClanCapitalRaidSeasonDistrictList</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonDefenseLogEntry.districts_destroyed","title":"<code>districts_destroyed: int</code>  <code>property</code>","text":"<p>number of destroyed districts</p> <p>:return:    the number of destroyed districts :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonDefenseLogList","title":"<code>ClanCapitalRaidSeasonDefenseLogList</code>","text":"<p>             Bases: <code>IterBaseModel</code></p> <p>clan capital raid season defense log list model</p> <p>can be iterated over</p> Source code in <code>pyclasher/api/models/clan_capital_raid_seasons.py</code> <pre><code>class ClanCapitalRaidSeasonDefenseLogList(IterBaseModel):\n    _iter_rtype = ClanCapitalRaidSeasonDefenseLogEntry\n</code></pre>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonDistrict","title":"<code>ClanCapitalRaidSeasonDistrict</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>clan capital raid season district model</p> Source code in <code>pyclasher/api/models/clan_capital_raid_seasons.py</code> <pre><code>class ClanCapitalRaidSeasonDistrict(BaseModel):\n    def __init__(self, data):\n        super().__init__(data)\n        return\n\n    @property\n    def stars(self):\n        return self._get_data('stars')\n\n    @property\n    def name(self):\n        return self._get_data('name')\n\n    @property\n    def id(self):\n        return self._get_data('id')\n\n    @property\n    def destruction_percent(self):\n        return self._get_data('destructionPercent')\n\n    @property\n    def attack_count(self):\n        return self._get_data('attackCount')\n\n    @property\n    def total_looted(self):\n        return self._get_data('totalLooted')\n\n    @property\n    def attacks(self):\n        return ClanCapitalRaidSeasonAttackList(self._get_data('attacks'))\n\n    @property\n    def district_hall_level(self):\n        return self._get_data('districtHallLevel')\n</code></pre>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonDistrict.attack_count","title":"<code>attack_count: int</code>  <code>property</code>","text":"<p>attack count used on the district</p> <p>:return:    the number of attacks used to attack this district :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonDistrict.attacks","title":"<code>attacks: ClanCapitalRaidSeasonAttackList</code>  <code>property</code>","text":"<p>attack list</p> <p>:return:    the attack list of the district :rtype:     ClanCapitalRaidSeasonAttackList</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonDistrict.destruction_percent","title":"<code>destruction_percent: int</code>  <code>property</code>","text":"<p>district destruction percentage</p> <p>:return:    the destruction percentage of the district :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonDistrict.district_hall_level","title":"<code>district_hall_level: int</code>  <code>property</code>","text":"<p>district hall level</p> <p>:return:    the district hall level :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonDistrict.id","title":"<code>id: int</code>  <code>property</code>","text":"<p>district ID</p> <p>:return:    the ID of the district :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonDistrict.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>district name</p> <p>:return:    the name of the district :rtype:     str</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonDistrict.stars","title":"<code>stars: int</code>  <code>property</code>","text":"<p>district stars</p> <p>:return:    the stars of the raid season log entry :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonDistrict.total_looted","title":"<code>total_looted: int</code>  <code>property</code>","text":"<p>total looted raid gold</p> <p>:return:    the total looted raid gold of this district :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonDistrictList","title":"<code>ClanCapitalRaidSeasonDistrictList</code>","text":"<p>             Bases: <code>IterBaseModel</code></p> <p>clan capital rais season district list model</p> <p>clan be iterated over</p> Source code in <code>pyclasher/api/models/clan_capital_raid_seasons.py</code> <pre><code>class ClanCapitalRaidSeasonDistrictList(IterBaseModel):\n    _iter_rtype = ClanCapitalRaidSeasonDistrict\n</code></pre>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonMember","title":"<code>ClanCapitalRaidSeasonMember</code>","text":"<p>             Bases: <code>BaseClanMember</code></p> <p>clan capital raid season member model</p> Source code in <code>pyclasher/api/models/clan_capital_raid_seasons.py</code> <pre><code>class ClanCapitalRaidSeasonMember(BaseClanMember):\n    @property\n    def attacks(self):\n        return self._get_data('attacks')\n\n    @property\n    def attack_limit(self):\n        return self._get_data('attackLimit')\n\n    @property\n    def bonus_attack_limit(self):\n        return self._get_data('bonusAttackLimit')\n\n    @property\n    def capital_resources_looted(self):\n        return self._get_data('capitalResourcesLooted')\n</code></pre>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonMember.attack_limit","title":"<code>attack_limit: int</code>  <code>property</code>","text":"<p>attack limit</p> <p>:return:    the attack limit :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonMember.attacks","title":"<code>attacks: int</code>  <code>property</code>","text":"<p>attack count of the member</p> <p>:return:    the attack count of the member :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonMember.bonus_attack_limit","title":"<code>bonus_attack_limit: int</code>  <code>property</code>","text":"<p>bonus attack limit</p> <p>:return:    the bonus attack limit :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonMember.capital_resources_looted","title":"<code>capital_resources_looted: int</code>  <code>property</code>","text":"<p>looted capital gold</p> <p>:return:    the looted capital gold :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasonMemberList","title":"<code>ClanCapitalRaidSeasonMemberList</code>","text":"<p>             Bases: <code>IterBaseModel</code></p> <p>clan capital raid season member list model</p> <p>can be iterated over</p> Source code in <code>pyclasher/api/models/clan_capital_raid_seasons.py</code> <pre><code>class ClanCapitalRaidSeasonMemberList(IterBaseModel):\n    _iter_rtype = ClanCapitalRaidSeasonMember\n\n    @property\n    def average_attacks(self):\n        return sum((member.attacks for member in self)) / len(self)\n\n    @property\n    def average_resources_looted(self):\n        return (sum((member.capital_resources_looted for member in self)) /\n                len(self))\n</code></pre>"},{"location":"API%20Reference/api/models/clan_capital_raid_seasons/#pyclasher.api.models.clan_capital_raid_seasons.ClanCapitalRaidSeasons","title":"<code>ClanCapitalRaidSeasons</code>","text":"<p>             Bases: <code>IterBaseModel</code></p> <p>clan capital raid seasons model</p> <p>can be iterated over</p> Source code in <code>pyclasher/api/models/clan_capital_raid_seasons.py</code> <pre><code>class ClanCapitalRaidSeasons(IterBaseModel):\n    _iter_rtype = ClanCapitalRaidSeason\n\n    @property\n    def average_capital_total_loot(self):\n        return sum((season.capital_total_loot for season in self)) / len(self)\n\n    @property\n    def average_raids_completed(self):\n        return sum((season.raids_completed for season in self)) / len(self)\n\n    @property\n    def average_total_attacks(self):\n        return sum((season.total_attacks for season in self)) / len(self)\n\n    @property\n    def average_enemy_districts_destroyed(self):\n        return (sum((season.enemy_districts_destroyed for season in self)) /\n                len(self))\n\n    @property\n    def average_defensive_reward(self):\n        return sum((season.defensive_reward for season in self)) / len(self)\n\n    @property\n    def average_offensive_reward(self):\n        return sum((season.offensive_reward for season in self)) / len(self)\n</code></pre>"},{"location":"API%20Reference/api/models/clan_capital_ranking_list/","title":"Clan capital ranking list","text":""},{"location":"API%20Reference/api/models/clan_capital_ranking_list/#pyclasher.api.models.clan_capital_ranking_list.ClanCapitalRanking","title":"<code>ClanCapitalRanking</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>clan capital ranking model</p> Source code in <code>pyclasher/api/models/clan_capital_ranking_list.py</code> <pre><code>class ClanCapitalRanking(BaseModel):\n    @property\n    def clan_points(self):\n        return self._get_data('clanPoints')\n\n    @property\n    def clan_capital_points(self):\n        return self._get_data('clanCapitalPoints')\n</code></pre>"},{"location":"API%20Reference/api/models/clan_capital_ranking_list/#pyclasher.api.models.clan_capital_ranking_list.ClanCapitalRanking.clan_capital_points","title":"<code>clan_capital_points: int</code>  <code>property</code>","text":"<p>clan capital points</p> <p>:return:    the clan capital points :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_capital_ranking_list/#pyclasher.api.models.clan_capital_ranking_list.ClanCapitalRanking.clan_points","title":"<code>clan_points: int</code>  <code>property</code>","text":"<p>clan points</p> <p>:return:    the clan points :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_capital_ranking_list/#pyclasher.api.models.clan_capital_ranking_list.ClanCapitalRankingList","title":"<code>ClanCapitalRankingList</code>","text":"<p>             Bases: <code>IterBaseModel</code></p> <p>clan capital ranking list model</p> <p>can be iterated over</p> Source code in <code>pyclasher/api/models/clan_capital_ranking_list.py</code> <pre><code>class ClanCapitalRankingList(IterBaseModel):\n    _iter_rtype = ClanCapitalRanking\n\n    def __getitem__(self, item):\n        return super().__getitem__(item)\n\n    def __next__(self):\n        return super().__next__()\n</code></pre>"},{"location":"API%20Reference/api/models/clan_list/","title":"Clan list","text":""},{"location":"API%20Reference/api/models/clan_list/#pyclasher.api.models.clan_list.ClanList","title":"<code>ClanList</code>","text":"<p>             Bases: <code>IterBaseModel</code></p> <p>clan list model</p> <p>can be iterated over</p> Source code in <code>pyclasher/api/models/clan_list.py</code> <pre><code>class ClanList(IterBaseModel):\n    _iter_rtype = Clan\n\n    def __getitem__(self, item):\n        return super().__getitem__(item)\n\n    def __next__(self):\n        return super().__next__()\n</code></pre>"},{"location":"API%20Reference/api/models/clan_member/","title":"Clan member","text":""},{"location":"API%20Reference/api/models/clan_member/#pyclasher.api.models.clan_member.ClanMember","title":"<code>ClanMember</code>","text":"<p>             Bases: <code>BaseClanMember</code></p> <p>clan member model</p> Source code in <code>pyclasher/api/models/clan_member.py</code> <pre><code>class ClanMember(BaseClanMember):\n    @property\n    def league(self):\n        return League(self._get_data('league'))\n\n    @property\n    def builder_base_league(self):\n        return BuilderBaseLeague(self._get_data('builderBaseLeague'))\n\n    @property\n    def role(self):\n        return ClanRole(self._get_data('role'))\n\n    @property\n    def exp_level(self):\n        return self._get_data('expLevel')\n\n    @property\n    def clan_rank(self):\n        return self._get_data('clanRank')\n\n    @property\n    def previous_clan_rank(self):\n        return self._get_data('previousClanRank')\n\n    @property\n    def donations(self):\n        return self._get_data('donations')\n\n    @property\n    def donations_received(self):\n        return self._get_data('donationsReceived')\n\n    @property\n    def trophies(self):\n        return self._get_data('trophies')\n\n    @property\n    def builder_base_trophies(self):\n        return self._get_data('builderBaseTrophies')\n\n    @property\n    def player_house(self):\n        return PlayerHouse(self._get_data('playerHouse'))\n</code></pre>"},{"location":"API%20Reference/api/models/clan_member/#pyclasher.api.models.clan_member.ClanMember.builder_base_league","title":"<code>builder_base_league: BuilderBaseLeague</code>  <code>property</code>","text":"<p>builder base league where the player is in</p> <p>:return:    the player's builder base league :rtype:     BuilderBaseLeague</p>"},{"location":"API%20Reference/api/models/clan_member/#pyclasher.api.models.clan_member.ClanMember.builder_base_trophies","title":"<code>builder_base_trophies: int</code>  <code>property</code>","text":"<p>builder base trophies of the player</p> <p>:return:    the player's builder base trophies :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_member/#pyclasher.api.models.clan_member.ClanMember.clan_rank","title":"<code>clan_rank: int</code>  <code>property</code>","text":"<p>rank of the player in the clan</p> <p>:return:    the player's rank in the clan :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_member/#pyclasher.api.models.clan_member.ClanMember.donations","title":"<code>donations: int</code>  <code>property</code>","text":"<p>donations count of the player</p> <p>:return:    the player's donations count :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_member/#pyclasher.api.models.clan_member.ClanMember.donations_received","title":"<code>donations_received: int</code>  <code>property</code>","text":"<p>received donations count of the player</p> <p>:return:    the player's received donations count :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_member/#pyclasher.api.models.clan_member.ClanMember.exp_level","title":"<code>exp_level: int</code>  <code>property</code>","text":"<p>exp level of the player</p> <p>:return:    the player's exp level :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_member/#pyclasher.api.models.clan_member.ClanMember.league","title":"<code>league: League</code>  <code>property</code>","text":"<p>league where the player is in</p> <p>:return:    the player's league :rtype:     League</p>"},{"location":"API%20Reference/api/models/clan_member/#pyclasher.api.models.clan_member.ClanMember.player_house","title":"<code>player_house: Missing | PlayerHouse</code>  <code>property</code>","text":"<p>player house</p> <p>:return:    the player's house of the clan capital :rtype:     PlayerHouse</p>"},{"location":"API%20Reference/api/models/clan_member/#pyclasher.api.models.clan_member.ClanMember.previous_clan_rank","title":"<code>previous_clan_rank: int</code>  <code>property</code>","text":"<p>previous rank of the player in the clan</p> <p>:return:    the player's previous rank in the clan :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_member/#pyclasher.api.models.clan_member.ClanMember.role","title":"<code>role: ClanRole</code>  <code>property</code>","text":"<p>role of the member</p> <p>:return:    the member's role :rtype:     ClanRole</p>"},{"location":"API%20Reference/api/models/clan_member/#pyclasher.api.models.clan_member.ClanMember.trophies","title":"<code>trophies: int</code>  <code>property</code>","text":"<p>trophies of the player</p> <p>:return:    the player's trophies :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_member_list/","title":"Clan member list","text":""},{"location":"API%20Reference/api/models/clan_member_list/#pyclasher.api.models.clan_member_list.ClanMemberList","title":"<code>ClanMemberList</code>","text":"<p>             Bases: <code>IterBaseModel</code></p> <p>clan member list model</p> <p>Holds information about all clan members</p> <p>can be iterated over</p> Source code in <code>pyclasher/api/models/clan_member_list.py</code> <pre><code>class ClanMemberList(IterBaseModel):\n    _iter_rtype = ClanMember\n\n    @property\n    def average_exp_level(self):\n        return sum((member.exp_level for member in self)) / len(self)\n\n    @property\n    def average_trophies(self):\n        return sum((member.trophies for member in self)) / len(self)\n\n    @property\n    def average_builder_base_trophies(self):\n        return (sum((member.builder_base_trophies for member in self)) /\n                len(self))\n\n    @property\n    def average_donations(self):\n        return sum((member.donations for member in self)) / len(self)\n\n    @property\n    def average_donations_received(self):\n        return sum((member.donations_received for member in self)) / len(self)\n\n    def __getitem__(self, item):\n        return super().__getitem__(item)\n\n    def __next__(self):\n        return super().__next__()\n</code></pre>"},{"location":"API%20Reference/api/models/clan_ranking_list/","title":"Clan ranking list","text":""},{"location":"API%20Reference/api/models/clan_ranking_list/#pyclasher.api.models.clan_ranking_list.ClanRanking","title":"<code>ClanRanking</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>clan ranking model</p> Source code in <code>pyclasher/api/models/clan_ranking_list.py</code> <pre><code>class ClanRanking(BaseModel):\n    @property\n    def clan_level(self):\n        return self._get_data('clanLevel')\n\n    @property\n    def clan_points(self):\n        return self._get_data('clanPoints')\n\n    @property\n    def location(self):\n        return Location(self._get_data('location'))\n\n    @property\n    def members(self):\n        return self._get_data('members')\n\n    @property\n    def tag(self):\n        return self._get_data('tag')\n\n    @property\n    def name(self):\n        return self._get_data('name')\n\n    @property\n    def rank(self):\n        return self._get_data('rank')\n\n    @property\n    def previous_rank(self):\n        return self._get_data('previousRank')\n\n    @property\n    def badge_urls(self):\n        return BadgeUrls(self._get_data('badgeUrls'))\n</code></pre>"},{"location":"API%20Reference/api/models/clan_ranking_list/#pyclasher.api.models.clan_ranking_list.ClanRanking.badge_urls","title":"<code>badge_urls: BadgeUrls</code>  <code>property</code>","text":"<p>badge URLs of the clan</p> <p>:return:    the clan's badge URLs :rtype:     BadgeUrls</p>"},{"location":"API%20Reference/api/models/clan_ranking_list/#pyclasher.api.models.clan_ranking_list.ClanRanking.clan_level","title":"<code>clan_level: int</code>  <code>property</code>","text":"<p>level of the clan</p> <p>:return:    the clan's level :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_ranking_list/#pyclasher.api.models.clan_ranking_list.ClanRanking.clan_points","title":"<code>clan_points: int</code>  <code>property</code>","text":"<p>points of the clan</p> <p>:return:    the clan's points :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_ranking_list/#pyclasher.api.models.clan_ranking_list.ClanRanking.location","title":"<code>location: Location</code>  <code>property</code>","text":"<p>location of the clan</p> <p>:return:    the clan's location :rtype:     Location</p>"},{"location":"API%20Reference/api/models/clan_ranking_list/#pyclasher.api.models.clan_ranking_list.ClanRanking.members","title":"<code>members: int</code>  <code>property</code>","text":"<p>member count of the clan</p> <p>:return:    the clan's member count</p>"},{"location":"API%20Reference/api/models/clan_ranking_list/#pyclasher.api.models.clan_ranking_list.ClanRanking.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>clan name</p> <p>:return:    the clan name :rtype:     str</p>"},{"location":"API%20Reference/api/models/clan_ranking_list/#pyclasher.api.models.clan_ranking_list.ClanRanking.previous_rank","title":"<code>previous_rank: int</code>  <code>property</code>","text":"<p>previous clan rank</p> <p>:return:    the previous clan's rank :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_ranking_list/#pyclasher.api.models.clan_ranking_list.ClanRanking.rank","title":"<code>rank: int</code>  <code>property</code>","text":"<p>clan rank</p> <p>:return:    the clan's rank :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_ranking_list/#pyclasher.api.models.clan_ranking_list.ClanRanking.tag","title":"<code>tag: str</code>  <code>property</code>","text":"<p>clan tag</p> <p>:return:    the clan tag :rtype:     str</p>"},{"location":"API%20Reference/api/models/clan_ranking_list/#pyclasher.api.models.clan_ranking_list.ClanRankingList","title":"<code>ClanRankingList</code>","text":"<p>             Bases: <code>IterBaseModel</code></p> <p>clan ranking list model</p> <p>can be iterated over</p> Source code in <code>pyclasher/api/models/clan_ranking_list.py</code> <pre><code>class ClanRankingList(IterBaseModel):\n    _iter_rtype = ClanRanking\n\n    def __getitem__(self, item):\n        return super().__getitem__(item)\n\n    def __next__(self):\n        return super().__next__()\n</code></pre>"},{"location":"API%20Reference/api/models/clan_war/","title":"Clan war","text":""},{"location":"API%20Reference/api/models/clan_war/#pyclasher.api.models.clan_war.ClanWar","title":"<code>ClanWar</code>","text":"<p>             Bases: <code>BaseModel</code></p> Source code in <code>pyclasher/api/models/clan_war.py</code> <pre><code>class ClanWar(BaseModel):\n    @property\n    def clan(self):\n        return WarClan(self._get_data('clan'))\n\n    @property\n    def opponent(self):\n        return WarClan(self._get_data('opponent'))\n\n    @property\n    def team_size(self):\n        return self._get_data('teamSize')\n\n    @property\n    def attacks_per_member(self):\n        return self._get_data('attacksPerMember')\n\n    @property\n    def start_time(self):\n        return Time.from_str(self._get_data('startTime'))\n\n    @property\n    def state(self):\n        return ClanWarState(self._get_data('state'))\n\n    @property\n    def end_time(self):\n        return Time.from_str(self._get_data('endTime'))\n\n    @property\n    def preparation_start_time(self):\n        return Time.from_str(self._get_data('preparationStartTime'))\n</code></pre>"},{"location":"API%20Reference/api/models/clan_war/#pyclasher.api.models.clan_war.ClanWar.attacks_per_member","title":"<code>attacks_per_member: int</code>  <code>property</code>","text":"<p>attacks per member (usually 2 for regular war and 1 for clan war league)</p> <p>:return:    the attacks per member :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_war/#pyclasher.api.models.clan_war.ClanWar.clan","title":"<code>clan: WarClan</code>  <code>property</code>","text":"<p>clan in the war</p> <p>:return:    the clan in the war :rtype:     WarClan</p>"},{"location":"API%20Reference/api/models/clan_war/#pyclasher.api.models.clan_war.ClanWar.end_time","title":"<code>end_time: Time</code>  <code>property</code>","text":"<p>end time of the clan war</p> <p>:return:    the end time of the clan war :rtype:     Time</p>"},{"location":"API%20Reference/api/models/clan_war/#pyclasher.api.models.clan_war.ClanWar.opponent","title":"<code>opponent: WarClan</code>  <code>property</code>","text":"<p>opponent</p> <p>:return:    the clan's opponent :rtype:     WarClan</p>"},{"location":"API%20Reference/api/models/clan_war/#pyclasher.api.models.clan_war.ClanWar.preparation_start_time","title":"<code>preparation_start_time: Time</code>  <code>property</code>","text":"<p>preparation start time of the clan war</p> <p>:return:    the preparation start time of the clan war :rtype:     Time</p>"},{"location":"API%20Reference/api/models/clan_war/#pyclasher.api.models.clan_war.ClanWar.start_time","title":"<code>start_time: Time</code>  <code>property</code>","text":"<p>start time of the clan war</p> <p>:return:    the start time of the clan war :rtype:     Time</p>"},{"location":"API%20Reference/api/models/clan_war/#pyclasher.api.models.clan_war.ClanWar.state","title":"<code>state: ClanWarState</code>  <code>property</code>","text":"<p>state of the clan war</p> <p>:return:    the state of the clan war :rtype:     ClanWarState</p>"},{"location":"API%20Reference/api/models/clan_war/#pyclasher.api.models.clan_war.ClanWar.team_size","title":"<code>team_size: int</code>  <code>property</code>","text":"<p>team size of the war</p> <p>:return:    the war's team size :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_war_league_group/","title":"Clan war league group","text":""},{"location":"API%20Reference/api/models/clan_war_league_group/#pyclasher.api.models.clan_war_league_group.ClanWarLeagueClan","title":"<code>ClanWarLeagueClan</code>","text":"<p>             Bases: <code>BaseClan</code></p> <p>clan war league clan model</p> Source code in <code>pyclasher/api/models/clan_war_league_group.py</code> <pre><code>class ClanWarLeagueClan(BaseClan):\n    def __init__(self, data):\n        super().__init__(data)\n        return\n\n    @property\n    def clan_level(self):\n        return self._get_data('clanLevel')\n\n    @property\n    def members(self):\n        return ClanWarLeagueClanMemberList(self._get_data('members'))\n</code></pre>"},{"location":"API%20Reference/api/models/clan_war_league_group/#pyclasher.api.models.clan_war_league_group.ClanWarLeagueClan.clan_level","title":"<code>clan_level: int</code>  <code>property</code>","text":"<p>clan level</p> <p>:return:    the clan level :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_war_league_group/#pyclasher.api.models.clan_war_league_group.ClanWarLeagueClan.members","title":"<code>members: ClanWarLeagueClanMemberList</code>  <code>property</code>","text":"<p>clan members</p> <p>:return:    the list of clan members :rtype:     ClanWarLeagueClanMemberList</p>"},{"location":"API%20Reference/api/models/clan_war_league_group/#pyclasher.api.models.clan_war_league_group.ClanWarLeagueClanList","title":"<code>ClanWarLeagueClanList</code>","text":"<p>             Bases: <code>IterBaseModel</code></p> <p>clan war league clan list model</p> <p>can be iterated over</p> Source code in <code>pyclasher/api/models/clan_war_league_group.py</code> <pre><code>class ClanWarLeagueClanList(IterBaseModel):\n    _iter_rtype = ClanWarLeagueClan\n\n    def __getitem__(self, item):\n        return super().__getitem__(item)\n\n    def __next__(self):\n        return super().__next__()\n</code></pre>"},{"location":"API%20Reference/api/models/clan_war_league_group/#pyclasher.api.models.clan_war_league_group.ClanWarLeagueClanMember","title":"<code>ClanWarLeagueClanMember</code>","text":"<p>             Bases: <code>BaseClanMember</code></p> <p>clan war league clan member model</p> Source code in <code>pyclasher/api/models/clan_war_league_group.py</code> <pre><code>class ClanWarLeagueClanMember(BaseClanMember):\n    @property\n    def townhall_level(self):\n        return self._get_data('townhallLevel')\n</code></pre>"},{"location":"API%20Reference/api/models/clan_war_league_group/#pyclasher.api.models.clan_war_league_group.ClanWarLeagueClanMember.townhall_level","title":"<code>townhall_level: int</code>  <code>property</code>","text":"<p>town hall level of the player</p> <p>:return:    the player's town hall level :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_war_league_group/#pyclasher.api.models.clan_war_league_group.ClanWarLeagueClanMemberList","title":"<code>ClanWarLeagueClanMemberList</code>","text":"<p>             Bases: <code>IterBaseModel</code></p> <p>clan war league clan member list model</p> <p>can be iterated over</p> Source code in <code>pyclasher/api/models/clan_war_league_group.py</code> <pre><code>class ClanWarLeagueClanMemberList(IterBaseModel):\n    _iter_rtype = ClanWarLeagueClanMember\n\n    def __getitem__(self, item: int):\n        return super().__getitem__(item)\n\n    def __next__(self):\n        return super().__next__()\n</code></pre>"},{"location":"API%20Reference/api/models/clan_war_league_group/#pyclasher.api.models.clan_war_league_group.ClanWarLeagueGroup","title":"<code>ClanWarLeagueGroup</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>clan war league group model</p> Source code in <code>pyclasher/api/models/clan_war_league_group.py</code> <pre><code>class ClanWarLeagueGroup(BaseModel):\n    def __init__(self, data):\n        super().__init__(data)\n        return\n\n    @property\n    def tag(self):\n        return self._get_data('tag')\n\n    @property\n    def state(self):\n        return ClanWarLeagueGroupState(self._get_data('state'))\n\n    @property\n    def season(self):\n        return self._get_data('season')\n\n    @property\n    def clans(self):\n        return ClanWarLeagueClanList(self._get_data('clans'))\n\n    @property\n    def rounds(self):\n        return ClanWarLeagueRoundList(self._get_data('rounds'))\n</code></pre>"},{"location":"API%20Reference/api/models/clan_war_league_group/#pyclasher.api.models.clan_war_league_group.ClanWarLeagueGroup.clans","title":"<code>clans: ClanWarLeagueClanList</code>  <code>property</code>","text":"<p>group clans</p> <p>:return:    the list of group clans :rtype:     ClanWarLeagueClanList</p>"},{"location":"API%20Reference/api/models/clan_war_league_group/#pyclasher.api.models.clan_war_league_group.ClanWarLeagueGroup.rounds","title":"<code>rounds: ClanWarLeagueRoundList</code>  <code>property</code>","text":"<p>group rounds</p> <p>:return:    the list of group rounds :rtype:     ClanWarLeagueRoundList</p>"},{"location":"API%20Reference/api/models/clan_war_league_group/#pyclasher.api.models.clan_war_league_group.ClanWarLeagueGroup.season","title":"<code>season: str</code>  <code>property</code>","text":"<p>clan war league season</p> <p>:return:    the clan war league season :rtype:     str</p>"},{"location":"API%20Reference/api/models/clan_war_league_group/#pyclasher.api.models.clan_war_league_group.ClanWarLeagueGroup.state","title":"<code>state: ClanWarLeagueGroupState</code>  <code>property</code>","text":"<p>group state</p> <p>:return:    the group state :rtype:     ClanWarLeagueGroupState</p>"},{"location":"API%20Reference/api/models/clan_war_league_group/#pyclasher.api.models.clan_war_league_group.ClanWarLeagueGroup.tag","title":"<code>tag: str</code>  <code>property</code>","text":"<p>group tag</p> <p>:return:    the group tag :rtype:     str</p>"},{"location":"API%20Reference/api/models/clan_war_league_group/#pyclasher.api.models.clan_war_league_group.ClanWarLeagueRound","title":"<code>ClanWarLeagueRound</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>clan war league round model</p> Source code in <code>pyclasher/api/models/clan_war_league_group.py</code> <pre><code>class ClanWarLeagueRound(BaseModel):\n    @property\n    def war_tags(self):\n        return self._get_data('warTags')\n</code></pre>"},{"location":"API%20Reference/api/models/clan_war_league_group/#pyclasher.api.models.clan_war_league_group.ClanWarLeagueRound.war_tags","title":"<code>war_tags: list[str]</code>  <code>property</code>","text":"<p>war tags of the CWL round</p> <p>:return:    the list of war tags :rtype:     list[str]</p>"},{"location":"API%20Reference/api/models/clan_war_league_group/#pyclasher.api.models.clan_war_league_group.ClanWarLeagueRoundList","title":"<code>ClanWarLeagueRoundList</code>","text":"<p>             Bases: <code>IterBaseModel</code></p> <p>clan war league round list model</p> <p>can be iterated over</p> Source code in <code>pyclasher/api/models/clan_war_league_group.py</code> <pre><code>class ClanWarLeagueRoundList(IterBaseModel):\n    _iter_rtype = ClanWarLeagueRound\n\n    def __getitem__(self, item: int):\n        return super().__getitem__(item)\n\n    def __next__(self):\n        return super().__next__()\n</code></pre>"},{"location":"API%20Reference/api/models/clan_war_log/","title":"Clan war log","text":""},{"location":"API%20Reference/api/models/clan_war_log/#pyclasher.api.models.clan_war_log.ClanWarLog","title":"<code>ClanWarLog</code>","text":"<p>             Bases: <code>IterBaseModel</code></p> <p>clan war log model</p> <p>can be iterated over</p> Source code in <code>pyclasher/api/models/clan_war_log.py</code> <pre><code>class ClanWarLog(IterBaseModel):\n    _iter_rtype = ClanWarLogEntry\n    __Criteria = Literal[\"team_size\", \"attacks_per_member\", \"result\"]\n\n    @property\n    def average_team_size(self):\n        try:\n            return sum((war.team_size for war in self\n                        if war.attacks_per_member == 2)) / len(self)\n        except ZeroDivisionError:\n            return None\n\n    @property\n    def average_destruction_percentage(self):\n        try:\n            return sum((war.clan.destruction_percentage for war in self\n                        if war.attacks_per_member == 2)) / len(self)\n        except ZeroDivisionError:\n            return None\n\n    @property\n    def average_attacks(self):\n        try:\n            return sum((war.clan.attacks for war in self\n                        if war.attacks_per_member == 2)) / len(self)\n        except ZeroDivisionError:\n            return None\n\n    @property\n    def average_stars(self):\n        try:\n            return sum((war.clan.stars for war in self\n                        if war.attacks_per_member == 2)) / len(self)\n        except ZeroDivisionError:\n            return None\n\n    @property\n    def average_exp_earned(self):\n        try:\n            return sum((war.clan.exp_earned for war in self\n                        if war.attacks_per_member == 2)) / len(self)\n        except ZeroDivisionError:\n            return None\n\n    @staticmethod\n    def __sort_key(item, key):\n        if key == \"result\":\n            if item[snake_to_camel(key)] == ClanWarResult.WIN.value:\n                return 3\n            if item[snake_to_camel(key)] == ClanWarResult.LOSE.value:\n                return 1\n            if item[snake_to_camel(key)] == ClanWarResult.TIE.value:\n                return 2\n            if item[snake_to_camel(key)] == ClanWarResult.NONE.value:\n                return 0\n        else:\n            return item[snake_to_camel(key)]\n\n    def sort(self, criteria, descending=True):\n        if not isinstance(self.to_dict_list(), list):\n            raise PyClasherException(\"no value for `self._data`\")\n        self._data = sorted(self._data,\n                            key=lambda war:  self.__sort_key(war, criteria),\n                            reverse=descending)\n        return\n\n    def filter(self, criteria, value):\n        if isinstance(value, ClanWarResult):\n            value = value.value\n\n        self._data = [war\n                      for war in self.to_dict_list()\n                      if war[snake_to_camel(criteria)] == value]\n        return\n</code></pre>"},{"location":"API%20Reference/api/models/clan_war_log/#pyclasher.api.models.clan_war_log.ClanWarLogEntry","title":"<code>ClanWarLogEntry</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>clan war log entry model</p> Source code in <code>pyclasher/api/models/clan_war_log.py</code> <pre><code>class ClanWarLogEntry(BaseModel):\n    @property\n    def clan(self):\n        return WarClan(self._get_data('clan'))\n\n    @property\n    def opponent(self):\n        return WarClan(self._get_data('opponent'))\n\n    @property\n    def team_size(self):\n        return self._get_data('teamSize')\n\n    @property\n    def attacks_per_member(self):\n        return self._get_data('attacksPerMember')\n\n    @property\n    def end_time(self):\n        return Time.from_str(self._get_data('endTime'))\n\n    @property\n    def result(self):\n        return ClanWarResult(self._get_data('result'))\n</code></pre>"},{"location":"API%20Reference/api/models/clan_war_log/#pyclasher.api.models.clan_war_log.ClanWarLogEntry.attacks_per_member","title":"<code>attacks_per_member: int</code>  <code>property</code>","text":"<p>attack count per member</p> <p>:return:    the attack count per member (usually 2 for regular war and 1 for clan war league) :rtype:     int</p>"},{"location":"API%20Reference/api/models/clan_war_log/#pyclasher.api.models.clan_war_log.ClanWarLogEntry.clan","title":"<code>clan: WarClan</code>  <code>property</code>","text":"<p>clan of the clan war</p> <p>:return:    the clan of the clan war :rtype:     WarClan</p>"},{"location":"API%20Reference/api/models/clan_war_log/#pyclasher.api.models.clan_war_log.ClanWarLogEntry.end_time","title":"<code>end_time: Time</code>  <code>property</code>","text":"<p>end time of the clan war</p> <p>:return:    the end time of the clan war :rtype:     Time</p>"},{"location":"API%20Reference/api/models/clan_war_log/#pyclasher.api.models.clan_war_log.ClanWarLogEntry.opponent","title":"<code>opponent: WarClan</code>  <code>property</code>","text":"<p>opponent of the clan war</p> <p>:return:    the opponent of the clan war :rtype:     WarClan</p>"},{"location":"API%20Reference/api/models/clan_war_log/#pyclasher.api.models.clan_war_log.ClanWarLogEntry.result","title":"<code>result: ClanWarResult</code>  <code>property</code>","text":"<p>result of the clan war</p> <p>:return:    the result of the clan war :rtype:     ClanWarResult</p>"},{"location":"API%20Reference/api/models/clan_war_log/#pyclasher.api.models.clan_war_log.ClanWarLogEntry.team_size","title":"<code>team_size: int</code>  <code>property</code>","text":"<p>clan war team size</p> <p>:return:    the clan war team size :rtype:     int</p>"},{"location":"API%20Reference/api/models/enums/","title":"Enums","text":""},{"location":"API%20Reference/api/models/enums/#pyclasher.api.models.enums.Languages","title":"<code>Languages</code>","text":"<p>             Bases: <code>Enum</code></p> <p>not implemented yet</p> Source code in <code>pyclasher/api/models/enums.py</code> <pre><code>class Languages(Enum):\n    pass\n</code></pre>"},{"location":"API%20Reference/api/models/gold_pass_season/","title":"Gold pass season","text":""},{"location":"API%20Reference/api/models/gold_pass_season/#pyclasher.api.models.gold_pass_season.GoldPassSeason","title":"<code>GoldPassSeason</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>gold pass season model</p> Source code in <code>pyclasher/api/models/gold_pass_season.py</code> <pre><code>class GoldPassSeason(BaseModel):\n    @property\n    def start_time(self):\n        return Time.from_str(self._get_data('startTime'))\n\n    pass\n\n    @property\n    def end_time(self):\n        return Time.from_str(self._get_data('endTime'))\n</code></pre>"},{"location":"API%20Reference/api/models/gold_pass_season/#pyclasher.api.models.gold_pass_season.GoldPassSeason.end_time","title":"<code>end_time: Time</code>  <code>property</code>","text":"<p>gold pass end time</p> <p>:return:    the gold pass end time :rtype:     Time</p>"},{"location":"API%20Reference/api/models/gold_pass_season/#pyclasher.api.models.gold_pass_season.GoldPassSeason.start_time","title":"<code>start_time: Time</code>  <code>property</code>","text":"<p>gold pass start time</p> <p>:return:    the gold pass start time :rtype:     Time</p>"},{"location":"API%20Reference/api/models/labels/","title":"Labels","text":""},{"location":"API%20Reference/api/models/labels/#pyclasher.api.models.labels.Label","title":"<code>Label</code>","text":"<p>             Bases: <code>BaseModel</code></p> Source code in <code>pyclasher/api/models/labels.py</code> <pre><code>class Label(BaseModel):\n    def __init__(self, data):\n        super().__init__(data)\n        return\n\n    @property\n    def name(self):\n        return self._get_data('name')\n\n    @property\n    def id(self):\n        return self._get_data('id')\n\n    @property\n    def icon_urls(self):\n        return IconUrls(self._get_data('iconUrls'))\n</code></pre>"},{"location":"API%20Reference/api/models/labels/#pyclasher.api.models.labels.Label.icon_urls","title":"<code>icon_urls: IconUrls</code>  <code>property</code>","text":"<p>label icon URLs</p> <p>:return:    the icon URLs of the label :rtype:     IconUrls</p>"},{"location":"API%20Reference/api/models/labels/#pyclasher.api.models.labels.Label.id","title":"<code>id: int</code>  <code>property</code>","text":"<p>label ID</p> <p>:return:    the ID of the label :rtype:     int</p>"},{"location":"API%20Reference/api/models/labels/#pyclasher.api.models.labels.Label.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>label name</p> <p>:return:    the name of the label :rtype:     str</p>"},{"location":"API%20Reference/api/models/labels/#pyclasher.api.models.labels.LabelList","title":"<code>LabelList</code>","text":"<p>             Bases: <code>IterBaseModel</code></p> <p>label list model</p> <p>Holds information about the clan labels</p> <p>can be iterated over</p> Source code in <code>pyclasher/api/models/labels.py</code> <pre><code>class LabelList(IterBaseModel):\n    _iter_rtype = Label\n</code></pre>"},{"location":"API%20Reference/api/models/language/","title":"Language","text":""},{"location":"API%20Reference/api/models/language/#pyclasher.api.models.language.Language","title":"<code>Language</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>language model</p> Source code in <code>pyclasher/api/models/language.py</code> <pre><code>class Language(BaseModel):\n    def __init__(self, data: dict):\n        super().__init__(data)\n        return\n\n    @property\n    def name(self):\n        return self._get_data('name')\n\n    @property\n    def id(self):\n        return self._get_data('id')\n\n    @property\n    def language_code(self):\n        return self._get_data('languageCode')\n</code></pre>"},{"location":"API%20Reference/api/models/language/#pyclasher.api.models.language.Language.id","title":"<code>id: int</code>  <code>property</code>","text":"<p>getter of the language id</p> <p>:return:    the language id :rtype:     str</p>"},{"location":"API%20Reference/api/models/language/#pyclasher.api.models.language.Language.language_code","title":"<code>language_code: str</code>  <code>property</code>","text":"<p>getter of the language code</p> <p>:return:    the language code :rtype:     str</p>"},{"location":"API%20Reference/api/models/language/#pyclasher.api.models.language.Language.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>getter of the language name</p> <p>:return:    the language name :rtype:     str</p>"},{"location":"API%20Reference/api/models/leagues/","title":"Leagues","text":"<p>models concerning the leagues</p>"},{"location":"API%20Reference/api/models/leagues/#pyclasher.api.models.leagues.BuilderBaseLeague","title":"<code>BuilderBaseLeague</code>","text":"<p>             Bases: <code>BaseLeague</code></p> <p>builder base league model</p> Source code in <code>pyclasher/api/models/leagues.py</code> <pre><code>class BuilderBaseLeague(BaseLeague):\n    pass\n</code></pre>"},{"location":"API%20Reference/api/models/leagues/#pyclasher.api.models.leagues.BuilderBaseLeagueList","title":"<code>BuilderBaseLeagueList</code>","text":"<p>             Bases: <code>IterBaseModel</code></p> <p>builder base league list model</p> <p>can be iterated over</p> Source code in <code>pyclasher/api/models/leagues.py</code> <pre><code>class BuilderBaseLeagueList(IterBaseModel):\n    _iter_rtype = BuilderBaseLeague\n\n    def __getitem__(self, item):\n        return super().__getitem__(item)\n\n    def __next__(self):\n        return super().__next__()\n</code></pre>"},{"location":"API%20Reference/api/models/leagues/#pyclasher.api.models.leagues.CapitalLeague","title":"<code>CapitalLeague</code>","text":"<p>             Bases: <code>BaseLeague</code></p> <p>capital league model</p> Source code in <code>pyclasher/api/models/leagues.py</code> <pre><code>class CapitalLeague(BaseLeague):\n    pass\n</code></pre>"},{"location":"API%20Reference/api/models/leagues/#pyclasher.api.models.leagues.CapitalLeagueList","title":"<code>CapitalLeagueList</code>","text":"<p>             Bases: <code>IterBaseModel</code></p> <p>capital league list model</p> <p>can be iterated over</p> Source code in <code>pyclasher/api/models/leagues.py</code> <pre><code>class CapitalLeagueList(IterBaseModel):\n    _iter_rtype = CapitalLeague\n</code></pre>"},{"location":"API%20Reference/api/models/leagues/#pyclasher.api.models.leagues.League","title":"<code>League</code>","text":"<p>             Bases: <code>BaseLeague</code></p> <p>league model</p> Source code in <code>pyclasher/api/models/leagues.py</code> <pre><code>class League(BaseLeague):\n    @property\n    def icon_urls(self):\n        return IconUrls(self._get_data('iconUrls'))\n</code></pre>"},{"location":"API%20Reference/api/models/leagues/#pyclasher.api.models.leagues.League.icon_urls","title":"<code>icon_urls: IconUrls</code>  <code>property</code>","text":"<p>icon URLs of the league</p> <p>:return:    the icon URLs of the league :rtype:     IconUrls</p>"},{"location":"API%20Reference/api/models/leagues/#pyclasher.api.models.leagues.LeagueList","title":"<code>LeagueList</code>","text":"<p>             Bases: <code>IterBaseModel</code></p> <p>league list model</p> <p>can be iterated over</p> Source code in <code>pyclasher/api/models/leagues.py</code> <pre><code>class LeagueList(IterBaseModel):\n    _iter_rtype = League\n</code></pre>"},{"location":"API%20Reference/api/models/leagues/#pyclasher.api.models.leagues.LeagueSeason","title":"<code>LeagueSeason</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>league season model</p> Source code in <code>pyclasher/api/models/leagues.py</code> <pre><code>class LeagueSeason(BaseModel):\n    def __init__(self, data):\n        super().__init__(data)\n        return\n\n    @property\n    def id(self):\n        return self._get_data('id')\n\n    pass\n</code></pre>"},{"location":"API%20Reference/api/models/leagues/#pyclasher.api.models.leagues.LeagueSeason.id","title":"<code>id: str</code>  <code>property</code>","text":"<p>season ID</p> <p>:return:    the ID of the season :rtype:     str</p>"},{"location":"API%20Reference/api/models/leagues/#pyclasher.api.models.leagues.LeagueSeasonList","title":"<code>LeagueSeasonList</code>","text":"<p>             Bases: <code>IterBaseModel</code></p> <p>league season list model</p> <p>can be iterated over</p> Source code in <code>pyclasher/api/models/leagues.py</code> <pre><code>class LeagueSeasonList(IterBaseModel):\n    _iter_rtype = LeagueSeason\n</code></pre>"},{"location":"API%20Reference/api/models/leagues/#pyclasher.api.models.leagues.WarLeague","title":"<code>WarLeague</code>","text":"<p>             Bases: <code>BaseLeague</code></p> <p>war league model</p> Source code in <code>pyclasher/api/models/leagues.py</code> <pre><code>class WarLeague(BaseLeague):\n    pass\n</code></pre>"},{"location":"API%20Reference/api/models/leagues/#pyclasher.api.models.leagues.WarLeagueList","title":"<code>WarLeagueList</code>","text":"<p>             Bases: <code>IterBaseModel</code></p> <p>war league list model</p> <p>can be iterated over</p> Source code in <code>pyclasher/api/models/leagues.py</code> <pre><code>class WarLeagueList(IterBaseModel):\n    _iter_rtype = WarLeague\n</code></pre>"},{"location":"API%20Reference/api/models/location/","title":"Location","text":"<p>models concerning the location</p>"},{"location":"API%20Reference/api/models/location/#pyclasher.api.models.location.Location","title":"<code>Location</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>location model</p> Source code in <code>pyclasher/api/models/location.py</code> <pre><code>class Location(BaseModel):\n    def __init__(self, data):\n        super().__init__(data)\n        return\n\n    @property\n    def localized_name(self):\n        return self._get_data('localizedName')\n\n    @property\n    def id(self):\n        return self._get_data('id')\n\n    @property\n    def name(self):\n        return self._get_data('name')\n\n    @property\n    def country_code(self):\n        return self._get_data('countryCode')\n</code></pre>"},{"location":"API%20Reference/api/models/location/#pyclasher.api.models.location.Location.country_code","title":"<code>country_code: Missing | str</code>  <code>property</code>","text":"<p>location country code</p> <p>:return:    the country code of the location if available :rtype:     int | MISSING</p>"},{"location":"API%20Reference/api/models/location/#pyclasher.api.models.location.Location.id","title":"<code>id: int</code>  <code>property</code>","text":"<p>location ID</p> <p>:return:    the ID of the location :rtype:     int</p>"},{"location":"API%20Reference/api/models/location/#pyclasher.api.models.location.Location.localized_name","title":"<code>localized_name: str</code>  <code>property</code>","text":"<p>localized name of the location</p> <p>:return:    the location's localized name :rtype:     str</p>"},{"location":"API%20Reference/api/models/location/#pyclasher.api.models.location.Location.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>location name</p> <p>:return:    the name of the location :rtype:     str</p>"},{"location":"API%20Reference/api/models/location/#pyclasher.api.models.location.LocationList","title":"<code>LocationList</code>","text":"<p>             Bases: <code>IterBaseModel</code></p> <p>location list model</p> <p>can be iterated over</p> Source code in <code>pyclasher/api/models/location.py</code> <pre><code>class LocationList(IterBaseModel):\n    _iter_rtype = Location\n</code></pre>"},{"location":"API%20Reference/api/models/player/","title":"Player","text":""},{"location":"API%20Reference/api/models/player/#pyclasher.api.models.player.LegendLeagueTournamentSeasonResult","title":"<code>LegendLeagueTournamentSeasonResult</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>legend league tournament season result model</p> Source code in <code>pyclasher/api/models/player.py</code> <pre><code>class LegendLeagueTournamentSeasonResult(BaseModel):\n    def __init__(self, data):\n        super().__init__(data)\n        return\n\n    @property\n    def trophies(self):\n        return self._get_data('trophies')\n\n    @property\n    def id(self):\n        return self._get_data('id')\n\n    @property\n    def rank(self):\n        return self._get_data('rank')\n</code></pre>"},{"location":"API%20Reference/api/models/player/#pyclasher.api.models.player.LegendLeagueTournamentSeasonResult.id","title":"<code>id: str</code>  <code>property</code>","text":"<p>season ID</p> <p>:return:    the ID of the season :rtype:     str</p>"},{"location":"API%20Reference/api/models/player/#pyclasher.api.models.player.LegendLeagueTournamentSeasonResult.rank","title":"<code>rank: int</code>  <code>property</code>","text":"<p>rank of the season</p> <p>:return:    the rank of the season :rtype:     int</p>"},{"location":"API%20Reference/api/models/player/#pyclasher.api.models.player.LegendLeagueTournamentSeasonResult.trophies","title":"<code>trophies: int</code>  <code>property</code>","text":"<p>trophy score of the season</p> <p>:return:    the trophy score of the season of the player :rtype:     int</p>"},{"location":"API%20Reference/api/models/player/#pyclasher.api.models.player.PlayerClan","title":"<code>PlayerClan</code>","text":"<p>             Bases: <code>BaseClan</code></p> <p>player clan model</p> <p>clan model found in the player response</p> Source code in <code>pyclasher/api/models/player.py</code> <pre><code>class PlayerClan(BaseClan):\n    @property\n    def clan_level(self):\n        return self._get_data('clanLevel')\n</code></pre>"},{"location":"API%20Reference/api/models/player/#pyclasher.api.models.player.PlayerClan.clan_level","title":"<code>clan_level: int</code>  <code>property</code>","text":"<p>clan level</p> <p>:return:    the level of the clan :rtype:     int</p>"},{"location":"API%20Reference/api/models/player/#pyclasher.api.models.player.PlayerLegendStatistics","title":"<code>PlayerLegendStatistics</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>player legend statistics model</p> Source code in <code>pyclasher/api/models/player.py</code> <pre><code>class PlayerLegendStatistics(BaseModel):\n    @property\n    def best_season(self):\n        return LegendLeagueTournamentSeasonResult(self._get_data('bestSeason'))\n\n    @property\n    def current_season(self):\n        return LegendLeagueTournamentSeasonResult(\n            self._get_data('currentSeason')\n        )\n\n    @property\n    def previous_season(self):\n        return LegendLeagueTournamentSeasonResult(\n            self._get_data('previousSeason')\n        )\n\n    @property\n    def previous_builder_base_season(self):\n        return LegendLeagueTournamentSeasonResult(\n            self._get_data('previousBuilderBaseSeason')\n        )\n\n    @property\n    def previous_versus_season(self):\n        return LegendLeagueTournamentSeasonResult(\n            self._get_data('previousVersusSeason')\n        )\n\n    @property\n    def best_builder_base_season(self):\n        return LegendLeagueTournamentSeasonResult(\n            self._get_data('bestBuilderBaseSeason')\n        )\n\n    @property\n    def best_versus_season(self):\n        return LegendLeagueTournamentSeasonResult(\n            self._get_data('bestVersusSeason')\n        )\n\n    @property\n    def legend_trophies(self):\n        return self._get_data('legendTrophies')\n</code></pre>"},{"location":"API%20Reference/api/models/player_builder_base_ranking_list/","title":"Player builder base ranking list","text":""},{"location":"API%20Reference/api/models/player_house/","title":"Player house","text":""},{"location":"API%20Reference/api/models/player_ranking_clan/","title":"Player ranking clan","text":""},{"location":"API%20Reference/api/models/player_ranking_list/","title":"Player ranking list","text":""},{"location":"API%20Reference/api/models/season/","title":"Season","text":""},{"location":"API%20Reference/api/models/war_clan/","title":"War clan","text":""},{"location":"API%20Reference/api/models/login/login_models/","title":"Login models","text":""},{"location":"API%20Reference/api/models/login/login_models/#pyclasher.api.models.login.login_models.Auth","title":"<code>Auth</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>class representing the authentication of the ClashOfClans API login</p> Source code in <code>pyclasher/api/models/login/login_models.py</code> <pre><code>class Auth(BaseModel):\n    def __init__(self, data):\n        super().__init__(data)\n        return\n\n    @property\n    def uid(self):\n        return self._get_data('uid')\n\n    @property\n    def token(self):\n        return self._get_data('token')\n\n    @property\n    def ua(self):\n        return self._get_data('ua')\n\n    @property\n    def ip(self):\n        return self._get_data('ip')\n</code></pre>"},{"location":"API%20Reference/api/models/login/login_models/#pyclasher.api.models.login.login_models.Auth.token","title":"<code>token: str</code>  <code>property</code>","text":"<p>user token</p> <p>:return:    the user token :rtype:     str</p>"},{"location":"API%20Reference/api/models/login/login_models/#pyclasher.api.models.login.login_models.Auth.ua","title":"<code>ua</code>  <code>property</code>","text":"<p>user agent of the authentication</p> <p>:return:    the user agent of the authentication</p>"},{"location":"API%20Reference/api/models/login/login_models/#pyclasher.api.models.login.login_models.Auth.uid","title":"<code>uid: str</code>  <code>property</code>","text":"<p>user id of the authentication</p> <p>:return:    the user id :rtype:     str</p>"},{"location":"API%20Reference/api/models/login/login_models/#pyclasher.api.models.login.login_models.Developer","title":"<code>Developer</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>class representing the developer that logged in via the ClashOfClans login API</p> Source code in <code>pyclasher/api/models/login/login_models.py</code> <pre><code>class Developer(BaseModel):\n    @property\n    def id(self):\n        return self._get_data('id')\n\n    @property\n    def name(self):\n        return self._get_data('name')\n\n    @property\n    def game(self):\n        return self._get_data('game')\n\n    @property\n    def email(self):\n        return self._get_data('email')\n\n    @property\n    def tier(self):\n        return self._get_data('tier')\n\n    @property\n    def allowed_scopes(self):\n        return self._get_data('allowedScopes')\n\n    @property\n    def max_cidrs(self):\n        return self._get_data('maxCidrs')\n\n    @property\n    def prev_login_ts(self):\n        return self._get_data('prevLoginTs')\n\n    @property\n    def prev_login_ip(self):\n        return self._get_data('prevLoginIp')\n\n    @property\n    def prev_login_ua(self):\n        return self._get_data('prevLoginUa')\n</code></pre>"},{"location":"API%20Reference/api/models/login/login_models/#pyclasher.api.models.login.login_models.Developer.allowed_scopes","title":"<code>allowed_scopes</code>  <code>property</code>","text":"<p>allowed scopes of the developer</p> <p>:return:    the developer's allowed scopes</p>"},{"location":"API%20Reference/api/models/login/login_models/#pyclasher.api.models.login.login_models.Developer.email","title":"<code>email: str</code>  <code>property</code>","text":"<p>email address of the developer</p> <p>:return:    the developer's email address :rtype:     str</p>"},{"location":"API%20Reference/api/models/login/login_models/#pyclasher.api.models.login.login_models.Developer.game","title":"<code>game: str</code>  <code>property</code>","text":"<p>game of the developer</p> <p>:return:    the developer's name :rtype:     str</p>"},{"location":"API%20Reference/api/models/login/login_models/#pyclasher.api.models.login.login_models.Developer.id","title":"<code>id: str</code>  <code>property</code>","text":"<p>id of the developer</p> <p>:return:    the developer's id :rtype:     str</p>"},{"location":"API%20Reference/api/models/login/login_models/#pyclasher.api.models.login.login_models.Developer.max_cidrs","title":"<code>max_cidrs</code>  <code>property</code>","text":"<p>max cidrs of the developer</p> <p>:return:    the developer's max cidrs</p>"},{"location":"API%20Reference/api/models/login/login_models/#pyclasher.api.models.login.login_models.Developer.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>name of the developer</p> <p>:return:    the developer's name :rtype:     str</p>"},{"location":"API%20Reference/api/models/login/login_models/#pyclasher.api.models.login.login_models.Developer.prev_login_ip","title":"<code>prev_login_ip: str</code>  <code>property</code>","text":"<p>previous login ip address of the developer</p> <p>:return:    the developer's previous login ip address :rtype:     str</p>"},{"location":"API%20Reference/api/models/login/login_models/#pyclasher.api.models.login.login_models.Developer.prev_login_ts","title":"<code>prev_login_ts: str</code>  <code>property</code>","text":"<p>previous login timestamp of the developer</p> <p>:return:    the developer's previous login timestamp :rtype:     str</p>"},{"location":"API%20Reference/api/models/login/login_models/#pyclasher.api.models.login.login_models.Developer.prev_login_ua","title":"<code>prev_login_ua: str</code>  <code>property</code>","text":"<p>previous login user agent of the developer</p> <p>:return:    the developer's previous login user agent :rtype:     str</p>"},{"location":"API%20Reference/api/models/login/login_models/#pyclasher.api.models.login.login_models.Developer.tier","title":"<code>tier: str</code>  <code>property</code>","text":"<p>tier of the developer</p> <p>:return:    the developer's tier :rtype:     str</p>"},{"location":"API%20Reference/api/models/login/login_models/#pyclasher.api.models.login.login_models.LoginModel","title":"<code>LoginModel</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>login model class</p> Source code in <code>pyclasher/api/models/login/login_models.py</code> <pre><code>class LoginModel(BaseModel):\n    @property\n    def status(self):\n        return Status(self._get_data('status'))\n\n    @property\n    def session_expires_in_seconds(self):\n        return self._get_data('sessionExpiresInSeconds')\n\n    @property\n    def auth(self):\n        return Auth(self._get_data('auth'))\n\n    @property\n    def developer(self):\n        return Developer(self._get_data('developer'))\n\n    @property\n    def temporary_api_token(self):\n        return self._get_data('temporaryAPIToken')\n\n    @property\n    def swagger_url(self):\n        return self._get_data('swaggerUrl')\n</code></pre>"},{"location":"API%20Reference/api/models/login/login_models/#pyclasher.api.models.login.login_models.LoginModel.auth","title":"<code>auth: Auth</code>  <code>property</code>","text":"<p>login authentication</p> <p>:return:    the login's authentication :rtype:     Auth</p>"},{"location":"API%20Reference/api/models/login/login_models/#pyclasher.api.models.login.login_models.LoginModel.developer","title":"<code>developer: Developer</code>  <code>property</code>","text":"<p>developer of the login</p> <p>:return:    the developer that logged in :rtype:     Developer</p>"},{"location":"API%20Reference/api/models/login/login_models/#pyclasher.api.models.login.login_models.LoginModel.session_expires_in_seconds","title":"<code>session_expires_in_seconds: int</code>  <code>property</code>","text":"<p>expiration duration of the login in seconds</p> <p>:return:    the login's expiration duration in seconds :rtype:     int</p>"},{"location":"API%20Reference/api/models/login/login_models/#pyclasher.api.models.login.login_models.LoginModel.status","title":"<code>status: Status</code>  <code>property</code>","text":"<p>login status</p> <p>:return:    the login status :rtype:     Status</p>"},{"location":"API%20Reference/api/models/login/login_models/#pyclasher.api.models.login.login_models.LoginModel.swagger_url","title":"<code>swagger_url: str</code>  <code>property</code>","text":"<p>swagger URL (usually https://api.clashofclans.com/v1)</p> <p>:return:    the swagger URL :rtype:     str</p>"},{"location":"API%20Reference/api/models/login/login_models/#pyclasher.api.models.login.login_models.LoginModel.temporary_api_token","title":"<code>temporary_api_token: str</code>  <code>property</code>","text":"<p>returned temporary API token</p> <p>:return:    the returned temporary API token :rtype:     str</p>"},{"location":"API%20Reference/api/models/login/login_models/#pyclasher.api.models.login.login_models.Status","title":"<code>Status</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>class representing the status of the ClashOfClans API login</p> Source code in <code>pyclasher/api/models/login/login_models.py</code> <pre><code>class Status(BaseModel):\n\"\"\"\n    class representing the status of the ClashOfClans API login\n    \"\"\"\n\n    @property\n    def code(self):\n        return self._get_data('code')\n\n    @property\n    def message(self):\n        return self._get_data('message')\n\n    @property\n    def detail(self):\n        return self._get_data('detail')\n</code></pre>"},{"location":"API%20Reference/api/models/login/login_models/#pyclasher.api.models.login.login_models.Status.code","title":"<code>code: int</code>  <code>property</code>","text":"<p>status code</p> <p>:return:    the status code :rtype:     int</p>"},{"location":"API%20Reference/api/models/login/login_models/#pyclasher.api.models.login.login_models.Status.message","title":"<code>message: str</code>  <code>property</code>","text":"<p>status message</p> <p>:return:    the status message :rtype:     str</p>"},{"location":"API%20Reference/api/models/misc/api/","title":"Api","text":"<p>models concerning the ClashOfClans API responses</p>"},{"location":"API%20Reference/api/models/misc/api/#pyclasher.api.models.misc.api.ClientError","title":"<code>ClientError</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>client error model</p> Source code in <code>pyclasher/api/models/misc/api.py</code> <pre><code>class ClientError(BaseModel):\n    def __init__(self, data):\n        super().__init__(data)\n        return\n\n    @property\n    def reason(self):\n        return self._get_data('reason')\n\n    @property\n    def message(self):\n        return self._get_data('message')\n\n    @property\n    def type(self):\n        return self._get_data('type')\n\n    @property\n    def detail(self):\n        return self._get_data('detail')\n</code></pre>"},{"location":"API%20Reference/api/models/misc/api/#pyclasher.api.models.misc.api.ClientError.detail","title":"<code>detail: Missing | str</code>  <code>property</code>","text":"<p>detail(s) about the client error</p> <p>:return:    the detail(s) about the client error :rtype:     str | Missing</p>"},{"location":"API%20Reference/api/models/misc/api/#pyclasher.api.models.misc.api.ClientError.message","title":"<code>message: Missing | str</code>  <code>property</code>","text":"<p>message of the client error</p> <p>:return:    the message of the client error :rtype:     str | Missing</p>"},{"location":"API%20Reference/api/models/misc/api/#pyclasher.api.models.misc.api.ClientError.reason","title":"<code>reason: str</code>  <code>property</code>","text":"<p>reason of the client error</p> <p>:return:    the reason of the client error :rtype:     str</p>"},{"location":"API%20Reference/api/models/misc/api/#pyclasher.api.models.misc.api.ClientError.type","title":"<code>type: Missing | str</code>  <code>property</code>","text":"<p>type of the client error</p> <p>:return:    the type of the client error :rtype:     str | Missing</p>"},{"location":"API%20Reference/api/models/misc/api/#pyclasher.api.models.misc.api.Replay","title":"<code>Replay</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Usage not defined in the ClashOfClans API documentation. Do not use it if you do not need to.</p> Source code in <code>pyclasher/api/models/misc/api.py</code> <pre><code>class Replay(BaseModel):\n\"\"\"Usage not defined in the ClashOfClans API documentation. Do not use it if you do not need to.\"\"\"\n\n    def __init__(self, data):\n        super().__init__(data)\n        return\n\n    @property\n    def replay_data(self):\n        return self._get_data('replayData')\n\n    @property\n    def replay_tag(self):\n        return self._get_data('replayTag')\n</code></pre>"},{"location":"API%20Reference/api/models/misc/api/#pyclasher.api.models.misc.api.ServiceVersion","title":"<code>ServiceVersion</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>Usage not defined in the ClashOfClans API documentation. Do not use it if you do not need to.</p> Source code in <code>pyclasher/api/models/misc/api.py</code> <pre><code>class ServiceVersion(BaseModel):\n\"\"\"Usage not defined in the ClashOfClans API documentation. Do not use it if you do not need to.\"\"\"\n\n    def __init__(self, data):\n        super().__init__(data)\n        return\n\n    @property\n    def major(self):\n        return self._get_data('major')\n\n    @property\n    def minor(self):\n        return self._get_data('minor')\n\n    @property\n    def content(self):\n        return self._get_data('content')\n</code></pre>"},{"location":"API%20Reference/api/models/misc/posts/","title":"Posts","text":""},{"location":"API%20Reference/api/models/misc/posts/#pyclasher.api.models.misc.posts.DeepLinkCreationRequest","title":"<code>DeepLinkCreationRequest</code>","text":"<p>deep link creation request model</p> <p>:ivar   player_tags:        list of player tags :type   player_tags:        list[str] :ivar   clan_tag:           clan tag :type   clan_tag:           str :ivar   opponent_clan_tag:  opponent clan tag :type   opponent_clan_tag:  str</p> Source code in <code>pyclasher/api/models/misc/posts.py</code> <pre><code>class DeepLinkCreationRequest:\n    def __init__(self, player_tags, clan_tag, opponent_clan_tag):\n        self.player_tags = player_tags\n        self.clan_tag = clan_tag\n        self.opponent_clan_tag = opponent_clan_tag\n        return\n</code></pre>"},{"location":"API%20Reference/api/models/misc/posts/#pyclasher.api.models.misc.posts.DeepLinkCreationRequest.__init__","title":"<code>__init__(player_tags, clan_tag, opponent_clan_tag)</code>","text":"<p>initialisation of the deep link creation request model</p> <p>:param  player_tags:        list of player tags :type   player_tags:        list[str] :param  clan_tag:           clan tag :type   clan_tag:           str :param  opponent_clan_tag:  opponent clan tag :type   opponent_clan_tag:  str :return:                    None :rtype:                     None</p> Source code in <code>pyclasher/api/models/misc/posts.py</code> <pre><code>def __init__(self, player_tags, clan_tag, opponent_clan_tag):\n    self.player_tags = player_tags\n    self.clan_tag = clan_tag\n    self.opponent_clan_tag = opponent_clan_tag\n    return\n</code></pre>"},{"location":"API%20Reference/api/models/misc/posts/#pyclasher.api.models.misc.posts.VerifyTokenRequest","title":"<code>VerifyTokenRequest</code>","text":"<p>verify token request model</p> Source code in <code>pyclasher/api/models/misc/posts.py</code> <pre><code>class VerifyTokenRequest:\n    def __init__(self, token):\n        self.token = token\n        return\n\n    def to_dict(self):\n        return {'token': self.token}\n\n    def __str__(self):\n        return f\"VerifyTokenRequest({self.token})\"\n\n    def __repr__(self):\n        return f\"VerifyTokenRequest(token={self.token}, dict={self.to_dict()})\"\n</code></pre>"},{"location":"API%20Reference/api/models/misc/posts/#pyclasher.api.models.misc.posts.VerifyTokenRequest.__init__","title":"<code>__init__(token)</code>","text":"<p>initialisation of the verify token request model</p> <p>:return:    None :rtype:     None</p> Source code in <code>pyclasher/api/models/misc/posts.py</code> <pre><code>def __init__(self, token):\n    self.token = token\n    return\n</code></pre>"},{"location":"API%20Reference/api/models/misc/posts/#pyclasher.api.models.misc.posts.VerifyTokenRequest.to_dict","title":"<code>to_dict()</code>","text":"<p>function that returns the dictionary model</p> <p>:return:    the dictionary model :rtype:     dict</p> Source code in <code>pyclasher/api/models/misc/posts.py</code> <pre><code>def to_dict(self):\n    return {'token': self.token}\n</code></pre>"},{"location":"API%20Reference/api/models/misc/responses/","title":"Responses","text":""},{"location":"API%20Reference/api/models/misc/responses/#pyclasher.api.models.misc.responses.VerifyTokenResponse","title":"<code>VerifyTokenResponse</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>response model for the verify token request</p> Source code in <code>pyclasher/api/models/misc/responses.py</code> <pre><code>class VerifyTokenResponse(BaseModel):\n    def __init__(self, data):\n        super().__init__(data)\n        return\n\n    @property\n    def tag(self):\n        return self._get_data('tag')\n\n    @property\n    def token(self):\n        return self._get_data('token')\n\n    @property\n    def status(self):\n        return TokenStatus(self._get_data('status'))\n</code></pre>"},{"location":"API%20Reference/api/models/misc/responses/#pyclasher.api.models.misc.responses.VerifyTokenResponse.status","title":"<code>status: TokenStatus</code>  <code>property</code>","text":"<p>status of the verification process</p> <p>:return:    the status of the verification process :rtype:     str</p>"},{"location":"API%20Reference/api/models/misc/responses/#pyclasher.api.models.misc.responses.VerifyTokenResponse.tag","title":"<code>tag: str</code>  <code>property</code>","text":"<p>tag of the verified player</p> <p>:return:    the tag of the verified player :rtype:     str</p>"},{"location":"API%20Reference/api/models/misc/responses/#pyclasher.api.models.misc.responses.VerifyTokenResponse.token","title":"<code>token: str</code>  <code>property</code>","text":"<p>token of the verified player</p> <p>:return:    the token of the verified player :rtype:     str</p>"},{"location":"API%20Reference/api/models/misc/war_status/","title":"War status","text":""},{"location":"API%20Reference/api/models/misc/war_status/#pyclasher.api.models.misc.war_status.WarStatus","title":"<code>WarStatus</code>","text":"<p>             Bases: <code>BaseModel</code></p> <p>war status model</p> Source code in <code>pyclasher/api/models/misc/war_status.py</code> <pre><code>class WarStatus(BaseModel):\n    def __init__(self, data):\n        super().__init__(data)\n        return\n\n    @property\n    def status_code(self):\n        return self._get_data('statusCode')\n\n    @property\n    def clan_tag(self):\n        return self._get_data('clanTag')\n\n    @property\n    def enemy_clan_tag(self):\n        return self._get_data('enemyClanTag')\n\n    @property\n    def war_state(self):\n        return ClanWarState(self._get_data('warState'))\n\n    @property\n    def timestamp(self):\n        return Time.from_str(self._get_data('timestamp'))\n</code></pre>"},{"location":"API%20Reference/api/models/misc/war_status/#pyclasher.api.models.misc.war_status.WarStatus.clan_tag","title":"<code>clan_tag: str</code>  <code>property</code>","text":"<p>clan_tag code of the war</p> <p>:return:    the clan_tag code of the war :rtype:     str</p>"},{"location":"API%20Reference/api/models/misc/war_status/#pyclasher.api.models.misc.war_status.WarStatus.enemy_clan_tag","title":"<code>enemy_clan_tag: str</code>  <code>property</code>","text":"<p>enemy_clan_tag code of the war</p> <p>:return:    the enemy_clan_tag code of the war :rtype:     str</p>"},{"location":"API%20Reference/api/models/misc/war_status/#pyclasher.api.models.misc.war_status.WarStatus.status_code","title":"<code>status_code: int</code>  <code>property</code>","text":"<p>status code of the war</p> <p>:return:    the status code of the war :rtype:     int</p>"},{"location":"API%20Reference/api/models/misc/war_status/#pyclasher.api.models.misc.war_status.WarStatus.timestamp","title":"<code>timestamp: Time</code>  <code>property</code>","text":"<p>timestamp code of the war</p> <p>:return:    the timestamp code of the war :rtype:     Time</p>"},{"location":"API%20Reference/api/models/misc/war_status/#pyclasher.api.models.misc.war_status.WarStatus.war_state","title":"<code>war_state: ClanWarState</code>  <code>property</code>","text":"<p>war_state code of the war</p> <p>:return:    the war_state code of the war :rtype:     ClanWarState</p>"},{"location":"API%20Reference/api/models/misc/war_status/#pyclasher.api.models.misc.war_status.WarStatusList","title":"<code>WarStatusList</code>","text":"<p>             Bases: <code>IterBaseModel</code></p> <p>war status list model</p> Source code in <code>pyclasher/api/models/misc/war_status.py</code> <pre><code>class WarStatusList(IterBaseModel):\n    _iter_rtype = WarStatus\n</code></pre>"},{"location":"API%20Reference/api/requests/abc/","title":"Abc","text":""},{"location":"API%20Reference/api/requests/abc/#pyclasher.api.requests.abc.RequestModel","title":"<code>RequestModel</code>","text":"<p>class for requesting</p> Source code in <code>pyclasher/api/requests/abc.py</code> <pre><code>class RequestModel:\n\"\"\"\n    class for requesting\n    \"\"\"\n\n    _data = MISSING\n    _url = None\n    _url_kwargs = None\n    _len = None\n\n    def __init__(self,\n                 raw_url,\n                 kwargs=None,\n                 request_method=RequestMethods.REQUEST,\n                 **url_kwargs):\n\"\"\"\n        sets up all parameters for a request\n        :param raw_url:         the url of the request\n        :param kwargs:          dict of kew word arguments that can be encoded in the API request\n        :param request_method:  request method\n        :param url_kwargs:      the url kwargs that are to replace in raw_url\n        \"\"\"\n\n        if Client.initialized():\n            global request_id\n\n            self._request_id = request_id\n            self.client = None\n\n            self._url = raw_url.format(**url_kwargs)\n            self.request_method = request_method\n            self._url_kwargs = kwargs\n\n            request_id += 1\n            return\n\n        raise NoClient\n\n    def to_dict(self):\n        if self._data is MISSING:\n            raise RequestNotDone\n        return self._data\n\n    def __make_request_url(self):\n\"\"\"\n        method that returns the request url\n\n        :return request_url:    full request url\n        :rtype:                 str\n        \"\"\"\n        request_url = \"/\".join((self.client.endpoint, quote(self._url)))\n        if self._url_kwargs is not None:\n            url_args = {\n                key: value\n                for key, value in self._url_kwargs.items()\n                if value is not None\n            }\n            if url_args != {}:\n                request_url = f\"{request_url}?{urlencode(url_args)}\"\n\n        return request_url\n\n    def __get_properties(self):\n        return {\n            name: prop.__get__(self)\n            for name, prop in vars(self.__class__).items()\n            if isinstance(prop, property)\n        }\n\n    def _get_data(self, item):\n        if self._data is None:\n            return None\n        if self._data is MISSING:\n            raise RequestNotDone\n        if item in self._data:\n            return self._data[item]\n        else:\n            return MISSING\n\n    async def request(self, client_id=None):\n\"\"\"\n        makes a request to the ClashOfClans API\n        \"\"\"\n        self.client = Client.get_instance(client_id)\n        if self.client is None:\n            raise NoClient\n        if self.client is MISSING:\n            raise InvalidClientId(f\"Cannot find a client with the client_id \"\n                                  f\"{client_id}.\")\n\n        if not self.client.is_running:\n            raise ClientIsNotRunning\n\n        future, status, error = Future(), Future(), Future()\n\n        self.client.logger.debug(f\"requesting {self._request_id}\")\n\n        await self.client.queue.put(\n            future, self.__make_request_url(),\n            self.request_method, None,\n            status,\n            error\n        )\n\n        self._data, req_status, req_error = (await future,\n                                             await status,\n                                             await error)\n\n        if req_status != 200:\n            raise req_error\n\n        self.client.logger.debug(f\"request {self._request_id} done\")\n\n        self.client = None\n        return self\n\n    async def __aenter__(self):\n        return await self.request()\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        return\n\n    def __repr__(self):\n        props = ', '.join((\n            '='.join((key, str(value)))\n            for key, value in self.__get_properties().items())\n        )\n        return f\"{self.__class__.__name__}({props})\"\n\n    def __str__(self):\n        return f\"{self.__class__.__name__}()\"\n</code></pre>"},{"location":"API%20Reference/api/requests/abc/#pyclasher.api.requests.abc.RequestModel.__init__","title":"<code>__init__(raw_url, kwargs=None, request_method=RequestMethods.REQUEST, **url_kwargs)</code>","text":"<p>sets up all parameters for a request :param raw_url:         the url of the request :param kwargs:          dict of kew word arguments that can be encoded in the API request :param request_method:  request method :param url_kwargs:      the url kwargs that are to replace in raw_url</p> Source code in <code>pyclasher/api/requests/abc.py</code> <pre><code>def __init__(self,\n             raw_url,\n             kwargs=None,\n             request_method=RequestMethods.REQUEST,\n             **url_kwargs):\n\"\"\"\n    sets up all parameters for a request\n    :param raw_url:         the url of the request\n    :param kwargs:          dict of kew word arguments that can be encoded in the API request\n    :param request_method:  request method\n    :param url_kwargs:      the url kwargs that are to replace in raw_url\n    \"\"\"\n\n    if Client.initialized():\n        global request_id\n\n        self._request_id = request_id\n        self.client = None\n\n        self._url = raw_url.format(**url_kwargs)\n        self.request_method = request_method\n        self._url_kwargs = kwargs\n\n        request_id += 1\n        return\n\n    raise NoClient\n</code></pre>"},{"location":"API%20Reference/api/requests/abc/#pyclasher.api.requests.abc.RequestModel.__make_request_url","title":"<code>__make_request_url()</code>","text":"<p>method that returns the request url</p> <p>:return request_url:    full request url :rtype:                 str</p> Source code in <code>pyclasher/api/requests/abc.py</code> <pre><code>def __make_request_url(self):\n\"\"\"\n    method that returns the request url\n\n    :return request_url:    full request url\n    :rtype:                 str\n    \"\"\"\n    request_url = \"/\".join((self.client.endpoint, quote(self._url)))\n    if self._url_kwargs is not None:\n        url_args = {\n            key: value\n            for key, value in self._url_kwargs.items()\n            if value is not None\n        }\n        if url_args != {}:\n            request_url = f\"{request_url}?{urlencode(url_args)}\"\n\n    return request_url\n</code></pre>"},{"location":"API%20Reference/api/requests/abc/#pyclasher.api.requests.abc.RequestModel.request","title":"<code>request(client_id=None)</code>  <code>async</code>","text":"<p>makes a request to the ClashOfClans API</p> Source code in <code>pyclasher/api/requests/abc.py</code> <pre><code>async def request(self, client_id=None):\n\"\"\"\n    makes a request to the ClashOfClans API\n    \"\"\"\n    self.client = Client.get_instance(client_id)\n    if self.client is None:\n        raise NoClient\n    if self.client is MISSING:\n        raise InvalidClientId(f\"Cannot find a client with the client_id \"\n                              f\"{client_id}.\")\n\n    if not self.client.is_running:\n        raise ClientIsNotRunning\n\n    future, status, error = Future(), Future(), Future()\n\n    self.client.logger.debug(f\"requesting {self._request_id}\")\n\n    await self.client.queue.put(\n        future, self.__make_request_url(),\n        self.request_method, None,\n        status,\n        error\n    )\n\n    self._data, req_status, req_error = (await future,\n                                         await status,\n                                         await error)\n\n    if req_status != 200:\n        raise req_error\n\n    self.client.logger.debug(f\"request {self._request_id} done\")\n\n    self.client = None\n    return self\n</code></pre>"},{"location":"API%20Reference/api/requests/builder_base_league/","title":"Builder base league","text":""},{"location":"API%20Reference/api/requests/builder_base_leagues/","title":"Builder base leagues","text":""},{"location":"API%20Reference/api/requests/capital_league/","title":"Capital league","text":""},{"location":"API%20Reference/api/requests/capital_league_seasons/","title":"Capital league seasons","text":""},{"location":"API%20Reference/api/requests/capital_rankings/","title":"Capital rankings","text":""},{"location":"API%20Reference/api/requests/clan/","title":"Clan","text":""},{"location":"API%20Reference/api/requests/clan/#pyclasher.api.requests.clan.ClanRequest","title":"<code>ClanRequest</code>","text":"<p>             Bases: <code>RequestModel</code>, <code>Clan</code></p> <p>Get information about a single clan by clan tag. Clan tags can be found using clan search operation. Note that clan tags start with hash character '#'.</p> Source code in <code>pyclasher/api/requests/clan.py</code> <pre><code>class ClanRequest(RequestModel, Clan):\n\"\"\"\n    Get information about a single clan by clan tag.\n    Clan tags can be found using clan search operation.\n    Note that clan tags start with hash character '#'.\n    \"\"\"\n    clan_tag = None\n\n    def __init__(self, clan_tag):\n\"\"\"\n        initialisation of the clan request\n        :param clan_tag:    Tag of the clan.\n        :type clan_tag:     str\n        \"\"\"\n\n        self.clan_tag = clan_tag\n        RequestModel.__init__(self,\n                              \"clans/{clan_tag}\",\n                              clan_tag=self.clan_tag)\n        Clan.__init__(self, None)\n        return\n\n    @classmethod\n    async def from_base_clan(cls, base_clan):\n\"\"\"\n        method that returns the clan object of a BaseClan or a BaseClan subclass model\n        :param base_clan:   The BaseClan or a BaseClan subclass model\n        :type base_clan:    BaseClan\n        :return:            returns a ClanRequest object\n        :rtype:             ClanRequest\n        \"\"\"\n        self = await cls(base_clan.tag).request()\n        return self\n</code></pre>"},{"location":"API%20Reference/api/requests/clan/#pyclasher.api.requests.clan.ClanRequest.__init__","title":"<code>__init__(clan_tag)</code>","text":"<p>initialisation of the clan request :param clan_tag:    Tag of the clan. :type clan_tag:     str</p> Source code in <code>pyclasher/api/requests/clan.py</code> <pre><code>def __init__(self, clan_tag):\n\"\"\"\n    initialisation of the clan request\n    :param clan_tag:    Tag of the clan.\n    :type clan_tag:     str\n    \"\"\"\n\n    self.clan_tag = clan_tag\n    RequestModel.__init__(self,\n                          \"clans/{clan_tag}\",\n                          clan_tag=self.clan_tag)\n    Clan.__init__(self, None)\n    return\n</code></pre>"},{"location":"API%20Reference/api/requests/clan/#pyclasher.api.requests.clan.ClanRequest.from_base_clan","title":"<code>from_base_clan(base_clan)</code>  <code>async</code> <code>classmethod</code>","text":"<p>method that returns the clan object of a BaseClan or a BaseClan subclass model :param base_clan:   The BaseClan or a BaseClan subclass model :type base_clan:    BaseClan :return:            returns a ClanRequest object :rtype:             ClanRequest</p> Source code in <code>pyclasher/api/requests/clan.py</code> <pre><code>@classmethod\nasync def from_base_clan(cls, base_clan):\n\"\"\"\n    method that returns the clan object of a BaseClan or a BaseClan subclass model\n    :param base_clan:   The BaseClan or a BaseClan subclass model\n    :type base_clan:    BaseClan\n    :return:            returns a ClanRequest object\n    :rtype:             ClanRequest\n    \"\"\"\n    self = await cls(base_clan.tag).request()\n    return self\n</code></pre>"},{"location":"API%20Reference/api/requests/clan_builder_base_rankings/","title":"Clan builder base rankings","text":""},{"location":"API%20Reference/api/requests/clan_capital_raid_seasons/","title":"Clan capital raid seasons","text":""},{"location":"API%20Reference/api/requests/clan_capital_raid_seasons/#pyclasher.api.requests.clan_capital_raid_seasons.ClanCapitalRaidSeasonsRequest","title":"<code>ClanCapitalRaidSeasonsRequest</code>","text":"<p>             Bases: <code>IterRequestModel</code></p> <p>Retrieve clan's capital raid seasons</p> Source code in <code>pyclasher/api/requests/clan_capital_raid_seasons.py</code> <pre><code>class ClanCapitalRaidSeasonsRequest(IterRequestModel):\n\"\"\"\n    Retrieve clan's capital raid seasons\n    \"\"\"\n\n    _iter_rtype = ClanCapitalRaidSeason\n    _list_rtype = ClanCapitalRaidSeasons\n\n    def __init__(self, clan_tag, limit=None, after=None, before=None):\n\"\"\"\n        initialisation of the clan capital raid seasons request\n        :param clan_tag:    Tag of the clan.\n        :type clan_tag:     str\n        :param limit:       Limit the number of items returned in the response.\n        :type limit:        int\n        :param after:       Return only items that occur after this marker. Before marker can be found from the response,\n                            inside the 'paging' property. Note that only after or before can be specified for a request, not both.\n        :type after:        str\n        :param before:      Return only items that occur before this marker. Before marker can be found from the response,\n                            inside the 'paging' property. Note that only after or before can be specified for a request, not both.\n        :type before:       str\n        \"\"\"\n\n        self.clan_tag = clan_tag\n        IterRequestModel.__init__(self,\n                                  \"clans/{clan_tag}/capitalraidseasons\",\n                                  clan_tag=clan_tag,\n                                  kwargs={\n                                      'limit': limit,\n                                      'after': after,\n                                      'before': before\n                                  })\n        return\n\n    @property\n    def average_capital_total_loot_per_season(self):\n        return self.items.average_capital_total_loot\n\n    @property\n    def average_raids_completed_per_season(self):\n        return self.items.average_raids_completed\n\n    @property\n    def average_total_attacks_per_season(self):\n        return self.items.average_total_attacks\n\n    @property\n    def average_enemy_districts_destroyed_per_season(self):\n        return self.items.average_enemy_districts_destroyed\n\n    @property\n    def average_defensive_reward_per_season(self):\n        return self.items.average_defensive_reward\n\n    @property\n    def average_offensive_reward_per_season(self):\n        return self.items.average_offensive_reward\n</code></pre>"},{"location":"API%20Reference/api/requests/clan_capital_raid_seasons/#pyclasher.api.requests.clan_capital_raid_seasons.ClanCapitalRaidSeasonsRequest.__init__","title":"<code>__init__(clan_tag, limit=None, after=None, before=None)</code>","text":"<p>initialisation of the clan capital raid seasons request :param clan_tag:    Tag of the clan. :type clan_tag:     str :param limit:       Limit the number of items returned in the response. :type limit:        int :param after:       Return only items that occur after this marker. Before marker can be found from the response,                     inside the 'paging' property. Note that only after or before can be specified for a request, not both. :type after:        str :param before:      Return only items that occur before this marker. Before marker can be found from the response,                     inside the 'paging' property. Note that only after or before can be specified for a request, not both. :type before:       str</p> Source code in <code>pyclasher/api/requests/clan_capital_raid_seasons.py</code> <pre><code>def __init__(self, clan_tag, limit=None, after=None, before=None):\n\"\"\"\n    initialisation of the clan capital raid seasons request\n    :param clan_tag:    Tag of the clan.\n    :type clan_tag:     str\n    :param limit:       Limit the number of items returned in the response.\n    :type limit:        int\n    :param after:       Return only items that occur after this marker. Before marker can be found from the response,\n                        inside the 'paging' property. Note that only after or before can be specified for a request, not both.\n    :type after:        str\n    :param before:      Return only items that occur before this marker. Before marker can be found from the response,\n                        inside the 'paging' property. Note that only after or before can be specified for a request, not both.\n    :type before:       str\n    \"\"\"\n\n    self.clan_tag = clan_tag\n    IterRequestModel.__init__(self,\n                              \"clans/{clan_tag}/capitalraidseasons\",\n                              clan_tag=clan_tag,\n                              kwargs={\n                                  'limit': limit,\n                                  'after': after,\n                                  'before': before\n                              })\n    return\n</code></pre>"},{"location":"API%20Reference/api/requests/clan_current_war/","title":"Clan current war","text":""},{"location":"API%20Reference/api/requests/clan_current_war/#pyclasher.api.requests.clan_current_war.ClanCurrentWarRequest","title":"<code>ClanCurrentWarRequest</code>","text":"<p>             Bases: <code>RequestModel</code>, <code>ClanWar</code></p> <p>Retrieve information about clan's current clan war</p> Source code in <code>pyclasher/api/requests/clan_current_war.py</code> <pre><code>class ClanCurrentWarRequest(RequestModel, ClanWar):\n\"\"\"\n    Retrieve information about clan's current clan war\n    \"\"\"\n    clan_tag = None\n\n    def __init__(self, clan_tag):\n\"\"\"\n        initialisation of the clan current war request\n        :param clan_tag:    Tag of the clan.\n        :type clan_tag:     str\n        \"\"\"\n\n        self.clan_tag = clan_tag\n        RequestModel.__init__(self,\n                              \"clans/{clan_tag}/currentwar\",\n                              clan_tag=self.clan_tag)\n        ClanWar.__init__(self, None)\n        return\n\n    @classmethod\n    async def from_base_clan(cls, base_clan):\n\"\"\"\n        method that returns the clan object of a BaseClan or a BaseClan subclass model\n        :param base_clan:   The BaseClan or a BaseClan subclass model\n        :type base_clan:    BaseClan\n        :return:            returns a ClanCurrentWarRequest object\n        :rtype:             ClanCurrentWarRequest\n        \"\"\"\n        self = await cls(base_clan.tag).request()\n        return self\n\n    async def request(self, client_id=None):\n        await super().request(client_id)\n\n        if (self.state == ClanWarState.IN_WAR\n                or self.state == ClanWarState.WAR\n                or self.state == ClanWarState.PREPARATION\n                or self.state == ClanWarState.ENDED\n        ):\n            self._data['clan']['members'] = sorted(\n                self._data['clan']['members'],\n                key=lambda member: member['mapPosition']\n            )\n            self._data['opponent']['members'] = sorted(\n                self._data['opponent']['members'],\n                key=lambda member: member['mapPosition']\n            )\n</code></pre>"},{"location":"API%20Reference/api/requests/clan_current_war/#pyclasher.api.requests.clan_current_war.ClanCurrentWarRequest.__init__","title":"<code>__init__(clan_tag)</code>","text":"<p>initialisation of the clan current war request :param clan_tag:    Tag of the clan. :type clan_tag:     str</p> Source code in <code>pyclasher/api/requests/clan_current_war.py</code> <pre><code>def __init__(self, clan_tag):\n\"\"\"\n    initialisation of the clan current war request\n    :param clan_tag:    Tag of the clan.\n    :type clan_tag:     str\n    \"\"\"\n\n    self.clan_tag = clan_tag\n    RequestModel.__init__(self,\n                          \"clans/{clan_tag}/currentwar\",\n                          clan_tag=self.clan_tag)\n    ClanWar.__init__(self, None)\n    return\n</code></pre>"},{"location":"API%20Reference/api/requests/clan_current_war/#pyclasher.api.requests.clan_current_war.ClanCurrentWarRequest.from_base_clan","title":"<code>from_base_clan(base_clan)</code>  <code>async</code> <code>classmethod</code>","text":"<p>method that returns the clan object of a BaseClan or a BaseClan subclass model :param base_clan:   The BaseClan or a BaseClan subclass model :type base_clan:    BaseClan :return:            returns a ClanCurrentWarRequest object :rtype:             ClanCurrentWarRequest</p> Source code in <code>pyclasher/api/requests/clan_current_war.py</code> <pre><code>@classmethod\nasync def from_base_clan(cls, base_clan):\n\"\"\"\n    method that returns the clan object of a BaseClan or a BaseClan subclass model\n    :param base_clan:   The BaseClan or a BaseClan subclass model\n    :type base_clan:    BaseClan\n    :return:            returns a ClanCurrentWarRequest object\n    :rtype:             ClanCurrentWarRequest\n    \"\"\"\n    self = await cls(base_clan.tag).request()\n    return self\n</code></pre>"},{"location":"API%20Reference/api/requests/clan_currentwar_leaguegroup/","title":"Clan currentwar leaguegroup","text":""},{"location":"API%20Reference/api/requests/clan_currentwar_leaguegroup/#pyclasher.api.requests.clan_currentwar_leaguegroup.ClanCurrentwarLeaguegroupRequest","title":"<code>ClanCurrentwarLeaguegroupRequest</code>","text":"<p>             Bases: <code>RequestModel</code>, <code>ClanWarLeagueGroup</code></p> <p>Retrieve information about clan's current clan war league group</p> Source code in <code>pyclasher/api/requests/clan_currentwar_leaguegroup.py</code> <pre><code>class ClanCurrentwarLeaguegroupRequest(RequestModel, ClanWarLeagueGroup):\n\"\"\"\n    Retrieve information about clan's current clan war league group\n    \"\"\"\n    clan_tag = None\n\n    def __init__(self, clan_tag):\n\"\"\"\n        initialisation of the clan currentwar leaguegroup request\n        :param clan_tag:    Tag of the clan.\n        :type clan_tag:     str\n        \"\"\"\n\n        self.clan_tag = clan_tag\n        RequestModel.__init__(self,\n                              \"clans/{clan_tag}/currentwar/leaguegroup\",\n                              clan_tag=self.clan_tag)\n        ClanWarLeagueGroup.__init__(self, None)\n        return\n\n    @classmethod\n    async def from_base_clan(cls, base_clan):\n\"\"\"\n        method that returns the clan object of a BaseClan or a BaseClan subclass model\n        :param base_clan:   The BaseClan or a BaseClan subclass model\n        :type base_clan:    BaseClan\n        :return:            returns a ClanRequest object\n        :rtype:             ClanRequest\n        \"\"\"\n        self = await cls(base_clan.tag).request()\n        return self\n</code></pre>"},{"location":"API%20Reference/api/requests/clan_currentwar_leaguegroup/#pyclasher.api.requests.clan_currentwar_leaguegroup.ClanCurrentwarLeaguegroupRequest.__init__","title":"<code>__init__(clan_tag)</code>","text":"<p>initialisation of the clan currentwar leaguegroup request :param clan_tag:    Tag of the clan. :type clan_tag:     str</p> Source code in <code>pyclasher/api/requests/clan_currentwar_leaguegroup.py</code> <pre><code>def __init__(self, clan_tag):\n\"\"\"\n    initialisation of the clan currentwar leaguegroup request\n    :param clan_tag:    Tag of the clan.\n    :type clan_tag:     str\n    \"\"\"\n\n    self.clan_tag = clan_tag\n    RequestModel.__init__(self,\n                          \"clans/{clan_tag}/currentwar/leaguegroup\",\n                          clan_tag=self.clan_tag)\n    ClanWarLeagueGroup.__init__(self, None)\n    return\n</code></pre>"},{"location":"API%20Reference/api/requests/clan_currentwar_leaguegroup/#pyclasher.api.requests.clan_currentwar_leaguegroup.ClanCurrentwarLeaguegroupRequest.from_base_clan","title":"<code>from_base_clan(base_clan)</code>  <code>async</code> <code>classmethod</code>","text":"<p>method that returns the clan object of a BaseClan or a BaseClan subclass model :param base_clan:   The BaseClan or a BaseClan subclass model :type base_clan:    BaseClan :return:            returns a ClanRequest object :rtype:             ClanRequest</p> Source code in <code>pyclasher/api/requests/clan_currentwar_leaguegroup.py</code> <pre><code>@classmethod\nasync def from_base_clan(cls, base_clan):\n\"\"\"\n    method that returns the clan object of a BaseClan or a BaseClan subclass model\n    :param base_clan:   The BaseClan or a BaseClan subclass model\n    :type base_clan:    BaseClan\n    :return:            returns a ClanRequest object\n    :rtype:             ClanRequest\n    \"\"\"\n    self = await cls(base_clan.tag).request()\n    return self\n</code></pre>"},{"location":"API%20Reference/api/requests/clan_labels/","title":"Clan labels","text":""},{"location":"API%20Reference/api/requests/clan_members/","title":"Clan members","text":""},{"location":"API%20Reference/api/requests/clan_members/#pyclasher.api.requests.clan_members.ClanMembersRequest","title":"<code>ClanMembersRequest</code>","text":"<p>             Bases: <code>IterRequestModel</code></p> <p>List clan members.</p> Source code in <code>pyclasher/api/requests/clan_members.py</code> <pre><code>class ClanMembersRequest(IterRequestModel):\n\"\"\"\n    List clan members.\n    \"\"\"\n\n    _iter_rtype = ClanMember\n    _list_rtype = ClanMemberList\n\n    def __init__(self, clan_tag, limit=None, after=None, before=None):\n\"\"\"\n        initialisation of the clan members request\n        :param clan_tag:    Tag of the clan.\n        :type clan_tag:     str\n        :param limit:       Limit the number of items returned in the response.\n        :type limit:        int\n        :param after:       Return only items that occur after this marker. Before marker can be found from the response,\n                            inside the 'paging' property. Note that only after or before can be specified for a request, not both.\n        :type after:        str\n        :param before:      Return only items that occur before this marker. Before marker can be found from the response,\n                            inside the 'paging' property. Note that only after or before can be specified for a request, not both.\n        :type before:       str\n        \"\"\"\n\n        self.clan_tag = clan_tag\n        IterRequestModel.__init__(self,\n                                  \"clans/{clan_tag}/members\",\n                                  clan_tag=clan_tag,\n                                  kwargs={\n                                      'limit': limit,\n                                      'after': after,\n                                      'before': before\n                                  })\n        return\n\n    @property\n    def average_exp_level_per_member(self):\n        return self.items.average_exp_level\n\n    @property\n    def average_trophies_per_member(self):\n        return self.items.average_trophies\n\n    @property\n    def average_builder_base_trophies_per_member(self):\n        return self.items.average_builder_base_trophies\n\n    @property\n    def average_donations_per_member(self):\n        return self.items.average_donations\n\n    @property\n    def average_donations_received_per_member(self):\n        return self.items.average_donations_received\n</code></pre>"},{"location":"API%20Reference/api/requests/clan_members/#pyclasher.api.requests.clan_members.ClanMembersRequest.__init__","title":"<code>__init__(clan_tag, limit=None, after=None, before=None)</code>","text":"<p>initialisation of the clan members request :param clan_tag:    Tag of the clan. :type clan_tag:     str :param limit:       Limit the number of items returned in the response. :type limit:        int :param after:       Return only items that occur after this marker. Before marker can be found from the response,                     inside the 'paging' property. Note that only after or before can be specified for a request, not both. :type after:        str :param before:      Return only items that occur before this marker. Before marker can be found from the response,                     inside the 'paging' property. Note that only after or before can be specified for a request, not both. :type before:       str</p> Source code in <code>pyclasher/api/requests/clan_members.py</code> <pre><code>def __init__(self, clan_tag, limit=None, after=None, before=None):\n\"\"\"\n    initialisation of the clan members request\n    :param clan_tag:    Tag of the clan.\n    :type clan_tag:     str\n    :param limit:       Limit the number of items returned in the response.\n    :type limit:        int\n    :param after:       Return only items that occur after this marker. Before marker can be found from the response,\n                        inside the 'paging' property. Note that only after or before can be specified for a request, not both.\n    :type after:        str\n    :param before:      Return only items that occur before this marker. Before marker can be found from the response,\n                        inside the 'paging' property. Note that only after or before can be specified for a request, not both.\n    :type before:       str\n    \"\"\"\n\n    self.clan_tag = clan_tag\n    IterRequestModel.__init__(self,\n                              \"clans/{clan_tag}/members\",\n                              clan_tag=clan_tag,\n                              kwargs={\n                                  'limit': limit,\n                                  'after': after,\n                                  'before': before\n                              })\n    return\n</code></pre>"},{"location":"API%20Reference/api/requests/clan_rankings/","title":"Clan rankings","text":""},{"location":"API%20Reference/api/requests/clan_search/","title":"Clan search","text":""},{"location":"API%20Reference/api/requests/clan_search/#pyclasher.api.requests.clan_search.ClanSearchRequest","title":"<code>ClanSearchRequest</code>","text":"<p>             Bases: <code>IterRequestModel</code></p> <p>Search all clans by name and/or filtering the results using various criteria. At least one filtering criteria must be defined and if name is used as part of search, it is required to be at least three characters long. It is not possible to specify ordering for results so clients should not rely on any specific ordering as that may change in the future releases of the API.</p> Source code in <code>pyclasher/api/requests/clan_search.py</code> <pre><code>class ClanSearchRequest(IterRequestModel):\n\"\"\"\n    Search all clans by name and/or filtering the results using various criteria.\n    At least one filtering criteria must be defined and if name is used as part of search,\n    it is required to be at least three characters long. It is not possible to specify\n    ordering for results so clients should not rely on any specific ordering as that may\n    change in the future releases of the API.\n    \"\"\"\n\n    clan_name = None\n    _iter_rtype = Clan\n    _list_rtype = ClanList\n\n    def __init__(\n            self,\n            name=None,\n            war_frequency=None,\n            location=None,\n            min_members=None,\n            max_members=None,\n            min_clan_points=None,\n            min_clan_level=None,\n            label_ids=None,\n            limit=None,\n            after=None,\n            before=None\n    ) -&gt; None:\n\"\"\"\n        initialisation of the clan request\n        :param name:            Search clans by name. If name is used as part of search query, it needs to be at least\n                                three characters long. Name search parameter is interpreted as wild card search,\n                                so it may appear anywhere in the clan name.\n        :type name:             str\n        :param war_frequency:   Filter by clan war frequency\n        :type war_frequency:    WarFrequency\n        :param location:     Filter by clan location identifier. For list of available locations, refer to getLocations operation.\n        :type location:      Locations\n        :param min_members:     Filter by minimum number of clan members\n        :type min_members:      int\n        :param max_members:     Filter by maximum number of clan members\n        :type max_members:      int\n        :param min_clan_points: Filter by minimum amount of clan points.\n        :type min_clan_points:  int\n        :param min_clan_level:  Filter by minimum clan level.\n        :type min_clan_level:   int\n        :param label_ids:       Comma separated list of label IDs to use for filtering results.\n        :type label_ids:        list[Labels]\n        :param limit:           Limit the number of items returned in the response.\n        :type limit:            int\n        :param after:           Return only items that occur after this marker. Before marker can be found from the response,\n                                inside the 'paging' property. Note that only after or before can be specified for a request, not both.\n        :type after:            str\n        :param before:          Return only items that occur before this marker. Before marker can be found from the response,\n                                inside the 'paging' property. Note that only after or before can be specified for a request, not both.\n        :type before:           str\n        \"\"\"\n\n        self.clan_name = name\n        IterRequestModel.__init__(\n            self,\n            \"clans\",\n            kwargs={\n                'name': name,\n                'warFrequency': (war_frequency.value\n                                 if war_frequency is not None else None),\n                'locationId': (location.value.id\n                               if location is not None else None),\n                'minMembers': min_members,\n                'maxMembers': max_members,\n                'minClanPoints': min_clan_points,\n                'minClanLevel': min_clan_level,\n                'labelIds': \",\".join(\n                    (label.value.id for label in\n                     label_ids)) if label_ids is not None else None,\n                'limit': limit, 'after': after,\n                'before': before\n            }\n        )\n        return\n</code></pre>"},{"location":"API%20Reference/api/requests/clan_search/#pyclasher.api.requests.clan_search.ClanSearchRequest.__init__","title":"<code>__init__(name=None, war_frequency=None, location=None, min_members=None, max_members=None, min_clan_points=None, min_clan_level=None, label_ids=None, limit=None, after=None, before=None)</code>","text":"<p>initialisation of the clan request :param name:            Search clans by name. If name is used as part of search query, it needs to be at least                         three characters long. Name search parameter is interpreted as wild card search,                         so it may appear anywhere in the clan name. :type name:             str :param war_frequency:   Filter by clan war frequency :type war_frequency:    WarFrequency :param location:     Filter by clan location identifier. For list of available locations, refer to getLocations operation. :type location:      Locations :param min_members:     Filter by minimum number of clan members :type min_members:      int :param max_members:     Filter by maximum number of clan members :type max_members:      int :param min_clan_points: Filter by minimum amount of clan points. :type min_clan_points:  int :param min_clan_level:  Filter by minimum clan level. :type min_clan_level:   int :param label_ids:       Comma separated list of label IDs to use for filtering results. :type label_ids:        list[Labels] :param limit:           Limit the number of items returned in the response. :type limit:            int :param after:           Return only items that occur after this marker. Before marker can be found from the response,                         inside the 'paging' property. Note that only after or before can be specified for a request, not both. :type after:            str :param before:          Return only items that occur before this marker. Before marker can be found from the response,                         inside the 'paging' property. Note that only after or before can be specified for a request, not both. :type before:           str</p> Source code in <code>pyclasher/api/requests/clan_search.py</code> <pre><code>def __init__(\n        self,\n        name=None,\n        war_frequency=None,\n        location=None,\n        min_members=None,\n        max_members=None,\n        min_clan_points=None,\n        min_clan_level=None,\n        label_ids=None,\n        limit=None,\n        after=None,\n        before=None\n) -&gt; None:\n\"\"\"\n    initialisation of the clan request\n    :param name:            Search clans by name. If name is used as part of search query, it needs to be at least\n                            three characters long. Name search parameter is interpreted as wild card search,\n                            so it may appear anywhere in the clan name.\n    :type name:             str\n    :param war_frequency:   Filter by clan war frequency\n    :type war_frequency:    WarFrequency\n    :param location:     Filter by clan location identifier. For list of available locations, refer to getLocations operation.\n    :type location:      Locations\n    :param min_members:     Filter by minimum number of clan members\n    :type min_members:      int\n    :param max_members:     Filter by maximum number of clan members\n    :type max_members:      int\n    :param min_clan_points: Filter by minimum amount of clan points.\n    :type min_clan_points:  int\n    :param min_clan_level:  Filter by minimum clan level.\n    :type min_clan_level:   int\n    :param label_ids:       Comma separated list of label IDs to use for filtering results.\n    :type label_ids:        list[Labels]\n    :param limit:           Limit the number of items returned in the response.\n    :type limit:            int\n    :param after:           Return only items that occur after this marker. Before marker can be found from the response,\n                            inside the 'paging' property. Note that only after or before can be specified for a request, not both.\n    :type after:            str\n    :param before:          Return only items that occur before this marker. Before marker can be found from the response,\n                            inside the 'paging' property. Note that only after or before can be specified for a request, not both.\n    :type before:           str\n    \"\"\"\n\n    self.clan_name = name\n    IterRequestModel.__init__(\n        self,\n        \"clans\",\n        kwargs={\n            'name': name,\n            'warFrequency': (war_frequency.value\n                             if war_frequency is not None else None),\n            'locationId': (location.value.id\n                           if location is not None else None),\n            'minMembers': min_members,\n            'maxMembers': max_members,\n            'minClanPoints': min_clan_points,\n            'minClanLevel': min_clan_level,\n            'labelIds': \",\".join(\n                (label.value.id for label in\n                 label_ids)) if label_ids is not None else None,\n            'limit': limit, 'after': after,\n            'before': before\n        }\n    )\n    return\n</code></pre>"},{"location":"API%20Reference/api/requests/clan_war_log/","title":"Clan war log","text":""},{"location":"API%20Reference/api/requests/clan_war_log/#pyclasher.api.requests.clan_war_log.ClanWarLogRequest","title":"<code>ClanWarLogRequest</code>","text":"<p>             Bases: <code>IterRequestModel</code></p> <p>Retrieve clan's clan war log.</p> Source code in <code>pyclasher/api/requests/clan_war_log.py</code> <pre><code>class ClanWarLogRequest(IterRequestModel):\n\"\"\"\n    Retrieve clan's clan war log.\n    \"\"\"\n    clan_tag: str = None\n    _iter_rtype = ClanWarLogEntry\n    _list_rtype = ClanWarLog\n    __Criteria = Literal[\"team_size\", \"attacks_per_member\", \"result\"]\n\n    def __init__(self, clan_tag, limit=None, after=None, before=None):\n\"\"\"\n        initialisation of the clan request\n        :param clan_tag:    Tag of the clan.\n        :type clan_tag:     str\n        :param limit:       Limit the number of items returned in the response.\n        :type limit:        int\n        :param after:       Return only items that occur after this marker. Before marker can be found from the response,\n                            inside the 'paging' property. Note that only after or before can be specified for a request, not both.\n        :type after:        str\n        :param before:      Return only items that occur before this marker. Before marker can be found from the response,\n                            inside the 'paging' property. Note that only after or before can be specified for a request, not both.\n        :type before:       str\n        \"\"\"\n\n        self.clan_tag = clan_tag\n        IterRequestModel.__init__(self,\n                                  \"clans/{clan_tag}/warlog\",\n                                  clan_tag=self.clan_tag,\n                                  kwargs={\n                                      'limit': limit,\n                                      'after': after,\n                                      'before': before\n                                  })\n        return\n\n    @staticmethod\n    def __sort_key(item, key):\n        if key == \"result\":\n            if item[snake_to_camel(key)] == ClanWarResult.WIN.value:\n                return 3\n            if item[snake_to_camel(key)] == ClanWarResult.LOSE.value:\n                return 1\n            if item[snake_to_camel(key)] == ClanWarResult.TIE.value:\n                return 2\n            if item[snake_to_camel(key)] == ClanWarResult.NONE.value:\n                return 0\n        else:\n            return item[snake_to_camel(key)]\n\n    def sort(self, criteria, descending=True):\n        if not isinstance(self._data, dict):\n            raise RequestNotDone\n        self._data['items'] = sorted(\n            self._data['items'],\n            key=lambda war: self.__sort_key(war, criteria),\n            reverse=descending\n        )\n        return\n\n    def filter(self, criteria, value):\n        if isinstance(value, ClanWarResult):\n            value = value.value\n\n        self._data['items'] = [war\n                               for war in self._data['items']\n                               if war[snake_to_camel(criteria)] == value]\n        return\n\n    @property\n    def average_team_size(self):\n        return self.items.average_team_size\n\n    @property\n    def average_destruction_percentage(self):\n        return self.items.average_destruction_percentage\n\n    @property\n    def average_attacks(self):\n        return self.items.average_attacks\n\n    @property\n    def average_stars(self):\n        return self.items.average_stars\n\n    @property\n    def average_exp_earned(self):\n        return self.items.average_exp_earned\n</code></pre>"},{"location":"API%20Reference/api/requests/clan_war_log/#pyclasher.api.requests.clan_war_log.ClanWarLogRequest.__init__","title":"<code>__init__(clan_tag, limit=None, after=None, before=None)</code>","text":"<p>initialisation of the clan request :param clan_tag:    Tag of the clan. :type clan_tag:     str :param limit:       Limit the number of items returned in the response. :type limit:        int :param after:       Return only items that occur after this marker. Before marker can be found from the response,                     inside the 'paging' property. Note that only after or before can be specified for a request, not both. :type after:        str :param before:      Return only items that occur before this marker. Before marker can be found from the response,                     inside the 'paging' property. Note that only after or before can be specified for a request, not both. :type before:       str</p> Source code in <code>pyclasher/api/requests/clan_war_log.py</code> <pre><code>def __init__(self, clan_tag, limit=None, after=None, before=None):\n\"\"\"\n    initialisation of the clan request\n    :param clan_tag:    Tag of the clan.\n    :type clan_tag:     str\n    :param limit:       Limit the number of items returned in the response.\n    :type limit:        int\n    :param after:       Return only items that occur after this marker. Before marker can be found from the response,\n                        inside the 'paging' property. Note that only after or before can be specified for a request, not both.\n    :type after:        str\n    :param before:      Return only items that occur before this marker. Before marker can be found from the response,\n                        inside the 'paging' property. Note that only after or before can be specified for a request, not both.\n    :type before:       str\n    \"\"\"\n\n    self.clan_tag = clan_tag\n    IterRequestModel.__init__(self,\n                              \"clans/{clan_tag}/warlog\",\n                              clan_tag=self.clan_tag,\n                              kwargs={\n                                  'limit': limit,\n                                  'after': after,\n                                  'before': before\n                              })\n    return\n</code></pre>"},{"location":"API%20Reference/api/requests/clan_warleagues_wars/","title":"Clan warleagues wars","text":""},{"location":"API%20Reference/api/requests/clan_warleagues_wars/#pyclasher.api.requests.clan_warleagues_wars.ClanWarleaguesWarsRequest","title":"<code>ClanWarleaguesWarsRequest</code>","text":"<p>             Bases: <code>RequestModel</code>, <code>ClanWar</code></p> <p>Retrieve information about individual clan war league war</p> Source code in <code>pyclasher/api/requests/clan_warleagues_wars.py</code> <pre><code>class ClanWarleaguesWarsRequest(RequestModel, ClanWar):\n\"\"\"\n    Retrieve information about individual clan war league war\n    \"\"\"\n\n    def __init__(self, war_tag):\n        self.war_tag = war_tag\n        RequestModel.__init__(self,\n                              \"clanwarleagues/wars/{war_tag}\",\n                              war_tag=self.war_tag)\n        ClanWar.__init__(self, None)\n        return\n</code></pre>"},{"location":"API%20Reference/api/requests/gold_pass/","title":"Gold pass","text":""},{"location":"API%20Reference/api/requests/league/","title":"League","text":""},{"location":"API%20Reference/api/requests/league_season/","title":"League season","text":""},{"location":"API%20Reference/api/requests/league_seasons/","title":"League seasons","text":""},{"location":"API%20Reference/api/requests/leagues/","title":"Leagues","text":""},{"location":"API%20Reference/api/requests/location/","title":"Location","text":""},{"location":"API%20Reference/api/requests/locations/","title":"Locations","text":""},{"location":"API%20Reference/api/requests/player/","title":"Player","text":""},{"location":"API%20Reference/api/requests/player/#pyclasher.api.requests.player.PlayerRequest","title":"<code>PlayerRequest</code>","text":"<p>             Bases: <code>RequestModel</code>, <code>Player</code></p> <p>Get information about a single player by player tag. Player tags can be found either in game or from clan member lists.</p> Source code in <code>pyclasher/api/requests/player.py</code> <pre><code>class PlayerRequest(RequestModel, Player):\n\"\"\"\n    Get information about a single player by player tag. Player tags can be\n    found either in game or from clan member lists.\n    \"\"\"\n\n    def __init__(self, player_tag):\n        self.player_tag = player_tag\n        super().__init__(\"players/{player_tag}\", player_tag=self.player_tag)\n        return\n\n    async def verify_token(self, player_token):\n        self.client = Client.get_instance()\n\n        if not self.client.is_running:\n            raise ClientIsNotRunning\n\n        body = VerifyTokenRequest(player_token).to_dict()\n        url = \"/\".join((self.client.endpoint,\n                        quote(f\"players/{self.player_tag}/verifytoken\")))\n\n        future, status, error = Future(), Future(), Future()\n\n        self.client.logger.debug(f\"posting {self._request_id}\")\n\n        await self.client.queue.put(future,\n                                    url,\n                                    RequestMethods.POST.value,\n                                    body,\n                                    status,\n                                    error)\n\n        data, req_status, req_error = (await future,\n                                       await status,\n                                       await error)\n\n        if req_status != 200:\n            raise req_error.value\n\n        self.client.logger.debug(f\"post {self._request_id} done\")\n        return VerifyTokenResponse(data)\n</code></pre>"},{"location":"API%20Reference/api/requests/player_builder_base_rankings/","title":"Player builder base rankings","text":""},{"location":"API%20Reference/api/requests/player_labels/","title":"Player labels","text":""},{"location":"API%20Reference/api/requests/player_rankings/","title":"Player rankings","text":""},{"location":"API%20Reference/api/requests/war_league/","title":"War league","text":""},{"location":"API%20Reference/api/requests/war_leagues/","title":"War leagues","text":""},{"location":"API%20Reference/client/client/","title":"Client","text":""},{"location":"API%20Reference/client/client/#pyclasher.client.client.global_client_id","title":"<code>global_client_id: int = 0</code>  <code>module-attribute</code>","text":"<p>Global variable for counting and identifying clients</p>"},{"location":"API%20Reference/client/client/#pyclasher.client.client.Client","title":"<code>Client</code>","text":"<p>ClashOfClans API client</p> <p>Attributes:</p> Name Type Description <code>__instances</code> <code>list[Client]</code> <p>the instances of the client</p> <code>base_url</code> <code>str</code> <p>the base URL for the requests (usually <code>https://api.clashofclans.com</code>)</p> <code>endpoint</code> <code>str</code> <p>the endpoint URL for the requests (usually <code>/v1</code>)</p> <code>requests_per_second</code> <code>int</code> <p>the number of requests done per consumer/token per second (usually 5)</p> <code>logger</code> <code>Logger</code> <p>logger to log the requests, ... (usually MISSING)</p> <code>queue</code> <code>PQueue</code> <p>the request_queue where the requests are enqueued</p> <code>__consumers</code> <code>list</code> <p>list of consumers of the request_queue and requests</p> <code>__consume_tasks</code> <code>list</code> <p>list of tasks of the consumer</p> <code>__temporary_session</code> <code>bool</code> <p>boolean that indicates if the session is temporary or not</p> <code>__tokens</code> <code>list[str]</code> <p>list of tokens</p> <code>__client_running</code> <code>bool</code> <p>boolean that indicates if the client is running or not</p> Source code in <code>pyclasher/client/client.py</code> <pre><code>class Client:\n\"\"\"\n    ClashOfClans API client\n\n    Attributes:\n        __instances:            the instances of the client\n        base_url:               the base URL for the requests (usually ``https://api.clashofclans.com``)\n        endpoint:               the endpoint URL for the requests (usually ``/v1``)\n        requests_per_second:    the number of requests done per consumer/token per second (usually 5)\n        logger:                 logger to log the requests, ... (usually MISSING)\n        queue:                  the request_queue where the requests are enqueued\n        __consumers:            list of consumers of the request_queue and requests\n        __consume_tasks:        list of tasks of the consumer\n        __temporary_session:    boolean that indicates if the session is temporary or not\n        __tokens:               list of tokens\n        __client_running:       boolean that indicates if the client is running or not\n    \"\"\"\n\n    __instances = None\n\"\"\"List of Client instances or None\"\"\"\n\n    base_url = \"https://api.clashofclans.com\"\n\"\"\"Base url for all requests\"\"\"\n    endpoint = \"/v1\"\n\"\"\"Endpoint url for all requests\"\"\"\n    requests_per_second = 5\n\"\"\"Maximal number of requests that are executed per second\"\"\"\n    logger = MISSING\n\"\"\"Logger that logs the requests\"\"\"\n\n    def __new__(cls, *, tokens=None, **kwargs):\n\"\"\"\n        Class method to create a new instance of the Client\n\n        Args:\n            tokens (str | list[str] | None):    the Bearer tokens for the authentication of the ClashOfClans API\n            **kwargs (Any):                     other key word arguments\n\n        Notes:\n            This function checks if all initialised clients do not share a\n            token. If so the ecxeption ``ClientAlreadyInitialised`` is raised.\n\n        Raises:\n            InvalidType:                provided tokens are not of type ``str``\n                                        or ``Iterable[str]``\n            ClientAlreadyInitialised:   at least one of the provided tokens is\n                                        equal to a token that is already in use\n        \"\"\"\n        if cls.__instances is None:\n            cls.__instances = [super().__new__(cls)]\n            return cls.__instances[0]\n        if isinstance(tokens, str):\n            tokens = [tokens]\n        elif isinstance(tokens, Iterable):\n            tokens = list(tokens)\n        else:\n            raise InvalidType(tokens,\n                              (str, Iterable[str]))\n        for token in tokens:\n            for client in Client.__instances:\n                if client.__tokens is not None:\n                    if token in client.__tokens:\n                        raise ClientAlreadyInitialised\n                    continue\n\n        cls.__instances.append(super().__new__(cls))\n        return cls.__instances[-1]\n\n    def __init__(\n            self,\n            tokens=None,\n            requests_per_second=5,\n            request_timeout=30,\n            logger=MISSING,\n            swagger_url=None\n    ):\n\"\"\"\n        initialisation method for the client\n\n        Args:\n            tokens (str | list[str] | None):    the Bearer tokens for the\n                                                authentication of the\n                                                ClashOfClans API\n            requests_per_second (int):          This integer limits the number\n                                                of requests done per second\n                                                (per token).\n                                                This value is important to\n                                                bypass the rate limit of the\n                                                ClashOfClans API.\n                                                More tokens allow more requests\n                                                per second because each token\n                                                can do as many requests per\n                                                second as specified.\n            request_timeout (float):            timeout in seconds for one\n                                                request\n            logger (Logger):                    logger for detailed logging\n            swagger_url (str):                  swagger url for requests\n        Raises:\n            InvalidType:                provided tokens are not of type ``str``\n                                        or ``Iterable[str]``\n        \"\"\"\n\n        global global_client_id\n\n        if logger is None:\n            logger = MISSING\n        self.logger = logger\n        self.logger.info(\"initialising client\")\n        if tokens is not None:\n            if isinstance(tokens, str):\n                self.__tokens = [tokens]\n            elif isinstance(tokens, Iterable):\n                self.__tokens = list(tokens)\n            else:\n                raise InvalidType(tokens,\n                                  (str, Iterable[str]))\n\n        if swagger_url is not None:\n            parsed_url = urlparse(swagger_url)\n            self.base_url = f\"{parsed_url.scheme}://{parsed_url.netloc}\"\n            self.endpoint = parsed_url.path[:-1]\n\n        self.requests_per_second = requests_per_second\n\n        self.logger.debug(\"client initialised\")\n\n        self.queue = PQueue()\n        self.request_timeout = request_timeout\n\n        self.__client_running = False\n        self.__temporary_session = False\n        self.__consumers = None\n        self.__consume_tasks = None\n        self._client_id = global_client_id\n\n        global_client_id += 1\n\n        self._event_client = False\n\n        return\n\n    @classmethod\n    async def from_login(cls, email, password, requests_per_second=5,\n                         request_timeout=30, logger=MISSING, login_count=1):\n\"\"\"\n        Class method to initialise a client using the authentication of the\n        ClashOfClans API and create tokens using this API.\n\n        Args:\n            email (str):                user email address to log in to the\n                                        ClashOfClans developer portal\n            password (str):             user password for the email\n            requests_per_second (int):  number of requests per token per second\n            request_timeout (float):    seconds until the request is cancelled\n                                        due to a timeout\n            logger (Logger):            logger\n            login_count (int):          number of logins that should be done\n                                        (having more logins results more tokens\n                                        and this leads to more requests that can\n                                        be executed in parallel)\n        Notes:\n            Do not set the ``login_count`` to high, otherwise the account\n            could be banned. 5 works fine.\n\n        Returns:\n            Client: an instance of the pyclasher client\n        \"\"\"\n        if logger is None:\n            logger = MISSING\n\n        logins = [\n            await Login(email, password).login() for _ in range(login_count)\n        ]\n\n        logger.info(\"initialising client via login\")\n\n        self = cls(tokens=[login.temporary_api_token for login in logins],\n                   requests_per_second=requests_per_second,\n                   request_timeout=request_timeout,\n                   swagger_url=logins[0].swagger_url)\n        self.logger = logger\n        self.__temporary_session = True\n        return self\n\n    async def start(self, tokens=None):\n\"\"\"\n        coroutine method to start the client\n\n        Args:\n            tokens (str | list[str] | None):    the Bearer tokens for the\n                                                authentication of the\n                                                ClashOfClans API\n\n        Notes:\n            The tokens passed to this function have priority so if tokens are\n            set in the client initialisation and also passed to this function,\n            the tokens passed to this function will be used to start the\n            client and the consumer tasks.\n\n            If it is needed to create multiple clients with the same tokens,\n            it is possible to use this function and pass the tokens directly to\n            the different clients.\n\n        Returns:\n            Client: returns itself\n\n        \"\"\"\n        if tokens is None:\n            tokens = self.__tokens\n\n            if tokens is None:\n                raise NoneToken\n\n        elif isinstance(tokens, str):\n            tokens = [tokens]\n\n        if not isinstance(tokens, Iterable):\n            raise InvalidType(tokens, (str, Iterable[str]))\n\n        if self.__client_running or self.__consume_tasks is not None:\n            self.logger.error(\"the client is already running\")\n            raise ClientIsRunning\n\n        self.__client_running = True\n        self.logger.info(\"starting client\")\n\n        self.__consumers = [\n            PConsumer(self.queue, token, self.requests_per_second,\n                      self.request_timeout, self.base_url)\n            for token in tokens\n        ]\n        self.__consume_tasks = [\n            create_task(consumer.consume()) for consumer in self.__consumers\n        ]\n        self.logger.debug(\"client started\")\n\n        return self\n\n    async def close(self):\n\"\"\"\n        coroutine method to stop the client\n\n        Returns:\n            Client: returns itself\n        \"\"\"\n        self.logger.info(\"closing client\")\n        if not self.__client_running:\n            self.logger.error(\"the client is not running\")\n            raise ClientIsNotRunning\n        else:\n            self.__client_running = False\n\n        for task in self.__consume_tasks:\n            task.cancel()\n        self.__consume_tasks = None\n        for consumer in self.__consumers:\n            await consumer.close()\n        self.__consumers = None\n\n        self.logger.debug(\"client closed\")\n        return self\n\n    async def __aenter__(self):\n\"\"\"\n        asynchronous context manager (starting)\n\n        Returns:\n            Client: returns itself\n        \"\"\"\n        return await self.start()\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n\"\"\"\n        asynchronous context manager (stopping)\n\n        Args:\n            exc_type (type[BaseException]): type of the exception or ``None``\n            exc_val (BaseException):        the raised exception or ``None``\n            exc_tb (TracebackType):         the traceback or ``None``\n        \"\"\"\n        await self.close()\n        return\n\n    def __del__(self):\n\"\"\"\n        del method of the client\n\n        Notes:\n            Calling ``client_instance.__del__()`` will instantly delete the\n            client but ``del client_instance`` will initiate the deleting\n            process of the client instance and the client may be accessible\n            for a short time after the call.\n        \"\"\"\n        Client.__instances.remove(self)\n        if not len(Client.__instances):\n            Client.__instances = None\n\n        if self.__client_running:\n            run(self.close())\n            if self.logger is not MISSING:\n                self.logger.warning(\"The client was still running, closed now.\")\n            else:\n                print(\"The client was still running, closed now.\", file=stderr)\n\n        return\n\n    @property\n    def is_running(self):\n\"\"\"\n        Returns:\n            bool:   ``True`` if the client is running\n            bool:   ``False`` if the client is not running\n        \"\"\"\n        return self.__client_running\n\n    @property\n    def client_id(self):\n\"\"\"\n        Getter of the client ID\n\n        Returns:\n            int:    the integer value of the client ID (only if the client ID is\n                    an integer)\n            str:    the string value of the client ID (only if the client ID is\n                    a string)\n        \"\"\"\n        return self._client_id\n\n    @client_id.setter\n    def client_id(self, new_id):\n\"\"\"\n        Setter of the client ID\n\n        Args:\n            new_id (str):   new custom ID of the client\n\n        Raises:\n            PyClasherException: the new custom ID must be a string and must not\n                                contain a string value that is a digit\n            PyClasherException: `new_id` must not contain spaces\n            PyClasherException: `new_id` {new_id} has already been\n                                taken and must be different\n        \"\"\"\n        global global_client_id\n        if not isinstance(new_id, str) or new_id.isdigit():\n            raise PyClasherException(\"The new custom ID must be a string and \"\n                                     \"must not contain a string value that is a\"\n                                     \" digit\")\n\n        if isinstance(new_id, str):\n            if \" \" in new_id:\n                raise PyClasherException(\"`new_id` must not contain spaces\")\n\n        for client in Client.__instances:\n            if client.client_id == new_id:\n                raise PyClasherException(f\"`new_id` {new_id} has already been \"\n                                         f\"taken and must be different\")\n\n        self._client_id = new_id\n\n        return\n\n    @classmethod\n    def get_instance(cls, client_id=None):\n\"\"\"\n        Getter of a client\n\n        Args:\n            client_id (int | str):  ID of a specific client or ``None``\n\n        Returns:\n            None:       no client initialised\n            Client:     the first client if ``client_id`` is ``None``\n            Client:     the client with the same ID as ``client_id``\n            MISSING:    no client with the same ID as ``client_id`` was found\n\n        Notes:\n            If ``client_id`` is left empty, the method is going to return the\n            first initialised client instance. Otherwise, the method is going to\n            return the client that has the same client ID as specified in\n            ``client_id``.\n        \"\"\"\n        if cls.__instances is None:\n            return None\n        clients = [client\n                   for client in cls.__instances\n                   if not client._event_client]\n        if len(clients):\n            if client_id is None:\n                return clients[0]\n            for client in clients:\n                if client.client_id == client_id:\n                    return client\n            return MISSING\n        return None\n\n    @classmethod\n    def initialized(cls):\n\"\"\"\n        Class method that returns a bool indicating if the ``Client``-class has\n        been initialised on or multiple times\n\n        Returns:\n            bool:   ``True`` if a client has been initialised,\n                    ``False`` otherwise\n        \"\"\"\n        return isinstance(cls.__instances, list)\n</code></pre>"},{"location":"API%20Reference/client/client/#pyclasher.client.client.Client.__instances","title":"<code>__instances: list[Client] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>List of Client instances or None</p>"},{"location":"API%20Reference/client/client/#pyclasher.client.client.Client.base_url","title":"<code>base_url: str = 'https://api.clashofclans.com'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Base url for all requests</p>"},{"location":"API%20Reference/client/client/#pyclasher.client.client.Client.client_id","title":"<code>client_id</code>  <code>property</code> <code>writable</code>","text":"<p>Getter of the client ID</p> <p>Returns:</p> Name Type Description <code>int</code> <p>the integer value of the client ID (only if the client ID is     an integer)</p> <code>str</code> <p>the string value of the client ID (only if the client ID is     a string)</p>"},{"location":"API%20Reference/client/client/#pyclasher.client.client.Client.endpoint","title":"<code>endpoint: str = '/v1'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Endpoint url for all requests</p>"},{"location":"API%20Reference/client/client/#pyclasher.client.client.Client.is_running","title":"<code>is_running: bool</code>  <code>property</code>","text":"<p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p><code>True</code> if the client is running</p> <code>bool</code> <code>bool</code> <p><code>False</code> if the client is not running</p>"},{"location":"API%20Reference/client/client/#pyclasher.client.client.Client.logger","title":"<code>logger: Logger = logger</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Logger that logs the requests</p>"},{"location":"API%20Reference/client/client/#pyclasher.client.client.Client.requests_per_second","title":"<code>requests_per_second: int = requests_per_second</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Maximal number of requests that are executed per second</p>"},{"location":"API%20Reference/client/client/#pyclasher.client.client.Client.__aenter__","title":"<code>__aenter__()</code>  <code>async</code>","text":"<p>asynchronous context manager (starting)</p> <p>Returns:</p> Name Type Description <code>Client</code> <code>Client</code> <p>returns itself</p> Source code in <code>pyclasher/client/client.py</code> <pre><code>async def __aenter__(self):\n\"\"\"\n    asynchronous context manager (starting)\n\n    Returns:\n        Client: returns itself\n    \"\"\"\n    return await self.start()\n</code></pre>"},{"location":"API%20Reference/client/client/#pyclasher.client.client.Client.__aexit__","title":"<code>__aexit__(exc_type, exc_val, exc_tb)</code>  <code>async</code>","text":"<p>asynchronous context manager (stopping)</p> <p>Parameters:</p> Name Type Description Default <code>exc_type</code> <code>type[BaseException]</code> <p>type of the exception or <code>None</code></p> required <code>exc_val</code> <code>BaseException</code> <p>the raised exception or <code>None</code></p> required <code>exc_tb</code> <code>TracebackType</code> <p>the traceback or <code>None</code></p> required Source code in <code>pyclasher/client/client.py</code> <pre><code>async def __aexit__(self, exc_type, exc_val, exc_tb):\n\"\"\"\n    asynchronous context manager (stopping)\n\n    Args:\n        exc_type (type[BaseException]): type of the exception or ``None``\n        exc_val (BaseException):        the raised exception or ``None``\n        exc_tb (TracebackType):         the traceback or ``None``\n    \"\"\"\n    await self.close()\n    return\n</code></pre>"},{"location":"API%20Reference/client/client/#pyclasher.client.client.Client.__del__","title":"<code>__del__()</code>","text":"<p>del method of the client</p> Notes <p>Calling <code>client_instance.__del__()</code> will instantly delete the client but <code>del client_instance</code> will initiate the deleting process of the client instance and the client may be accessible for a short time after the call.</p> Source code in <code>pyclasher/client/client.py</code> <pre><code>def __del__(self):\n\"\"\"\n    del method of the client\n\n    Notes:\n        Calling ``client_instance.__del__()`` will instantly delete the\n        client but ``del client_instance`` will initiate the deleting\n        process of the client instance and the client may be accessible\n        for a short time after the call.\n    \"\"\"\n    Client.__instances.remove(self)\n    if not len(Client.__instances):\n        Client.__instances = None\n\n    if self.__client_running:\n        run(self.close())\n        if self.logger is not MISSING:\n            self.logger.warning(\"The client was still running, closed now.\")\n        else:\n            print(\"The client was still running, closed now.\", file=stderr)\n\n    return\n</code></pre>"},{"location":"API%20Reference/client/client/#pyclasher.client.client.Client.__init__","title":"<code>__init__(tokens=None, requests_per_second=5, request_timeout=30, logger=MISSING, swagger_url=None)</code>","text":"<p>initialisation method for the client</p> <p>Parameters:</p> Name Type Description Default <code>tokens</code> <code>str | list[str] | None</code> <p>the Bearer tokens for the                                 authentication of the                                 ClashOfClans API</p> <code>None</code> <code>requests_per_second</code> <code>int</code> <p>This integer limits the number                                 of requests done per second                                 (per token).                                 This value is important to                                 bypass the rate limit of the                                 ClashOfClans API.                                 More tokens allow more requests                                 per second because each token                                 can do as many requests per                                 second as specified.</p> <code>5</code> <code>request_timeout</code> <code>float</code> <p>timeout in seconds for one                                 request</p> <code>30</code> <code>logger</code> <code>Logger</code> <p>logger for detailed logging</p> <code>MISSING</code> <code>swagger_url</code> <code>str</code> <p>swagger url for requests</p> <code>None</code> <p>Raises:     InvalidType:                provided tokens are not of type <code>str</code>                                 or <code>Iterable[str]</code></p> Source code in <code>pyclasher/client/client.py</code> <pre><code>def __init__(\n        self,\n        tokens=None,\n        requests_per_second=5,\n        request_timeout=30,\n        logger=MISSING,\n        swagger_url=None\n):\n\"\"\"\n    initialisation method for the client\n\n    Args:\n        tokens (str | list[str] | None):    the Bearer tokens for the\n                                            authentication of the\n                                            ClashOfClans API\n        requests_per_second (int):          This integer limits the number\n                                            of requests done per second\n                                            (per token).\n                                            This value is important to\n                                            bypass the rate limit of the\n                                            ClashOfClans API.\n                                            More tokens allow more requests\n                                            per second because each token\n                                            can do as many requests per\n                                            second as specified.\n        request_timeout (float):            timeout in seconds for one\n                                            request\n        logger (Logger):                    logger for detailed logging\n        swagger_url (str):                  swagger url for requests\n    Raises:\n        InvalidType:                provided tokens are not of type ``str``\n                                    or ``Iterable[str]``\n    \"\"\"\n\n    global global_client_id\n\n    if logger is None:\n        logger = MISSING\n    self.logger = logger\n    self.logger.info(\"initialising client\")\n    if tokens is not None:\n        if isinstance(tokens, str):\n            self.__tokens = [tokens]\n        elif isinstance(tokens, Iterable):\n            self.__tokens = list(tokens)\n        else:\n            raise InvalidType(tokens,\n                              (str, Iterable[str]))\n\n    if swagger_url is not None:\n        parsed_url = urlparse(swagger_url)\n        self.base_url = f\"{parsed_url.scheme}://{parsed_url.netloc}\"\n        self.endpoint = parsed_url.path[:-1]\n\n    self.requests_per_second = requests_per_second\n\n    self.logger.debug(\"client initialised\")\n\n    self.queue = PQueue()\n    self.request_timeout = request_timeout\n\n    self.__client_running = False\n    self.__temporary_session = False\n    self.__consumers = None\n    self.__consume_tasks = None\n    self._client_id = global_client_id\n\n    global_client_id += 1\n\n    self._event_client = False\n\n    return\n</code></pre>"},{"location":"API%20Reference/client/client/#pyclasher.client.client.Client.__new__","title":"<code>__new__(*, tokens=None, **kwargs)</code>","text":"<p>Class method to create a new instance of the Client</p> <p>Parameters:</p> Name Type Description Default <code>tokens</code> <code>str | list[str] | None</code> <p>the Bearer tokens for the authentication of the ClashOfClans API</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>other key word arguments</p> <code>{}</code> Notes <p>This function checks if all initialised clients do not share a token. If so the ecxeption <code>ClientAlreadyInitialised</code> is raised.</p> <p>Raises:</p> Type Description <code>InvalidType</code> <p>provided tokens are not of type <code>str</code>                         or <code>Iterable[str]</code></p> <code>ClientAlreadyInitialised</code> <p>at least one of the provided tokens is                         equal to a token that is already in use</p> Source code in <code>pyclasher/client/client.py</code> <pre><code>def __new__(cls, *, tokens=None, **kwargs):\n\"\"\"\n    Class method to create a new instance of the Client\n\n    Args:\n        tokens (str | list[str] | None):    the Bearer tokens for the authentication of the ClashOfClans API\n        **kwargs (Any):                     other key word arguments\n\n    Notes:\n        This function checks if all initialised clients do not share a\n        token. If so the ecxeption ``ClientAlreadyInitialised`` is raised.\n\n    Raises:\n        InvalidType:                provided tokens are not of type ``str``\n                                    or ``Iterable[str]``\n        ClientAlreadyInitialised:   at least one of the provided tokens is\n                                    equal to a token that is already in use\n    \"\"\"\n    if cls.__instances is None:\n        cls.__instances = [super().__new__(cls)]\n        return cls.__instances[0]\n    if isinstance(tokens, str):\n        tokens = [tokens]\n    elif isinstance(tokens, Iterable):\n        tokens = list(tokens)\n    else:\n        raise InvalidType(tokens,\n                          (str, Iterable[str]))\n    for token in tokens:\n        for client in Client.__instances:\n            if client.__tokens is not None:\n                if token in client.__tokens:\n                    raise ClientAlreadyInitialised\n                continue\n\n    cls.__instances.append(super().__new__(cls))\n    return cls.__instances[-1]\n</code></pre>"},{"location":"API%20Reference/client/client/#pyclasher.client.client.Client.close","title":"<code>close()</code>  <code>async</code>","text":"<p>coroutine method to stop the client</p> <p>Returns:</p> Name Type Description <code>Client</code> <code>Client</code> <p>returns itself</p> Source code in <code>pyclasher/client/client.py</code> <pre><code>async def close(self):\n\"\"\"\n    coroutine method to stop the client\n\n    Returns:\n        Client: returns itself\n    \"\"\"\n    self.logger.info(\"closing client\")\n    if not self.__client_running:\n        self.logger.error(\"the client is not running\")\n        raise ClientIsNotRunning\n    else:\n        self.__client_running = False\n\n    for task in self.__consume_tasks:\n        task.cancel()\n    self.__consume_tasks = None\n    for consumer in self.__consumers:\n        await consumer.close()\n    self.__consumers = None\n\n    self.logger.debug(\"client closed\")\n    return self\n</code></pre>"},{"location":"API%20Reference/client/client/#pyclasher.client.client.Client.from_login","title":"<code>from_login(email, password, requests_per_second=5, request_timeout=30, logger=MISSING, login_count=1)</code>  <code>async</code> <code>classmethod</code>","text":"<p>Class method to initialise a client using the authentication of the ClashOfClans API and create tokens using this API.</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>str</code> <p>user email address to log in to the                         ClashOfClans developer portal</p> required <code>password</code> <code>str</code> <p>user password for the email</p> required <code>requests_per_second</code> <code>int</code> <p>number of requests per token per second</p> <code>5</code> <code>request_timeout</code> <code>float</code> <p>seconds until the request is cancelled                         due to a timeout</p> <code>30</code> <code>logger</code> <code>Logger</code> <p>logger</p> <code>MISSING</code> <code>login_count</code> <code>int</code> <p>number of logins that should be done                         (having more logins results more tokens                         and this leads to more requests that can                         be executed in parallel)</p> <code>1</code> <p>Notes:     Do not set the <code>login_count</code> to high, otherwise the account     could be banned. 5 works fine.</p> <p>Returns:</p> Name Type Description <code>Client</code> <code>Client</code> <p>an instance of the pyclasher client</p> Source code in <code>pyclasher/client/client.py</code> <pre><code>@classmethod\nasync def from_login(cls, email, password, requests_per_second=5,\n                     request_timeout=30, logger=MISSING, login_count=1):\n\"\"\"\n    Class method to initialise a client using the authentication of the\n    ClashOfClans API and create tokens using this API.\n\n    Args:\n        email (str):                user email address to log in to the\n                                    ClashOfClans developer portal\n        password (str):             user password for the email\n        requests_per_second (int):  number of requests per token per second\n        request_timeout (float):    seconds until the request is cancelled\n                                    due to a timeout\n        logger (Logger):            logger\n        login_count (int):          number of logins that should be done\n                                    (having more logins results more tokens\n                                    and this leads to more requests that can\n                                    be executed in parallel)\n    Notes:\n        Do not set the ``login_count`` to high, otherwise the account\n        could be banned. 5 works fine.\n\n    Returns:\n        Client: an instance of the pyclasher client\n    \"\"\"\n    if logger is None:\n        logger = MISSING\n\n    logins = [\n        await Login(email, password).login() for _ in range(login_count)\n    ]\n\n    logger.info(\"initialising client via login\")\n\n    self = cls(tokens=[login.temporary_api_token for login in logins],\n               requests_per_second=requests_per_second,\n               request_timeout=request_timeout,\n               swagger_url=logins[0].swagger_url)\n    self.logger = logger\n    self.__temporary_session = True\n    return self\n</code></pre>"},{"location":"API%20Reference/client/client/#pyclasher.client.client.Client.get_instance","title":"<code>get_instance(client_id=None)</code>  <code>classmethod</code>","text":"<p>Getter of a client</p> <p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>int | str</code> <p>ID of a specific client or <code>None</code></p> <code>None</code> <p>Returns:</p> Name Type Description <code>None</code> <code>None | Client</code> <p>no client initialised</p> <code>Client</code> <code>None | Client</code> <p>the first client if <code>client_id</code> is <code>None</code></p> <code>Client</code> <code>None | Client</code> <p>the client with the same ID as <code>client_id</code></p> <code>MISSING</code> <code>None | Client</code> <p>no client with the same ID as <code>client_id</code> was found</p> Notes <p>If <code>client_id</code> is left empty, the method is going to return the first initialised client instance. Otherwise, the method is going to return the client that has the same client ID as specified in <code>client_id</code>.</p> Source code in <code>pyclasher/client/client.py</code> <pre><code>@classmethod\ndef get_instance(cls, client_id=None):\n\"\"\"\n    Getter of a client\n\n    Args:\n        client_id (int | str):  ID of a specific client or ``None``\n\n    Returns:\n        None:       no client initialised\n        Client:     the first client if ``client_id`` is ``None``\n        Client:     the client with the same ID as ``client_id``\n        MISSING:    no client with the same ID as ``client_id`` was found\n\n    Notes:\n        If ``client_id`` is left empty, the method is going to return the\n        first initialised client instance. Otherwise, the method is going to\n        return the client that has the same client ID as specified in\n        ``client_id``.\n    \"\"\"\n    if cls.__instances is None:\n        return None\n    clients = [client\n               for client in cls.__instances\n               if not client._event_client]\n    if len(clients):\n        if client_id is None:\n            return clients[0]\n        for client in clients:\n            if client.client_id == client_id:\n                return client\n        return MISSING\n    return None\n</code></pre>"},{"location":"API%20Reference/client/client/#pyclasher.client.client.Client.initialized","title":"<code>initialized()</code>  <code>classmethod</code>","text":"<p>Class method that returns a bool indicating if the <code>Client</code>-class has been initialised on or multiple times</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p><code>True</code> if a client has been initialised,     <code>False</code> otherwise</p> Source code in <code>pyclasher/client/client.py</code> <pre><code>@classmethod\ndef initialized(cls):\n\"\"\"\n    Class method that returns a bool indicating if the ``Client``-class has\n    been initialised on or multiple times\n\n    Returns:\n        bool:   ``True`` if a client has been initialised,\n                ``False`` otherwise\n    \"\"\"\n    return isinstance(cls.__instances, list)\n</code></pre>"},{"location":"API%20Reference/client/client/#pyclasher.client.client.Client.start","title":"<code>start(tokens=None)</code>  <code>async</code>","text":"<p>coroutine method to start the client</p> <p>Parameters:</p> Name Type Description Default <code>tokens</code> <code>str | list[str] | None</code> <p>the Bearer tokens for the                                 authentication of the                                 ClashOfClans API</p> <code>None</code> Notes <p>The tokens passed to this function have priority so if tokens are set in the client initialisation and also passed to this function, the tokens passed to this function will be used to start the client and the consumer tasks.</p> <p>If it is needed to create multiple clients with the same tokens, it is possible to use this function and pass the tokens directly to the different clients.</p> <p>Returns:</p> Name Type Description <code>Client</code> <code>Client</code> <p>returns itself</p> Source code in <code>pyclasher/client/client.py</code> <pre><code>async def start(self, tokens=None):\n\"\"\"\n    coroutine method to start the client\n\n    Args:\n        tokens (str | list[str] | None):    the Bearer tokens for the\n                                            authentication of the\n                                            ClashOfClans API\n\n    Notes:\n        The tokens passed to this function have priority so if tokens are\n        set in the client initialisation and also passed to this function,\n        the tokens passed to this function will be used to start the\n        client and the consumer tasks.\n\n        If it is needed to create multiple clients with the same tokens,\n        it is possible to use this function and pass the tokens directly to\n        the different clients.\n\n    Returns:\n        Client: returns itself\n\n    \"\"\"\n    if tokens is None:\n        tokens = self.__tokens\n\n        if tokens is None:\n            raise NoneToken\n\n    elif isinstance(tokens, str):\n        tokens = [tokens]\n\n    if not isinstance(tokens, Iterable):\n        raise InvalidType(tokens, (str, Iterable[str]))\n\n    if self.__client_running or self.__consume_tasks is not None:\n        self.logger.error(\"the client is already running\")\n        raise ClientIsRunning\n\n    self.__client_running = True\n    self.logger.info(\"starting client\")\n\n    self.__consumers = [\n        PConsumer(self.queue, token, self.requests_per_second,\n                  self.request_timeout, self.base_url)\n        for token in tokens\n    ]\n    self.__consume_tasks = [\n        create_task(consumer.consume()) for consumer in self.__consumers\n    ]\n    self.logger.debug(\"client started\")\n\n    return self\n</code></pre>"},{"location":"API%20Reference/client/request_consumer/","title":"Request consumer","text":""},{"location":"API%20Reference/client/request_consumer/#pyclasher.client.request_consumer.PConsumer","title":"<code>PConsumer</code>","text":"<p>consumer class that consumes the requests and returns the responses of the ClashOfClans API</p> <p>:ivar   queue:          the request_queue where the requests are enqueued :type   queue:          Queue :ivar   r_p_s:          allowed number of requests that can be done with one consumer in one second :type   r_p_s:          int :ivar   url:            the base URL for the requests :type   url:            str</p> Source code in <code>pyclasher/client/request_consumer.py</code> <pre><code>class PConsumer:\n    def __init__(self, queue, token, requests_per_s, request_timeout, url):\n        self.queue = queue\n        self.header = {\n            'Authorization': f'Bearer {token}'\n        }\n        self.r_p_s = requests_per_s\n        self.timeout = request_timeout\n        self.wait = 1 / self.r_p_s\n        self.url = url\n        self.session = ClientSession(\n            base_url=url,\n            headers=self.header,\n            timeout=ClientTimeout(total=self.timeout)\n        )\n        return\n\n    async def _request(self, future, url, method, body, status, error):\n        try:\n            async with self.session.request(\n                    method=method,\n                    url=url,\n                    data=None if body is None else dumps(body)\n            ) as response:\n                response_json = await response.json()\n\n                if response.status == 200:\n                    error.set_result(None)\n                else:\n                    error.set_result(ApiExceptions.from_api_code(\n                        response.status, ClientError(response_json)\n                    ))\n\n                future.set_result(response_json)\n                status.set_result(response.status)\n                return\n\n        except aTimeoutError:\n            future.set_result(MISSING)\n            status.set_result(None)\n            error.set_result(RequestTimeout(self.timeout))\n        except Exception as exception:\n            future.set_result(MISSING)\n            status.set_result(None)\n            error.set_result(exception)\n            raise exception\n\n\n    async def consume(self):\n        while True:\n            future, url, method, body, status, error = await self.queue.get()\n\n            async with ExecutionTimer(self.wait):\n                create_task(\n                    self._request(\n                        future, url, method.value, body, status, error\n                    )\n                )\n\n                self.queue.task_done()\n\n    async def close(self):\n        await self.session.close()\n        return\n</code></pre>"},{"location":"API%20Reference/client/request_consumer/#pyclasher.client.request_consumer.PConsumer.__init__","title":"<code>__init__(queue, token, requests_per_s, request_timeout, url)</code>","text":"<p>initialisation of the request consumer</p> <p>:param  queue:              the request_queue where the requests are enqueued :type   queue:              Queue :param  token:              one ClashOfClans API token :type   token:              str :param  requests_per_s:     allowed number of requests that can be done with one consumer in one second :type   requests_per_s:     int :param  request_timeout:    seconds until the request is cancelled due to a timeout :type   request_timeout:    float :param  url:                the base URL for the requests :type   url:                str :return:                    None :rtype:                     None</p> Source code in <code>pyclasher/client/request_consumer.py</code> <pre><code>def __init__(self, queue, token, requests_per_s, request_timeout, url):\n    self.queue = queue\n    self.header = {\n        'Authorization': f'Bearer {token}'\n    }\n    self.r_p_s = requests_per_s\n    self.timeout = request_timeout\n    self.wait = 1 / self.r_p_s\n    self.url = url\n    self.session = ClientSession(\n        base_url=url,\n        headers=self.header,\n        timeout=ClientTimeout(total=self.timeout)\n    )\n    return\n</code></pre>"},{"location":"API%20Reference/client/request_consumer/#pyclasher.client.request_consumer.PConsumer.close","title":"<code>close()</code>  <code>async</code>","text":"<p>asynchronous method that closed the consumer</p> <p>:return:    None :rtype:     None</p> Source code in <code>pyclasher/client/request_consumer.py</code> <pre><code>async def close(self):\n    await self.session.close()\n    return\n</code></pre>"},{"location":"API%20Reference/client/request_consumer/#pyclasher.client.request_consumer.PConsumer.consume","title":"<code>consume()</code>  <code>async</code>","text":"<p>asynchronous method that is used as a consuming task that consumes requests forever until stopped</p> <p>:return:    None :rtype:     None .. note::   uses an infinite while loop, only run it as an asyncio task</p> Source code in <code>pyclasher/client/request_consumer.py</code> <pre><code>async def consume(self):\n    while True:\n        future, url, method, body, status, error = await self.queue.get()\n\n        async with ExecutionTimer(self.wait):\n            create_task(\n                self._request(\n                    future, url, method.value, body, status, error\n                )\n            )\n\n            self.queue.task_done()\n</code></pre>"},{"location":"API%20Reference/client/request_queue/","title":"Request queue","text":""},{"location":"API%20Reference/utils/exectimer/","title":"Exectimer","text":""},{"location":"API%20Reference/utils/functions/","title":"Functions","text":""},{"location":"API%20Reference/utils/login/","title":"Login","text":""},{"location":"API%20Reference/utils/login/#pyclasher.utils.login.Login","title":"<code>Login</code>","text":"<p>             Bases: <code>LoginModel</code></p> <p>class to log in via the ClashOfClans login API</p> <p>to execute the login use <code>Login(...).login()</code> or <code>await Login(...).login()</code> depending on the context</p> Source code in <code>pyclasher/utils/login.py</code> <pre><code>class Login(LoginModel):\n    login_url = \"https://developer.clashofclans.com/api/login\"\n    __response = None\n\n    def __new__(cls, *args, **kwargs):\n        return super().__new__(cls)\n\n    def __init__(self, email, password):\n        super().__init__(data=None)\n        self.email = email\n        self.__password = password\n\n        return\n\n    def _get_data(self, item):\n        if self._data is None:\n            return None\n        if self._data is MISSING:\n            raise LoginNotDone\n        if item in self._data:\n            return self._data[item]\n        else:\n            return MISSING\n\n    def login(self):\n        async def async_login():\n            async with request(\"post\", self.login_url, json={\n                \"email\": self.email,\n                \"password\": self.__password\n            }) as response:\n                if response.status == 200:\n                    self._data = await response.json()\n                    return self\n                else:\n                    raise InvalidLoginData\n\n        try:\n            get_running_loop()\n        except RuntimeError:\n            return run(async_login())\n        else:\n            return async_login()\n</code></pre>"},{"location":"API%20Reference/utils/login/#pyclasher.utils.login.Login.login","title":"<code>login()</code>","text":"<p>method to execute the login process</p> <p>This method can be called in an asynchronous context using the <code>await</code> keyword in an asynchronous definition or used as a traditional method without awaiting it.</p> <p>:return:    the login :rtype:     Login | Coroutine[Any, Any, Login]</p> Source code in <code>pyclasher/utils/login.py</code> <pre><code>def login(self):\n    async def async_login():\n        async with request(\"post\", self.login_url, json={\n            \"email\": self.email,\n            \"password\": self.__password\n        }) as response:\n            if response.status == 200:\n                self._data = await response.json()\n                return self\n            else:\n                raise InvalidLoginData\n\n    try:\n        get_running_loop()\n    except RuntimeError:\n        return run(async_login())\n    else:\n        return async_login()\n</code></pre>"},{"location":"API%20Reference/utils/request_methods/","title":"Request methods","text":""},{"location":"Tutorials/01_installation/","title":"Installation","text":""},{"location":"Tutorials/01_installation/#requirements","title":"Requirements","text":"<p>To use the PyClasher-package you need Python 3.8 or higher.</p>"},{"location":"Tutorials/01_installation/#installation_1","title":"Installation","text":"<p>The package is accessible on PyPi.org so you can install the package  using </p> <pre><code>pip install pyclasher\n</code></pre>"},{"location":"Tutorials/11_setting_up_a_Client/","title":"Setting up a Client","text":"<p>The Client is the heard of this package. It allows to make the requests.</p>"},{"location":"Tutorials/11_setting_up_a_Client/#the-client","title":"The client","text":"<p>The Client uses API tokens that you can obtain from the official ClashOfClans developer portal. Those tokens serve as a verification to  the ClashOfClans API. It is sufficient to create an account and create one or multiple tokens. </p>"},{"location":"Tutorials/11_setting_up_a_Client/#setting-up","title":"Setting up","text":""},{"location":"Tutorials/11_setting_up_a_Client/#with-tokens","title":"With tokens","text":"<p>To set up a client, you need to import the Client from  <code>pyclasher.client</code> and adding the tokens to it:</p> <pre><code>import asyncio\n\nfrom pyclasher.client import Client\n\n\nmy_tokens = [\n    \"enter your first token here\",\n    \"enter the other tokens here separated as strings in a list\"\n]\n\nmy_client = Client(tokens=my_tokens)\n\nasync def main():\n    # starting the client\n    await my_client.start()\n\n    # doing requests here\n    ...\n\n    # stopping the client\n    await my_client.close()\n\nasyncio.run(main())\n</code></pre> <p>Note</p> <p>It is recommended to use environment variables for the tokens. So you can  make sure that the tokens are never leaked on the Internet or on GitHub, ...</p>"},{"location":"Tutorials/11_setting_up_a_Client/#with-clashofclans-developer-account","title":"With ClashOfClans developer account","text":"<p>It is also possible to set up a client using the login data from  https://developer.clashofclans.com/#/login.</p> <pre><code>import asyncio\n\nfrom pyclasher.client import Client\n\n\nmy_email = \"email@example.com\"\nmy_password = \"examplePassword1234\"\n\nasync def login():\n    return await Client.from_login(\n        my_email, my_password,\n        login_count=1   # this parameter is used to log in multiple times to the \n                        # ClashOfClans developer portal and create multiple tokens\n    )\n\nasync def main():\n    my_client = await login()\n\n    # starting the client\n    await my_client.start()\n\n    # requests\n    ...\n\n    # stopping the client\n    await my_client.close()\n</code></pre> <p>Warning</p> <p>This is an alternative method to get tokens. Those tokens are temporarily  and expire after one hour. It is intended for testing purpose only. An implementation to renew the tokens after one hour will not ever happen. Use tokens for production purpose.</p>"},{"location":"Tutorials/12_Requests/","title":"Requests","text":"<p>The requests defined in this package are a user-friendly implementation of  requesting and getting data of the official ClashOfClans-API. The requests return models that are some kind of wrapper for the data that hides behind the  models. Those models have error handling and are easier to use than raw JSON data.</p>"}]}